[
  {
    "id": 65488487,
    "slug": "6ce8d726-da0d-4bd1-b677-a5f990b8d498",
    "title": "Spring注解驱动开发（一）",
    "book_id": 24581911,
    "book": {
      "id": 24581911,
      "type": "Book",
      "slug": "it",
      "name": "IT知识库",
      "user_id": 25975919,
      "description": null,
      "creator_id": 25975919,
      "public": 0,
      "items_count": 1,
      "likes_count": 0,
      "watches_count": 1,
      "content_updated_at": "2022-01-22T15:18:16.198Z",
      "updated_at": "2022-01-22T15:18:16.000Z",
      "created_at": "2022-01-22T09:17:10.000Z",
      "namespace": "qianliangzhang/it",
      "user": {
        "id": 25975919,
        "type": "User",
        "login": "qianliangzhang",
        "name": "清水河恶霸",
        "description": null,
        "avatar_url": "https://cdn.nlark.com/yuque/0/2022/jpeg/anonymous/1642842952733-3d25fb5d-0c24-4026-a762-05fc75131053.jpeg",
        "books_count": 1,
        "public_books_count": 0,
        "followers_count": 0,
        "following_count": 0,
        "created_at": "2022-01-22T09:16:42.000Z",
        "updated_at": "2022-01-22T14:44:27.000Z",
        "_serializer": "v2.user"
      },
      "_serializer": "v2.book"
    },
    "user_id": 25975919,
    "creator": {
      "id": 25975919,
      "type": "User",
      "login": "qianliangzhang",
      "name": "清水河恶霸",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2022/jpeg/anonymous/1642842952733-3d25fb5d-0c24-4026-a762-05fc75131053.jpeg",
      "books_count": 1,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2022-01-22T09:16:42.000Z",
      "updated_at": "2022-01-22T14:44:27.000Z",
      "_serializer": "v2.user"
    },
    "format": "lake",
    "body": "\n\n<a name=\"uKqFE\"></a>\n# 0 简介 \n> 当我们还在使用 Spring、[SpringMVC](https://so.csdn.net/so/search?q=SpringMVC&spm=1001.2101.3001.7020)、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springboot 和 SpringCloud 里面会使用到大量的注解来进行配置；当我们熟练掌握了 Spring 的注解驱动，那当我们在学习 Springboot 和 SpringCloud 框架的时候，那将会更加的轻松自如；让我们一起来开启 Spring 注解驱动开发的学习之旅吧！\n\n\n\n<a name=\"81f533a5\"></a>\n# 1 组件注册 -`@Configuration`&`@Bean`给容器中注册组件\n\n<br />创建一个 Maven 项目：spring-annotation<br />导入 spring-context jar 包 – 这个就是 Spring 核心环境所有依赖的 jar 包<br />[Maven 仓库中的 spring-context](https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE)\n\n---\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.ldc</groupId>\n    <artifactId>spring-annotation</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>4.3.12.RELEASE</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n---\n\n- **xml 文件配置的方式**<br />先按照我们以前配置的方式来使用 Spring：<br />首先有一个 Person 类：\n\n\n\n```java\npublic class Person {\n    private String name;\n    private Integer age;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n<br />我们再写上一个 Spring 的 xml 配置文件：<br />\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\t<bean id=\"person\" class=\"com.ldc.bean.Person\">\n\t\t<property name=\"age\" value=\"18\"></property>\n\t\t<property name=\"name\" value=\"张三\"></property>\n\t</bean>\n</beans>\n```\n\n<br />测试类来测试：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person);\n    }\n}\n```\n\n<br />输出结果为：<br />\n\n> Person{name=‘张三’, age=18}\n\n\n---\n\n- **注解的方式**：\n\n\n<br />首先我们先写一个配置类：等同于 xml 配置文件<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean\n    public Person person() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />现在，我们来测试一下：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n    }\n}\n```\n\n<br />测试结果如下：<br />\n\n> Person{name=‘lisi’, age=20}\n\n\n---\n\n我们也可以通过 ApplicationContext 的一些方法来获取容器里面 bean 的一些信息，比如我们可以获取 Person 这个 bean 在 IOC 容器里面的名字，也是相当于是 xml 配置文件里面标签里面的 id 属性；<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n<br />测试结果如下：<br />\n\n> Person{name=‘lisi’, age=20}<br />person\n\n\n---\n\n**Spring 注解的方式默认是以配置的方法名来作为这个 bean 的默认 id，如果我们不想要方法名来作为 bean 的 id，我们可以在**`**@Bean**`**这个注解的 value 属性来进行指定：**<br />\n\n```java\n@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们再来运行这个测试类：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n<br />那么现在的测试结果如下：bean 在 IOC 容器的名字就是 [@Bean ](/Bean ) 这个注解的 value 属性的值，而不是默认的 id 是方法名 person01 <br />\n\n> Person{name=‘lisi’, age=20}<br />person\n\n\n\n<a name=\"de67f166\"></a>\n# 2 组件注册 -`@ComponentScan`-自动扫描组件 & 指定扫描规则\n\n<br />在 xml 文件配置的方式，我们可以这样来进行配置：<br />\n\n```xml\n    <!-- 包扫描、只要标注了@Controller、@Service、@Repository，@Component -->\n    <context:component-scan base-package=\"com.ldc\"/>\n```\n\n---\n\n以前是在 xml 配置文件里面写包扫描，现在我们可以在配置类里面写包扫描：<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = \"com.ldc\")//相当于是xml配置文件里面的<context:component-scan base-package=\"com.ldc\"/>\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n我们创建 BookController、BookService、BookDao 这几个类，分别添加了`@Controller`、`@Service`、`@Repository`注解：<br />\n\n```java\n@Controller\npublic class BookController {\n}\n```\n\n\n```java\n@Service\npublic class BookService {\n}\n```\n\n\n```java\n@Repository\npublic class BookDao {\n}\n```\n\n<br />我们可以引入 junit 的 jar 包来进行测试：<br />\n\n```xml\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n```\n\n<br />我们来进行单元测试：<br />\n\n```java\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n```\n\n<br />测试结果如下：除开 IOC 容器自己要装配的一些组件外，还有是我们自己装配的组件<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />bookDao<br />bookService<br />person\n\n\n<br />从上面的测试结果我们可以发现主配置类 MainConfig 也是 IOC 容器里面的组件，也被纳入了 IOC 容器的管理：<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = \"com.ldc\")//相当于是xml配置文件里面的<context:component-scan base-package=\"com.ldc\"/>\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们从`@Configuration` 这个注解点进去就可以发现这个注解上也标注了 `@Component` 的这个注解，也纳入到 IOC 容器中作为一个组件：<br />\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration {\n\n\t/**\n\t * Explicitly specify the name of the Spring bean definition associated\n\t * with this Configuration class. If left unspecified (the common case),\n\t * a bean name will be automatically generated.\n\t * <p>The custom name applies only if the Configuration class is picked up via\n\t * component scanning or supplied directly to a {@link AnnotationConfigApplicationContext}.\n\t * If the Configuration class is registered as a traditional XML bean definition,\n\t * the name/id of the bean element will take precedence.\n\t * @return the specified bean name, if any\n\t * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator\n\t */\n\tString value() default \"\";\n\n}\n```\n\n---\n\n我们在 `@ComponentScan` 这个注解上，也是可以指定要排除哪些包或者是只包含哪些包来进行管理：里面传是一个 Filter[]数组<br />![](https://img-blog.csdnimg.cn/20190110194446276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=j9Wtt&originHeight=529&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />\n<br />我们从这个 excludeFilters 方法点过去，就到了`@Filter`这个注解：<br />\n\n```java\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({})\n\t@interface Filter {\n\n\t\t/**\n\t\t * The type of filter to use.\n\t\t * <p>Default is {@link FilterType#ANNOTATION}.\n\t\t * @see #classes\n\t\t * @see #pattern\n\t\t */\n\t\t//这个是要排除的规则：是按注解来进行排除还是按照类来进行排除还是按照正则表达式来来进行排除\n\t\tFilterType type() default FilterType.ANNOTATION;\n\n\t\t/**\n\t\t * Alias for {@link #classes}.\n\t\t * @see #classes\n\t\t */\n\t\t@AliasFor(\"classes\")\n\t\tClass<?>[] value() default {};\n\n\t\t/**\n\t\t * The class or classes to use as the filter.\n\t\t * <p>The following table explains how the classes will be interpreted\n\t\t * based on the configured value of the {@link #type} attribute.\n\t\t * <table border=\"1\">\n\t\t * <tr><th>{@code FilterType}</th><th>Class Interpreted As</th></tr>\n\t\t * <tr><td>{@link FilterType#ANNOTATION ANNOTATION}</td>\n\t\t * <td>the annotation itself</td></tr>\n\t\t * <tr><td>{@link FilterType#ASSIGNABLE_TYPE ASSIGNABLE_TYPE}</td>\n\t\t * <td>the type that detected components should be assignable to</td></tr>\n\t\t * <tr><td>{@link FilterType#CUSTOM CUSTOM}</td>\n\t\t * <td>an implementation of {@link TypeFilter}</td></tr>\n\t\t * </table>\n\t\t * <p>When multiple classes are specified, <em>OR</em> logic is applied\n\t\t * &mdash; for example, \"include types annotated with {@code @Foo} OR {@code @Bar}\".\n\t\t * <p>Custom {@link TypeFilter TypeFilters} may optionally implement any of the\n\t\t * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and\n\t\t * their respective methods will be called prior to {@link TypeFilter#match match}:\n\t\t * <ul>\n\t\t * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>\n\t\t * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}\n\t\t * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}\n\t\t * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}\n\t\t * </ul>\n\t\t * <p>Specifying zero classes is permitted but will have no effect on component\n\t\t * scanning.\n\t\t * @since 4.2\n\t\t * @see #value\n\t\t * @see #type\n\t\t */\n\t\t@AliasFor(\"value\")\n\t\tClass<?>[] classes() default {};\n\n\t\t/**\n\t\t * The pattern (or patterns) to use for the filter, as an alternative\n\t\t * to specifying a Class {@link #value}.\n\t\t * <p>If {@link #type} is set to {@link FilterType#ASPECTJ ASPECTJ},\n\t\t * this is an AspectJ type pattern expression. If {@link #type} is\n\t\t * set to {@link FilterType#REGEX REGEX}, this is a regex pattern\n\t\t * for the fully-qualified class names to match.\n\t\t * @see #type\n\t\t * @see #classes\n\t\t */\n\t\tString[] pattern() default {};\n\n\t}\n```\n\n---\n\n这个时候，我们就可以这样来配置：<br />\n\n```java\n@Configuration\n@ComponentScan(value = \"com.ldc\",excludeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class,Service.class}表示的是标有这些注解的类给排除掉\n        @Filter(type = FilterType.ANNOTATION,classes = {Controller.class,Service.class})\n})\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们再来测试一下：<br />\n\n```java\npublic class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}\n```\n\n<br />这个时候的测试结果如下：这个时候，bookService、bookController 这两个组件就已经被排除掉了，不再被 IOC 容器给管理：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookDao<br />person\n\n\n---\n\n我们也可以来配置**includeFilters**：指定在扫描的时候，只需要包含哪些组件<br />在用 xml 文件配置的方式来进行配置的时候，还要禁用掉默认的配置规则，只包含哪些组件的配置才能生效<br />\n\n> <context:[component](https://so.csdn.net/so/search?q=component&spm=1001.2101.3001.7020)-scan base-package=“com.ldc” use-default-filters=“false”/>\n\n\n<br />![](https://img-blog.csdnimg.cn/20190110203227264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=qJpvy&originHeight=397&originWidth=1158&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n---\n\n这个时候，我们就可以这样来写：<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = \"com.ldc\",includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />测试类：<br />\n\n```java\npublic class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}\n```\n\n<br />这个时候，测试结果如下：这个时候是按照标有注解来进行包含的，现在就只有一个 bookController 被纳入到 IOC 容器进行管理<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />person\n\n\n---\n\n`@ComponentScan`这个注解是可以重复定义的：来指定不同的扫描策略<br />![](https://img-blog.csdnimg.cn/2019011020395423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=IAyjq&originHeight=696&originWidth=1042&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n---\n\n我们还可以用 `@ComponentScans`来定义多个扫描规则：里面是`@ComponentScan`规则的数组<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n    @ComponentScan(value = \"com.ldc\",includeFilters = {\n            //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n            //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n            @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n    },useDefaultFilters = false),\n    @ComponentScan(value = \"com.ldc\")\n})\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n也可以直接这样来配置多个`@ComponentScan`注解：**但是这样写的话，就必须要 java8 及以上的支持**<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = \"com.ldc\",includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\n\n@ComponentScan(value = \"com.ldc\")\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n<a name=\"3acd5314\"></a>\n# 3 组件注册 - 自定义 TypeFilter 指定过滤规则\n\n<br />我们可以来看看有哪几种过滤规则：<br />\n\n```java\npublic enum FilterType {\n\n\t/**\n\t * Filter candidates marked with a given annotation.\n\t * @see org.springframework.core.type.filter.AnnotationTypeFilter\n\t */\n\tANNOTATION,\n\n\t/**\n\t * Filter candidates assignable to a given type.\n\t * @see org.springframework.core.type.filter.AssignableTypeFilter\n\t */\n\tASSIGNABLE_TYPE,\n\n\t/**\n\t * Filter candidates matching a given AspectJ type pattern expression.\n\t * @see org.springframework.core.type.filter.AspectJTypeFilter\n\t */\n\tASPECTJ,\n\n\t/**\n\t * Filter candidates matching a given regex pattern.\n\t * @see org.springframework.core.type.filter.RegexPatternTypeFilter\n\t */\n\tREGEX,\n\n\t/** Filter candidates using a given custom\n\t * {@link org.springframework.core.type.filter.TypeFilter} implementation.\n\t */\n\tCUSTOM\n\n}\n```\n\n<br />我们可以这样来匹配，来指定不同的匹配规则：<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = \"com.ldc\",includeFilters = {\n                //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n                //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n\n                // FilterType.ANNOTATION 按照注解来进行匹配\n                // FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配\n                @Filter(type = FilterType.ANNOTATION, classes = {Controller.class}),\n                //按照给定的类型来进行匹配\n                @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {BookService.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />bookService<br />person\n\n\n<br />bookService 组件又重新的被 IOC 容器给管理了；<br />\n<br />下面的这两种是我们最常用的匹配规则：<br />\n\n> FilterType.ANNOTATION 按照注解来进行匹配<br />FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配\n\n\n---\n\n我们还可以来写上一个 `FilterType.ASPECTJ`表达式来进行匹配，这个不常用；<br />我们也可以按照正则表达式`FilterType.REGEX`的方式来进行匹配：\n\n---\n\n我们来说说最后一种：自定义匹配规则`FilterType.CUSTOM`<br />\n<br />我们可以自己来写一个匹配规则的类：MyTypeFilter，这个类要实现 TypeFilter 这个接口<br />\n\n```java\npublic class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(\"通过自定义的匹配规则--->\"+className);\n        return false;\n    }\n}\n```\n\n<br />这个时候，我们就可以这样来用了：使用`FilterType.CUSTOM`<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = \"com.ldc\",includeFilters = {\n                //自定义匹配的规则\n                @Filter(type = FilterType.CUSTOM, classes = {MyTypeFilter.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n现在的测试结果如下:<br />\n\n> 通过自定义的匹配规则—>com.ldc.test.IOCTest<br />通过自定义的匹配规则—>com.ldc.bean.Person<br />通过自定义的匹配规则—>com.ldc.config.MyTypeFilter<br />通过自定义的匹配规则—>com.ldc.controller.BookController<br />通过自定义的匹配规则—>com.ldc.dao.BookDao<br />通过自定义的匹配规则—>com.ldc.MainTest<br />通过自定义的匹配规则—>com.ldc.service.BookService<br />org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />person\n\n\n---\n\n由于，我的自定义的规则类里面返回的是 false，所有一个都没有匹配到；<br />我们可以这样来修改一下，让 clsssName 里面包含 “er” 的组件给匹配到：<br />\n\n```java\npublic class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(\"通过自定义的匹配规则--->\"+className);\n\n        if (className.contains(\"er\")) {\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n\n> 通过自定义的匹配规则—>com.ldc.test.IOCTest<br />通过自定义的匹配规则—>com.ldc.bean.Person<br />通过自定义的匹配规则—>com.ldc.config.MyTypeFilter<br />通过自定义的匹配规则—>com.ldc.controller.BookController<br />通过自定义的匹配规则—>com.ldc.dao.BookDao<br />通过自定义的匹配规则—>com.ldc.MainTest<br />通过自定义的匹配规则—>com.ldc.service.BookService<br />org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />person<br />myTypeFilter<br />bookController<br />bookService\n\n\n<br />这个时候，包含 “er” 的组件就给添加到了 IOC 容器中了；只要在包扫描里面的包里面的每一个类都会进入到这个自定义的匹配规则进行匹配；\n\n---\n\n<a name=\"fd2a4202\"></a>\n# 4 组件注册 -`@Scope`-设置组件[作用域](https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020)\n\n<br />首先有一个配置类：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n\n    //默认是单实例的\n    @Bean(\"person\")\n    public Person person() {\n        return new Person();\n    }\n\n}\n```\n\n---\n\n测试方法：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n        Person person2 = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person1==person2);\n    }\n```\n\n<br />测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig2<br />person<br />true\n\n\n<br />说明这个 bean 的实例是单例的；\n\n---\n\n我们可以用`@Scope`这个注解来指定作用域的范围：这个就相当于在 xml 文件中配置的`<bean>`标签里面指定[scope](https://so.csdn.net/so/search?q=scope&spm=1001.2101.3001.7020)\\=“prototype” 属性；<br />\n\n```java\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Scope {\n\n\t/**\n\t * Alias for {@link #scopeName}.\n\t * @see #scopeName\n\t */\n\t@AliasFor(\"scopeName\")\n\tString value() default \"\";\n\n\t/**\n\t * Specifies the name of the scope to use for the annotated component/bean.\n\t * <p>Defaults to an empty string ({@code \"\"}) which implies\n\t * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}.\n\t * @since 4.2\n\t * @see ConfigurableBeanFactory#SCOPE_PROTOTYPE\n\t * @see ConfigurableBeanFactory#SCOPE_SINGLETON\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n\t * @see #value\n\t */\n\t@AliasFor(\"value\")\n\tString scopeName() default \"\";\n\n\t/**\n\t * Specifies whether a component should be configured as a scoped proxy\n\t * and if so, whether the proxy should be interface-based or subclass-based.\n\t * <p>Defaults to {@link ScopedProxyMode#DEFAULT}, which typically indicates\n\t * that no scoped proxy should be created unless a different default\n\t * has been configured at the component-scan instruction level.\n\t * <p>Analogous to {@code <aop:scoped-proxy/>} support in Spring XML.\n\t * @see ScopedProxyMode\n\t */\n\tScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;\n\n}\n```\n\n<br />从源码的注释上，我们可以知道 scopeName 可以取下面这些值：**前两个用的比较多，我们就来看看前面两个可以取的值**<br />\n\n> ConfigurableBeanFactory#SCOPE_PROTOTYPE<br />ConfigurableBeanFactory#SCOPE_SINGLETON<br />org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST<br />org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n\n\n<br />我们可以点到 ConfigurableBeanFactory 接口去看一下：<br />\n\n```java\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {\n    String SCOPE_SINGLETON = \"singleton\";\n    String SCOPE_PROTOTYPE = \"prototype\";\n\n    void setParentBeanFactory(BeanFactory var1) throws IllegalStateException;\n\n    void setBeanClassLoader(ClassLoader var1);\n\n    ClassLoader getBeanClassLoader();\n\n    void setTempClassLoader(ClassLoader var1);\n\n    ClassLoader getTempClassLoader();\n\n    void setCacheBeanMetadata(boolean var1);\n\n    boolean isCacheBeanMetadata();\n\n    void setBeanExpressionResolver(BeanExpressionResolver var1);\n\n    BeanExpressionResolver getBeanExpressionResolver();\n\n    void setConversionService(ConversionService var1);\n\n    ConversionService getConversionService();\n\n    void addPropertyEditorRegistrar(PropertyEditorRegistrar var1);\n\n    void registerCustomEditor(Class<?> var1, Class<? extends PropertyEditor> var2);\n\n    void copyRegisteredEditorsTo(PropertyEditorRegistry var1);\n\n    void setTypeConverter(TypeConverter var1);\n\n    TypeConverter getTypeConverter();\n\n    void addEmbeddedValueResolver(StringValueResolver var1);\n\n    boolean hasEmbeddedValueResolver();\n\n    String resolveEmbeddedValue(String var1);\n\n    void addBeanPostProcessor(BeanPostProcessor var1);\n\n    int getBeanPostProcessorCount();\n\n    void registerScope(String var1, Scope var2);\n\n    String[] getRegisteredScopeNames();\n\n    Scope getRegisteredScope(String var1);\n\n    AccessControlContext getAccessControlContext();\n\n    void copyConfigurationFrom(ConfigurableBeanFactory var1);\n\n    void registerAlias(String var1, String var2) throws BeanDefinitionStoreException;\n\n    void resolveAliases(StringValueResolver var1);\n\n    BeanDefinition getMergedBeanDefinition(String var1) throws NoSuchBeanDefinitionException;\n\n    boolean isFactoryBean(String var1) throws NoSuchBeanDefinitionException;\n\n    void setCurrentlyInCreation(String var1, boolean var2);\n\n    boolean isCurrentlyInCreation(String var1);\n\n    void registerDependentBean(String var1, String var2);\n\n    String[] getDependentBeans(String var1);\n\n    String[] getDependenciesForBean(String var1);\n\n    void destroyBean(String var1, Object var2);\n\n    void destroyScopedBean(String var1);\n\n    void destroySingletons();\n}\n```\n\n<br />我们来指定一个多实例的：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n    //singleton:单实例的\n    //prototype:多实例的\n    //request:同一次请求创建一个实例\n    //session:同一个session创建的一个实例\n    @Scope(\"prototype\")\n    //默认是单实例的\n    @Bean(\"person\")\n    public Person person() {\n        return new Person();\n    }\n\n}\n```\n\n<br />现在，我们再来测试一次：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n        Person person2 = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person1==person2);\n    }\n```\n\n<br />这个时候的测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig2<br />person<br />false\n\n\n<br />这个时候，bean 的实例就多实例的，每调用一次 getBean() 方法就会创建一个实例；\n\n---\n\n我们来看看当 bean 的作用域为单例的时候，它在 IOC 容器中是何时创建的：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n    \n    @Scope\n    @Bean(\"person\")\n    public Person person() {\n        System.out.println(\"给IOC容器中添加Person...\");\n        return new Person();\n    }\n\n}\n```\n\n<br />首先，我们先启动 IOC 容器，但是不调用 getBean 方法来获取 Person 实例：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }\n```\n\n<br />测试结果如下：<br />\n\n> 给 IOC 容器中添加 Person…\n\n\n<br />这个时候，我们就可以发现，当作用域为单例的时候，IOC 容器在启动的时候，就会将容器中所有作用域为单例的 bean 的实例给创建出来；以后的每次获取，就直接从 IOC 容器中来获取，相当于是从 map.get() 的一个过程；\n\n---\n\n然而，当我们的 bean 的作用域改成多实例的时候，我们再看看结果：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n\n    @Scope(\"prototype\")\n    @Bean(\"person\")\n    public Person person() {\n        System.out.println(\"给IOC容器中添加Person...\");\n        return new Person();\n    }\n\n}\n```\n\n<br />当我们再运行的时候：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }\n```\n\n<br />我们可以发现，控制台没有任何的输出结果；在 IOC 容器创建的时候，没有去创建这个作用域为多实例的 bean；<br />\n<br />这个时候，我们来调用 getBean() 方法来获取一下：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(\"IOC容器创建完成...\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n    }\n```\n\n<br />这个时候，控制台打印了：<br />\n\n> IOC 容器创建完成…<br />给 IOC 容器中添加 Person…\n\n\n<br />同时， 如果我多次获取：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(\"IOC容器创建完成...\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n    }\n```\n\n<br />测试结果如下：<br />\n\n> IOC 容器创建完成…<br />给 IOC 容器中添加 Person…<br />给 IOC 容器中添加 Person…\n\n\n<br />我们可以发现，我们用 getBean 方法获取几次，就创建几次 bean 的实例；<br />\n<br />也就是说当 bean 是作用域为多例的时候，IOC 容器启动的时候，就不会去创建 bean 的实例的，而是当我们调用 getBean() 获取的时候去创建 bean 的实例；而且每次调用的时候，都会创建 bean 的实例；\n",
    "body_draft": "\n\n<a name=\"uKqFE\"></a>\n# 0 简介 \n> 当我们还在使用 Spring、[SpringMVC](https://so.csdn.net/so/search?q=SpringMVC&spm=1001.2101.3001.7020)、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springboot 和 SpringCloud 里面会使用到大量的注解来进行配置；当我们熟练掌握了 Spring 的注解驱动，那当我们在学习 Springboot 和 SpringCloud 框架的时候，那将会更加的轻松自如；让我们一起来开启 Spring 注解驱动开发的学习之旅吧！\n\n\n\n<a name=\"81f533a5\"></a>\n# 1 组件注册 -`@Configuration`&`@Bean`给容器中注册组件\n\n<br />创建一个 Maven 项目：spring-annotation<br />导入 spring-context jar 包 – 这个就是 Spring 核心环境所有依赖的 jar 包<br />[Maven 仓库中的 spring-context](https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE)\n\n---\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>com.ldc</groupId>\n    <artifactId>spring-annotation</artifactId>\n    <version>1.0-SNAPSHOT</version>\n\n    <dependencies>\n        <!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>4.3.12.RELEASE</version>\n        </dependency>\n    </dependencies>\n\n</project>\n```\n\n---\n\n- **xml 文件配置的方式**<br />先按照我们以前配置的方式来使用 Spring：<br />首先有一个 Person 类：\n\n\n\n```java\npublic class Person {\n    private String name;\n    private Integer age;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n```\n\n<br />我们再写上一个 Spring 的 xml 配置文件：<br />\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\t   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\t   xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n\t<bean id=\"person\" class=\"com.ldc.bean.Person\">\n\t\t<property name=\"age\" value=\"18\"></property>\n\t\t<property name=\"name\" value=\"张三\"></property>\n\t</bean>\n</beans>\n```\n\n<br />测试类来测试：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"beans.xml\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person);\n    }\n}\n```\n\n<br />输出结果为：<br />\n\n> Person{name=‘张三’, age=18}\n\n\n---\n\n- **注解的方式**：\n\n\n<br />首先我们先写一个配置类：等同于 xml 配置文件<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean\n    public Person person() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />现在，我们来测试一下：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n    }\n}\n```\n\n<br />测试结果如下：<br />\n\n> Person{name=‘lisi’, age=20}\n\n\n---\n\n我们也可以通过 ApplicationContext 的一些方法来获取容器里面 bean 的一些信息，比如我们可以获取 Person 这个 bean 在 IOC 容器里面的名字，也是相当于是 xml 配置文件里面标签里面的 id 属性；<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n<br />测试结果如下：<br />\n\n> Person{name=‘lisi’, age=20}<br />person\n\n\n---\n\n**Spring 注解的方式默认是以配置的方法名来作为这个 bean 的默认 id，如果我们不想要方法名来作为 bean 的 id，我们可以在**`**@Bean**`**这个注解的 value 属性来进行指定：**<br />\n\n```java\n@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们再来运行这个测试类：<br />\n\n```java\npublic class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}\n```\n\n<br />那么现在的测试结果如下：bean 在 IOC 容器的名字就是 [@Bean ](/Bean ) 这个注解的 value 属性的值，而不是默认的 id 是方法名 person01 <br />\n\n> Person{name=‘lisi’, age=20}<br />person\n\n\n\n<a name=\"de67f166\"></a>\n# 2 组件注册 -`@ComponentScan`-自动扫描组件 & 指定扫描规则\n\n<br />在 xml 文件配置的方式，我们可以这样来进行配置：<br />\n\n```xml\n    <!-- 包扫描、只要标注了@Controller、@Service、@Repository，@Component -->\n    <context:component-scan base-package=\"com.ldc\"/>\n```\n\n---\n\n以前是在 xml 配置文件里面写包扫描，现在我们可以在配置类里面写包扫描：<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = \"com.ldc\")//相当于是xml配置文件里面的<context:component-scan base-package=\"com.ldc\"/>\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n我们创建 BookController、BookService、BookDao 这几个类，分别添加了`@Controller`、`@Service`、`@Repository`注解：<br />\n\n```java\n@Controller\npublic class BookController {\n}\n```\n\n\n```java\n@Service\npublic class BookService {\n}\n```\n\n\n```java\n@Repository\npublic class BookDao {\n}\n```\n\n<br />我们可以引入 junit 的 jar 包来进行测试：<br />\n\n```xml\n    <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>4.12</version>\n        <scope>test</scope>\n    </dependency>\n```\n\n<br />我们来进行单元测试：<br />\n\n```java\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n```\n\n<br />测试结果如下：除开 IOC 容器自己要装配的一些组件外，还有是我们自己装配的组件<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />bookDao<br />bookService<br />person\n\n\n<br />从上面的测试结果我们可以发现主配置类 MainConfig 也是 IOC 容器里面的组件，也被纳入了 IOC 容器的管理：<br />\n\n```java\n/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = \"com.ldc\")//相当于是xml配置文件里面的<context:component-scan base-package=\"com.ldc\"/>\npublic class MainConfig {\n\n    //相当于xml配置文件中的<bean>标签，告诉容器注册一个bean\n    //之前xml文件中<bean>标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中<bean>标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = \"person\")//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们从`@Configuration` 这个注解点进去就可以发现这个注解上也标注了 `@Component` 的这个注解，也纳入到 IOC 容器中作为一个组件：<br />\n\n```java\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration {\n\n\t/**\n\t * Explicitly specify the name of the Spring bean definition associated\n\t * with this Configuration class. If left unspecified (the common case),\n\t * a bean name will be automatically generated.\n\t * <p>The custom name applies only if the Configuration class is picked up via\n\t * component scanning or supplied directly to a {@link AnnotationConfigApplicationContext}.\n\t * If the Configuration class is registered as a traditional XML bean definition,\n\t * the name/id of the bean element will take precedence.\n\t * @return the specified bean name, if any\n\t * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator\n\t */\n\tString value() default \"\";\n\n}\n```\n\n---\n\n我们在 `@ComponentScan` 这个注解上，也是可以指定要排除哪些包或者是只包含哪些包来进行管理：里面传是一个 Filter[]数组<br />![](https://img-blog.csdnimg.cn/20190110194446276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=j9Wtt&originHeight=529&originWidth=1100&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />\n<br />我们从这个 excludeFilters 方法点过去，就到了`@Filter`这个注解：<br />\n\n```java\n\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({})\n\t@interface Filter {\n\n\t\t/**\n\t\t * The type of filter to use.\n\t\t * <p>Default is {@link FilterType#ANNOTATION}.\n\t\t * @see #classes\n\t\t * @see #pattern\n\t\t */\n\t\t//这个是要排除的规则：是按注解来进行排除还是按照类来进行排除还是按照正则表达式来来进行排除\n\t\tFilterType type() default FilterType.ANNOTATION;\n\n\t\t/**\n\t\t * Alias for {@link #classes}.\n\t\t * @see #classes\n\t\t */\n\t\t@AliasFor(\"classes\")\n\t\tClass<?>[] value() default {};\n\n\t\t/**\n\t\t * The class or classes to use as the filter.\n\t\t * <p>The following table explains how the classes will be interpreted\n\t\t * based on the configured value of the {@link #type} attribute.\n\t\t * <table border=\"1\">\n\t\t * <tr><th>{@code FilterType}</th><th>Class Interpreted As</th></tr>\n\t\t * <tr><td>{@link FilterType#ANNOTATION ANNOTATION}</td>\n\t\t * <td>the annotation itself</td></tr>\n\t\t * <tr><td>{@link FilterType#ASSIGNABLE_TYPE ASSIGNABLE_TYPE}</td>\n\t\t * <td>the type that detected components should be assignable to</td></tr>\n\t\t * <tr><td>{@link FilterType#CUSTOM CUSTOM}</td>\n\t\t * <td>an implementation of {@link TypeFilter}</td></tr>\n\t\t * </table>\n\t\t * <p>When multiple classes are specified, <em>OR</em> logic is applied\n\t\t * &mdash; for example, \"include types annotated with {@code @Foo} OR {@code @Bar}\".\n\t\t * <p>Custom {@link TypeFilter TypeFilters} may optionally implement any of the\n\t\t * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and\n\t\t * their respective methods will be called prior to {@link TypeFilter#match match}:\n\t\t * <ul>\n\t\t * <li>{@link org.springframework.context.EnvironmentAware EnvironmentAware}</li>\n\t\t * <li>{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}\n\t\t * <li>{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}\n\t\t * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}\n\t\t * </ul>\n\t\t * <p>Specifying zero classes is permitted but will have no effect on component\n\t\t * scanning.\n\t\t * @since 4.2\n\t\t * @see #value\n\t\t * @see #type\n\t\t */\n\t\t@AliasFor(\"value\")\n\t\tClass<?>[] classes() default {};\n\n\t\t/**\n\t\t * The pattern (or patterns) to use for the filter, as an alternative\n\t\t * to specifying a Class {@link #value}.\n\t\t * <p>If {@link #type} is set to {@link FilterType#ASPECTJ ASPECTJ},\n\t\t * this is an AspectJ type pattern expression. If {@link #type} is\n\t\t * set to {@link FilterType#REGEX REGEX}, this is a regex pattern\n\t\t * for the fully-qualified class names to match.\n\t\t * @see #type\n\t\t * @see #classes\n\t\t */\n\t\tString[] pattern() default {};\n\n\t}\n```\n\n---\n\n这个时候，我们就可以这样来配置：<br />\n\n```java\n@Configuration\n@ComponentScan(value = \"com.ldc\",excludeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class,Service.class}表示的是标有这些注解的类给排除掉\n        @Filter(type = FilterType.ANNOTATION,classes = {Controller.class,Service.class})\n})\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />我们再来测试一下：<br />\n\n```java\npublic class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}\n```\n\n<br />这个时候的测试结果如下：这个时候，bookService、bookController 这两个组件就已经被排除掉了，不再被 IOC 容器给管理：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookDao<br />person\n\n\n---\n\n我们也可以来配置**includeFilters**：指定在扫描的时候，只需要包含哪些组件<br />在用 xml 文件配置的方式来进行配置的时候，还要禁用掉默认的配置规则，只包含哪些组件的配置才能生效<br />\n\n> <context:[component](https://so.csdn.net/so/search?q=component&spm=1001.2101.3001.7020)-scan base-package=“com.ldc” use-default-filters=“false”/>\n\n\n<br />![](https://img-blog.csdnimg.cn/20190110203227264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=qJpvy&originHeight=397&originWidth=1158&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n---\n\n这个时候，我们就可以这样来写：<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = \"com.ldc\",includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />测试类：<br />\n\n```java\npublic class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}\n```\n\n<br />这个时候，测试结果如下：这个时候是按照标有注解来进行包含的，现在就只有一个 bookController 被纳入到 IOC 容器进行管理<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />person\n\n\n---\n\n`@ComponentScan`这个注解是可以重复定义的：来指定不同的扫描策略<br />![](https://img-blog.csdnimg.cn/2019011020395423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70#crop=0&crop=0&crop=1&crop=1&id=IAyjq&originHeight=696&originWidth=1042&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n---\n\n我们还可以用 `@ComponentScans`来定义多个扫描规则：里面是`@ComponentScan`规则的数组<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n    @ComponentScan(value = \"com.ldc\",includeFilters = {\n            //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n            //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n            @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n    },useDefaultFilters = false),\n    @ComponentScan(value = \"com.ldc\")\n})\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n也可以直接这样来配置多个`@ComponentScan`注解：**但是这样写的话，就必须要 java8 及以上的支持**<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = \"com.ldc\",includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\n\n@ComponentScan(value = \"com.ldc\")\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n<a name=\"3acd5314\"></a>\n# 3 组件注册 - 自定义 TypeFilter 指定过滤规则\n\n<br />我们可以来看看有哪几种过滤规则：<br />\n\n```java\npublic enum FilterType {\n\n\t/**\n\t * Filter candidates marked with a given annotation.\n\t * @see org.springframework.core.type.filter.AnnotationTypeFilter\n\t */\n\tANNOTATION,\n\n\t/**\n\t * Filter candidates assignable to a given type.\n\t * @see org.springframework.core.type.filter.AssignableTypeFilter\n\t */\n\tASSIGNABLE_TYPE,\n\n\t/**\n\t * Filter candidates matching a given AspectJ type pattern expression.\n\t * @see org.springframework.core.type.filter.AspectJTypeFilter\n\t */\n\tASPECTJ,\n\n\t/**\n\t * Filter candidates matching a given regex pattern.\n\t * @see org.springframework.core.type.filter.RegexPatternTypeFilter\n\t */\n\tREGEX,\n\n\t/** Filter candidates using a given custom\n\t * {@link org.springframework.core.type.filter.TypeFilter} implementation.\n\t */\n\tCUSTOM\n\n}\n```\n\n<br />我们可以这样来匹配，来指定不同的匹配规则：<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = \"com.ldc\",includeFilters = {\n                //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n                //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n\n                // FilterType.ANNOTATION 按照注解来进行匹配\n                // FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配\n                @Filter(type = FilterType.ANNOTATION, classes = {Controller.class}),\n                //按照给定的类型来进行匹配\n                @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {BookService.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n<br />测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />bookController<br />bookService<br />person\n\n\n<br />bookService 组件又重新的被 IOC 容器给管理了；<br />\n<br />下面的这两种是我们最常用的匹配规则：<br />\n\n> FilterType.ANNOTATION 按照注解来进行匹配<br />FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配\n\n\n---\n\n我们还可以来写上一个 `FilterType.ASPECTJ`表达式来进行匹配，这个不常用；<br />我们也可以按照正则表达式`FilterType.REGEX`的方式来进行匹配：\n\n---\n\n我们来说说最后一种：自定义匹配规则`FilterType.CUSTOM`<br />\n<br />我们可以自己来写一个匹配规则的类：MyTypeFilter，这个类要实现 TypeFilter 这个接口<br />\n\n```java\npublic class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(\"通过自定义的匹配规则--->\"+className);\n        return false;\n    }\n}\n```\n\n<br />这个时候，我们就可以这样来用了：使用`FilterType.CUSTOM`<br />\n\n```java\n@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = \"com.ldc\",includeFilters = {\n                //自定义匹配的规则\n                @Filter(type = FilterType.CUSTOM, classes = {MyTypeFilter.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = \"person\")\n    public Person person01() {\n        return new Person(\"lisi\",20);\n    }\n\n}\n```\n\n---\n\n现在的测试结果如下:<br />\n\n> 通过自定义的匹配规则—>com.ldc.test.IOCTest<br />通过自定义的匹配规则—>com.ldc.bean.Person<br />通过自定义的匹配规则—>com.ldc.config.MyTypeFilter<br />通过自定义的匹配规则—>com.ldc.controller.BookController<br />通过自定义的匹配规则—>com.ldc.dao.BookDao<br />通过自定义的匹配规则—>com.ldc.MainTest<br />通过自定义的匹配规则—>com.ldc.service.BookService<br />org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />person\n\n\n---\n\n由于，我的自定义的规则类里面返回的是 false，所有一个都没有匹配到；<br />我们可以这样来修改一下，让 clsssName 里面包含 “er” 的组件给匹配到：<br />\n\n```java\npublic class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(\"通过自定义的匹配规则--->\"+className);\n\n        if (className.contains(\"er\")) {\n            return true;\n        }\n        return false;\n    }\n}\n```\n\n\n> 通过自定义的匹配规则—>com.ldc.test.IOCTest<br />通过自定义的匹配规则—>com.ldc.bean.Person<br />通过自定义的匹配规则—>com.ldc.config.MyTypeFilter<br />通过自定义的匹配规则—>com.ldc.controller.BookController<br />通过自定义的匹配规则—>com.ldc.dao.BookDao<br />通过自定义的匹配规则—>com.ldc.MainTest<br />通过自定义的匹配规则—>com.ldc.service.BookService<br />org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig<br />person<br />myTypeFilter<br />bookController<br />bookService\n\n\n<br />这个时候，包含 “er” 的组件就给添加到了 IOC 容器中了；只要在包扫描里面的包里面的每一个类都会进入到这个自定义的匹配规则进行匹配；\n\n---\n\n<a name=\"fd2a4202\"></a>\n# 4 组件注册 -`@Scope`-设置组件[作用域](https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&spm=1001.2101.3001.7020)\n\n<br />首先有一个配置类：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n\n    //默认是单实例的\n    @Bean(\"person\")\n    public Person person() {\n        return new Person();\n    }\n\n}\n```\n\n---\n\n测试方法：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n        Person person2 = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person1==person2);\n    }\n```\n\n<br />测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig2<br />person<br />true\n\n\n<br />说明这个 bean 的实例是单例的；\n\n---\n\n我们可以用`@Scope`这个注解来指定作用域的范围：这个就相当于在 xml 文件中配置的`<bean>`标签里面指定[scope](https://so.csdn.net/so/search?q=scope&spm=1001.2101.3001.7020)\\=“prototype” 属性；<br />\n\n```java\n@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Scope {\n\n\t/**\n\t * Alias for {@link #scopeName}.\n\t * @see #scopeName\n\t */\n\t@AliasFor(\"scopeName\")\n\tString value() default \"\";\n\n\t/**\n\t * Specifies the name of the scope to use for the annotated component/bean.\n\t * <p>Defaults to an empty string ({@code \"\"}) which implies\n\t * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}.\n\t * @since 4.2\n\t * @see ConfigurableBeanFactory#SCOPE_PROTOTYPE\n\t * @see ConfigurableBeanFactory#SCOPE_SINGLETON\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n\t * @see #value\n\t */\n\t@AliasFor(\"value\")\n\tString scopeName() default \"\";\n\n\t/**\n\t * Specifies whether a component should be configured as a scoped proxy\n\t * and if so, whether the proxy should be interface-based or subclass-based.\n\t * <p>Defaults to {@link ScopedProxyMode#DEFAULT}, which typically indicates\n\t * that no scoped proxy should be created unless a different default\n\t * has been configured at the component-scan instruction level.\n\t * <p>Analogous to {@code <aop:scoped-proxy/>} support in Spring XML.\n\t * @see ScopedProxyMode\n\t */\n\tScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;\n\n}\n```\n\n<br />从源码的注释上，我们可以知道 scopeName 可以取下面这些值：**前两个用的比较多，我们就来看看前面两个可以取的值**<br />\n\n> ConfigurableBeanFactory#SCOPE_PROTOTYPE<br />ConfigurableBeanFactory#SCOPE_SINGLETON<br />org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST<br />org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n\n\n<br />我们可以点到 ConfigurableBeanFactory 接口去看一下：<br />\n\n```java\npublic interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {\n    String SCOPE_SINGLETON = \"singleton\";\n    String SCOPE_PROTOTYPE = \"prototype\";\n\n    void setParentBeanFactory(BeanFactory var1) throws IllegalStateException;\n\n    void setBeanClassLoader(ClassLoader var1);\n\n    ClassLoader getBeanClassLoader();\n\n    void setTempClassLoader(ClassLoader var1);\n\n    ClassLoader getTempClassLoader();\n\n    void setCacheBeanMetadata(boolean var1);\n\n    boolean isCacheBeanMetadata();\n\n    void setBeanExpressionResolver(BeanExpressionResolver var1);\n\n    BeanExpressionResolver getBeanExpressionResolver();\n\n    void setConversionService(ConversionService var1);\n\n    ConversionService getConversionService();\n\n    void addPropertyEditorRegistrar(PropertyEditorRegistrar var1);\n\n    void registerCustomEditor(Class<?> var1, Class<? extends PropertyEditor> var2);\n\n    void copyRegisteredEditorsTo(PropertyEditorRegistry var1);\n\n    void setTypeConverter(TypeConverter var1);\n\n    TypeConverter getTypeConverter();\n\n    void addEmbeddedValueResolver(StringValueResolver var1);\n\n    boolean hasEmbeddedValueResolver();\n\n    String resolveEmbeddedValue(String var1);\n\n    void addBeanPostProcessor(BeanPostProcessor var1);\n\n    int getBeanPostProcessorCount();\n\n    void registerScope(String var1, Scope var2);\n\n    String[] getRegisteredScopeNames();\n\n    Scope getRegisteredScope(String var1);\n\n    AccessControlContext getAccessControlContext();\n\n    void copyConfigurationFrom(ConfigurableBeanFactory var1);\n\n    void registerAlias(String var1, String var2) throws BeanDefinitionStoreException;\n\n    void resolveAliases(StringValueResolver var1);\n\n    BeanDefinition getMergedBeanDefinition(String var1) throws NoSuchBeanDefinitionException;\n\n    boolean isFactoryBean(String var1) throws NoSuchBeanDefinitionException;\n\n    void setCurrentlyInCreation(String var1, boolean var2);\n\n    boolean isCurrentlyInCreation(String var1);\n\n    void registerDependentBean(String var1, String var2);\n\n    String[] getDependentBeans(String var1);\n\n    String[] getDependenciesForBean(String var1);\n\n    void destroyBean(String var1, Object var2);\n\n    void destroyScopedBean(String var1);\n\n    void destroySingletons();\n}\n```\n\n<br />我们来指定一个多实例的：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n    //singleton:单实例的\n    //prototype:多实例的\n    //request:同一次请求创建一个实例\n    //session:同一个session创建的一个实例\n    @Scope(\"prototype\")\n    //默认是单实例的\n    @Bean(\"person\")\n    public Person person() {\n        return new Person();\n    }\n\n}\n```\n\n<br />现在，我们再来测试一次：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n        Person person2 = (Person) applicationContext.getBean(\"person\");\n        System.out.println(person1==person2);\n    }\n```\n\n<br />这个时候的测试结果如下：<br />\n\n> org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br />org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br />org.springframework.context.annotation.internalRequiredAnnotationProcessor<br />org.springframework.context.annotation.internalCommonAnnotationProcessor<br />org.springframework.context.event.internalEventListenerProcessor<br />org.springframework.context.event.internalEventListenerFactory<br />mainConfig2<br />person<br />false\n\n\n<br />这个时候，bean 的实例就多实例的，每调用一次 getBean() 方法就会创建一个实例；\n\n---\n\n我们来看看当 bean 的作用域为单例的时候，它在 IOC 容器中是何时创建的：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n    \n    @Scope\n    @Bean(\"person\")\n    public Person person() {\n        System.out.println(\"给IOC容器中添加Person...\");\n        return new Person();\n    }\n\n}\n```\n\n<br />首先，我们先启动 IOC 容器，但是不调用 getBean 方法来获取 Person 实例：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }\n```\n\n<br />测试结果如下：<br />\n\n> 给 IOC 容器中添加 Person…\n\n\n<br />这个时候，我们就可以发现，当作用域为单例的时候，IOC 容器在启动的时候，就会将容器中所有作用域为单例的 bean 的实例给创建出来；以后的每次获取，就直接从 IOC 容器中来获取，相当于是从 map.get() 的一个过程；\n\n---\n\n然而，当我们的 bean 的作用域改成多实例的时候，我们再看看结果：<br />\n\n```java\n@Configuration\npublic class MainConfig2 {\n\n    @Scope(\"prototype\")\n    @Bean(\"person\")\n    public Person person() {\n        System.out.println(\"给IOC容器中添加Person...\");\n        return new Person();\n    }\n\n}\n```\n\n<br />当我们再运行的时候：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }\n```\n\n<br />我们可以发现，控制台没有任何的输出结果；在 IOC 容器创建的时候，没有去创建这个作用域为多实例的 bean；<br />\n<br />这个时候，我们来调用 getBean() 方法来获取一下：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(\"IOC容器创建完成...\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n    }\n```\n\n<br />这个时候，控制台打印了：<br />\n\n> IOC 容器创建完成…<br />给 IOC 容器中添加 Person…\n\n\n<br />同时， 如果我多次获取：<br />\n\n```java\n    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(\"IOC容器创建完成...\");\n        Person person = (Person) applicationContext.getBean(\"person\");\n        Person person1 = (Person) applicationContext.getBean(\"person\");\n    }\n```\n\n<br />测试结果如下：<br />\n\n> IOC 容器创建完成…<br />给 IOC 容器中添加 Person…<br />给 IOC 容器中添加 Person…\n\n\n<br />我们可以发现，我们用 getBean 方法获取几次，就创建几次 bean 的实例；<br />\n<br />也就是说当 bean 是作用域为多例的时候，IOC 容器启动的时候，就不会去创建 bean 的实例的，而是当我们调用 getBean() 获取的时候去创建 bean 的实例；而且每次调用的时候，都会创建 bean 的实例；\n",
    "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u70774c0d\" class=\"ne-p\"><br></p><h1 id=\"uKqFE\"><span class=\"ne-text\">0 简介 </span></h1><div class=\"ne-quote\"><p id=\"u81d92179\" class=\"ne-p\"><span class=\"ne-text\">当我们还在使用 Spring、</span><a href=\"https://so.csdn.net/so/search?q=SpringMVC&amp;spm=1001.2101.3001.7020\" data-href=\"https://so.csdn.net/so/search?q=SpringMVC&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">SpringMVC</span></a><span class=\"ne-text\">、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springboot 和 SpringCloud 里面会使用到大量的注解来进行配置；当我们熟练掌握了 Spring 的注解驱动，那当我们在学习 Springboot 和 SpringCloud 框架的时候，那将会更加的轻松自如；让我们一起来开启 Spring 注解驱动开发的学习之旅吧！</span></p></div><p id=\"u80f295c5\" class=\"ne-p\"><br></p><h1 id=\"81f533a5\"><span class=\"ne-text\">1 组件注册 -</span><code class=\"ne-code\"><span class=\"ne-text\">@Configuration</span></code><span class=\"ne-text\">&amp;</span><code class=\"ne-code\"><span class=\"ne-text\">@Bean</span></code><span class=\"ne-text\">给容器中注册组件</span></h1><p id=\"u8870a13e\" class=\"ne-p\"><br></p><p id=\"u4cbc0339\" class=\"ne-p\"><span class=\"ne-text\">创建一个 Maven 项目：spring-annotation<br /></span><span class=\"ne-text\">导入 spring-context jar 包 – 这个就是 Spring 核心环境所有依赖的 jar 包<br /></span><a href=\"https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE\" data-href=\"https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Maven 仓库中的 spring-context</span></a></p><hr id=\"r8Tyv\" class=\"ne-hr\"><pre data-language=\"xml\" id=\"098ed72f\" class=\"ne-codeblock language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;\n         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.ldc&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-annotation&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;dependencies&gt;\n        &lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n            &lt;version&gt;4.3.12.RELEASE&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n&lt;/project&gt;</pre><hr id=\"ck1Q9\" class=\"ne-hr\"><ul class=\"ne-ul\"><li id=\"u4e4a3c8f\"><strong><span class=\"ne-text\">xml 文件配置的方式</span></strong><span class=\"ne-text\"><br /></span><span class=\"ne-text\">先按照我们以前配置的方式来使用 Spring：<br /></span><span class=\"ne-text\">首先有一个 Person 类：</span></li></ul><p id=\"u8ba324f7\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"e8eb6dee\" class=\"ne-codeblock language-java\">public class Person {\n    private String name;\n    private Integer age;\n\n    public Person() {\n    }\n\n    public Person(String name, Integer age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Integer getAge() {\n        return age;\n    }\n\n    public void setAge(Integer age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return &quot;Person{&quot; +\n                &quot;name='&quot; + name + '\\'' +\n                &quot;, age=&quot; + age +\n                '}';\n    }\n}</pre><p id=\"u2efd5432\" class=\"ne-p\"><br></p><p id=\"u677b0f02\" class=\"ne-p\"><span class=\"ne-text\">我们再写上一个 Spring 的 xml 配置文件：</span></p><p id=\"u6d32c19e\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"21dd67ee\" class=\"ne-codeblock language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;\n\t   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n\t   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;\n\n\t&lt;bean id=&quot;person&quot; class=&quot;com.ldc.bean.Person&quot;&gt;\n\t\t&lt;property name=&quot;age&quot; value=&quot;18&quot;&gt;&lt;/property&gt;\n\t\t&lt;property name=&quot;name&quot; value=&quot;张三&quot;&gt;&lt;/property&gt;\n\t&lt;/bean&gt;\n&lt;/beans&gt;</pre><p id=\"u3932e4a8\" class=\"ne-p\"><br></p><p id=\"u483210f5\" class=\"ne-p\"><span class=\"ne-text\">测试类来测试：</span></p><p id=\"ub3aa457c\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2cb7cc8e\" class=\"ne-codeblock language-java\">public class MainTest {\n    public static void main(String[]args){\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);\n        Person person = (Person) applicationContext.getBean(&quot;person&quot;);\n        System.out.println(person);\n    }\n}</pre><p id=\"u01f314cf\" class=\"ne-p\"><br></p><p id=\"u1106e450\" class=\"ne-p\"><span class=\"ne-text\">输出结果为：</span></p><p id=\"u630b117f\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u3ab76931\" class=\"ne-p\"><span class=\"ne-text\">Person{name=‘张三’, age=18}</span></p></div><hr id=\"bugNC\" class=\"ne-hr\"><ul class=\"ne-ul\"><li id=\"u64ed4c7a\"><strong><span class=\"ne-text\">注解的方式</span></strong><span class=\"ne-text\">：</span></li></ul><p id=\"u0e132c33\" class=\"ne-p\"><br></p><p id=\"u08eac971\" class=\"ne-p\"><span class=\"ne-text\">首先我们先写一个配置类：等同于 xml 配置文件</span></p><p id=\"ub2981432\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"ed81bcc1\" class=\"ne-codeblock language-java\">/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的&lt;bean&gt;标签，告诉容器注册一个bean\n    //之前xml文件中&lt;bean&gt;标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中&lt;bean&gt;标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean\n    public Person person() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"u3902e3fa\" class=\"ne-p\"><br></p><p id=\"u2b43f38f\" class=\"ne-p\"><span class=\"ne-text\">现在，我们来测试一下：</span></p><p id=\"u753074f4\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"7943a0cb\" class=\"ne-codeblock language-java\">public class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n    }\n}</pre><p id=\"u06b8473a\" class=\"ne-p\"><br></p><p id=\"ubd40d912\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"ub84321eb\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uf444fab7\" class=\"ne-p\"><span class=\"ne-text\">Person{name=‘lisi’, age=20}</span></p></div><hr id=\"E6DQN\" class=\"ne-hr\"><p id=\"ue5d8fbe3\" class=\"ne-p\"><span class=\"ne-text\">我们也可以通过 ApplicationContext 的一些方法来获取容器里面 bean 的一些信息，比如我们可以获取 Person 这个 bean 在 IOC 容器里面的名字，也是相当于是 xml 配置文件里面标签里面的 id 属性；</span></p><p id=\"uf719b308\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"dcafa1f3\" class=\"ne-codeblock language-java\">public class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}</pre><p id=\"ud7e45b0d\" class=\"ne-p\"><br></p><p id=\"u8f1b3d0d\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"u785b12fe\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ub0aa773b\" class=\"ne-p\"><span class=\"ne-text\">Person{name=‘lisi’, age=20}<br /></span><span class=\"ne-text\">person</span></p></div><hr id=\"d9EFe\" class=\"ne-hr\"><p id=\"u99975fdf\" class=\"ne-p\"><strong><span class=\"ne-text\">Spring 注解的方式默认是以配置的方法名来作为这个 bean 的默认 id，如果我们不想要方法名来作为 bean 的 id，我们可以在</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">@Bean</span></strong></code><strong><span class=\"ne-text\">这个注解的 value 属性来进行指定：</span></strong></p><p id=\"ue89a42da\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"f0a2f3cf\" class=\"ne-codeblock language-java\">@Configuration //告诉Spring这是一个配置类\npublic class MainConfig {\n\n    //相当于xml配置文件中的&lt;bean&gt;标签，告诉容器注册一个bean\n    //之前xml文件中&lt;bean&gt;标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中&lt;bean&gt;标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = &quot;person&quot;)//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"uecfe5b6e\" class=\"ne-p\"><br></p><p id=\"u2963fe11\" class=\"ne-p\"><span class=\"ne-text\">我们再来运行这个测试类：</span></p><p id=\"udf5baf65\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"dcafa1f3-1\" class=\"ne-codeblock language-java\">public class MainTest {\n    public static void main(String[]args){\n        /**\n         * 这里是new了一个AnnotationConfigApplicationContext对象，以前new的ClassPathXmlApplicationContext对象\n         * 的构造函数里面传的是配置文件的位置，而现在AnnotationConfigApplicationContext对象的构造函数里面传的是\n         * 配置类的类型\n         */\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        Person person = applicationContext.getBean(Person.class);\n        System.out.println(person);\n\n        //我们可以来获取bean的定义信息\n        String[] namesForType = applicationContext.getBeanNamesForType(Person.class);\n        for (String name : namesForType) {\n            System.out.println(name);\n        }\n    }\n}</pre><p id=\"u04064350\" class=\"ne-p\"><br></p><p id=\"u7fea4667\" class=\"ne-p\"><span class=\"ne-text\">那么现在的测试结果如下：bean 在 IOC 容器的名字就是 </span><a href=\"/Bean \" data-href=\"/Bean \" class=\"ne-link\"><span class=\"ne-text\">@Bean </span></a><span class=\"ne-text\"> 这个注解的 value 属性的值，而不是默认的 id 是方法名 person01 </span></p><p id=\"ub8d8ef78\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ue634645e\" class=\"ne-p\"><span class=\"ne-text\">Person{name=‘lisi’, age=20}<br /></span><span class=\"ne-text\">person</span></p></div><p id=\"ud157000a\" class=\"ne-p\"><br></p><h1 id=\"de67f166\"><span class=\"ne-text\">2 组件注册 -</span><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScan</span></code><span class=\"ne-text\">-自动扫描组件 &amp; 指定扫描规则</span></h1><p id=\"u81d28cbc\" class=\"ne-p\"><br></p><p id=\"uce63ccbf\" class=\"ne-p\"><span class=\"ne-text\">在 xml 文件配置的方式，我们可以这样来进行配置：</span></p><p id=\"ucfb3e7cb\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"0bcae339\" class=\"ne-codeblock language-xml\">    &lt;!-- 包扫描、只要标注了@Controller、@Service、@Repository，@Component --&gt;\n    &lt;context:component-scan base-package=&quot;com.ldc&quot;/&gt;</pre><hr id=\"r2PQn\" class=\"ne-hr\"><p id=\"ub7de522a\" class=\"ne-p\"><span class=\"ne-text\">以前是在 xml 配置文件里面写包扫描，现在我们可以在配置类里面写包扫描：</span></p><p id=\"uabb2569c\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9bcef1a7\" class=\"ne-codeblock language-java\">/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = &quot;com.ldc&quot;)//相当于是xml配置文件里面的&lt;context:component-scan base-package=&quot;com.ldc&quot;/&gt;\npublic class MainConfig {\n\n    //相当于xml配置文件中的&lt;bean&gt;标签，告诉容器注册一个bean\n    //之前xml文件中&lt;bean&gt;标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中&lt;bean&gt;标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = &quot;person&quot;)//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><hr id=\"KbAVS\" class=\"ne-hr\"><p id=\"u14eae0c5\" class=\"ne-p\"><span class=\"ne-text\">我们创建 BookController、BookService、BookDao 这几个类，分别添加了</span><code class=\"ne-code\"><span class=\"ne-text\">@Controller</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">@Service</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">@Repository</span></code><span class=\"ne-text\">注解：</span></p><p id=\"ud2be6297\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"f61a97bb\" class=\"ne-codeblock language-java\">@Controller\npublic class BookController {\n}</pre><p id=\"u7dde41a3\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"0317327a\" class=\"ne-codeblock language-java\">@Service\npublic class BookService {\n}</pre><p id=\"u184e8a6c\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"ef2e5025\" class=\"ne-codeblock language-java\">@Repository\npublic class BookDao {\n}</pre><p id=\"u84f63f2d\" class=\"ne-p\"><br></p><p id=\"u4c5a1354\" class=\"ne-p\"><span class=\"ne-text\">我们可以引入 junit 的 jar 包来进行测试：</span></p><p id=\"u3c79839d\" class=\"ne-p\"><br></p><pre data-language=\"xml\" id=\"d192603d\" class=\"ne-codeblock language-xml\">    &lt;dependency&gt;\n        &lt;groupId&gt;junit&lt;/groupId&gt;\n        &lt;artifactId&gt;junit&lt;/artifactId&gt;\n        &lt;version&gt;4.12&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;</pre><p id=\"u99b12471\" class=\"ne-p\"><br></p><p id=\"ufc999a6b\" class=\"ne-p\"><span class=\"ne-text\">我们来进行单元测试：</span></p><p id=\"uc3790a99\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"b4c8503e\" class=\"ne-codeblock language-java\">    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }</pre><p id=\"u7ccfcece\" class=\"ne-p\"><br></p><p id=\"ucbcd0b27\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：除开 IOC 容器自己要装配的一些组件外，还有是我们自己装配的组件</span></p><p id=\"u040263ea\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u4fb264b2\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">bookController<br /></span><span class=\"ne-text\">bookDao<br /></span><span class=\"ne-text\">bookService<br /></span><span class=\"ne-text\">person</span></p></div><p id=\"u845d4167\" class=\"ne-p\"><br></p><p id=\"u6fe37971\" class=\"ne-p\"><span class=\"ne-text\">从上面的测试结果我们可以发现主配置类 MainConfig 也是 IOC 容器里面的组件，也被纳入了 IOC 容器的管理：</span></p><p id=\"u7819819a\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9bcef1a7-1\" class=\"ne-codeblock language-java\">/**\n * @Description 配置类就等同以前的配置文件\n */\n@Configuration //告诉Spring这是一个配置类\n@ComponentScan(value = &quot;com.ldc&quot;)//相当于是xml配置文件里面的&lt;context:component-scan base-package=&quot;com.ldc&quot;/&gt;\npublic class MainConfig {\n\n    //相当于xml配置文件中的&lt;bean&gt;标签，告诉容器注册一个bean\n    //之前xml文件中&lt;bean&gt;标签有bean的class类型，那么现在注解方式的类型当然也就是返回值的类型\n    //之前xml文件中&lt;bean&gt;标签有bean的id，现在注解的方式默认用的是方法名来作为bean的id\n    @Bean(value = &quot;person&quot;)//通过这个value属性可以指定bean在IOC容器的id\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"ufb14efeb\" class=\"ne-p\"><br></p><p id=\"u7d23cc73\" class=\"ne-p\"><span class=\"ne-text\">我们从</span><code class=\"ne-code\"><span class=\"ne-text\">@Configuration</span></code><span class=\"ne-text\"> 这个注解点进去就可以发现这个注解上也标注了 </span><code class=\"ne-code\"><span class=\"ne-text\">@Component</span></code><span class=\"ne-text\"> 的这个注解，也纳入到 IOC 容器中作为一个组件：</span></p><p id=\"uc14a00c0\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"39dfc6d8\" class=\"ne-codeblock language-java\">@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component\npublic @interface Configuration {\n\n\t/**\n\t * Explicitly specify the name of the Spring bean definition associated\n\t * with this Configuration class. If left unspecified (the common case),\n\t * a bean name will be automatically generated.\n\t * &lt;p&gt;The custom name applies only if the Configuration class is picked up via\n\t * component scanning or supplied directly to a {@link AnnotationConfigApplicationContext}.\n\t * If the Configuration class is registered as a traditional XML bean definition,\n\t * the name/id of the bean element will take precedence.\n\t * @return the specified bean name, if any\n\t * @see org.springframework.beans.factory.support.DefaultBeanNameGenerator\n\t */\n\tString value() default &quot;&quot;;\n\n}</pre><hr id=\"cHmHM\" class=\"ne-hr\"><p id=\"ufc24c0b0\" class=\"ne-p\"><span class=\"ne-text\">我们在 </span><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScan</span></code><span class=\"ne-text\"> 这个注解上，也是可以指定要排除哪些包或者是只包含哪些包来进行管理：里面传是一个 Filter[]数组<br /></span><img src=\"https://img-blog.csdnimg.cn/20190110194446276.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70\" width=\"1100\" id=\"j9Wtt\" class=\"ne-image\"></p><p id=\"u10426e4a\" class=\"ne-p\"><br></p><p id=\"uf3d75f00\" class=\"ne-p\"><span class=\"ne-text\">我们从这个 excludeFilters 方法点过去，就到了</span><code class=\"ne-code\"><span class=\"ne-text\">@Filter</span></code><span class=\"ne-text\">这个注解：</span></p><p id=\"u1e427746\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"460661b6\" class=\"ne-codeblock language-java\">\t@Retention(RetentionPolicy.RUNTIME)\n\t@Target({})\n\t@interface Filter {\n\n\t\t/**\n\t\t * The type of filter to use.\n\t\t * &lt;p&gt;Default is {@link FilterType#ANNOTATION}.\n\t\t * @see #classes\n\t\t * @see #pattern\n\t\t */\n\t\t//这个是要排除的规则：是按注解来进行排除还是按照类来进行排除还是按照正则表达式来来进行排除\n\t\tFilterType type() default FilterType.ANNOTATION;\n\n\t\t/**\n\t\t * Alias for {@link #classes}.\n\t\t * @see #classes\n\t\t */\n\t\t@AliasFor(&quot;classes&quot;)\n\t\tClass&lt;?&gt;[] value() default {};\n\n\t\t/**\n\t\t * The class or classes to use as the filter.\n\t\t * &lt;p&gt;The following table explains how the classes will be interpreted\n\t\t * based on the configured value of the {@link #type} attribute.\n\t\t * &lt;table border=&quot;1&quot;&gt;\n\t\t * &lt;tr&gt;&lt;th&gt;{@code FilterType}&lt;/th&gt;&lt;th&gt;Class Interpreted As&lt;/th&gt;&lt;/tr&gt;\n\t\t * &lt;tr&gt;&lt;td&gt;{@link FilterType#ANNOTATION ANNOTATION}&lt;/td&gt;\n\t\t * &lt;td&gt;the annotation itself&lt;/td&gt;&lt;/tr&gt;\n\t\t * &lt;tr&gt;&lt;td&gt;{@link FilterType#ASSIGNABLE_TYPE ASSIGNABLE_TYPE}&lt;/td&gt;\n\t\t * &lt;td&gt;the type that detected components should be assignable to&lt;/td&gt;&lt;/tr&gt;\n\t\t * &lt;tr&gt;&lt;td&gt;{@link FilterType#CUSTOM CUSTOM}&lt;/td&gt;\n\t\t * &lt;td&gt;an implementation of {@link TypeFilter}&lt;/td&gt;&lt;/tr&gt;\n\t\t * &lt;/table&gt;\n\t\t * &lt;p&gt;When multiple classes are specified, &lt;em&gt;OR&lt;/em&gt; logic is applied\n\t\t * &amp;mdash; for example, &quot;include types annotated with {@code @Foo} OR {@code @Bar}&quot;.\n\t\t * &lt;p&gt;Custom {@link TypeFilter TypeFilters} may optionally implement any of the\n\t\t * following {@link org.springframework.beans.factory.Aware Aware} interfaces, and\n\t\t * their respective methods will be called prior to {@link TypeFilter#match match}:\n\t\t * &lt;ul&gt;\n\t\t * &lt;li&gt;{@link org.springframework.context.EnvironmentAware EnvironmentAware}&lt;/li&gt;\n\t\t * &lt;li&gt;{@link org.springframework.beans.factory.BeanFactoryAware BeanFactoryAware}\n\t\t * &lt;li&gt;{@link org.springframework.beans.factory.BeanClassLoaderAware BeanClassLoaderAware}\n\t\t * &lt;li&gt;{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}\n\t\t * &lt;/ul&gt;\n\t\t * &lt;p&gt;Specifying zero classes is permitted but will have no effect on component\n\t\t * scanning.\n\t\t * @since 4.2\n\t\t * @see #value\n\t\t * @see #type\n\t\t */\n\t\t@AliasFor(&quot;value&quot;)\n\t\tClass&lt;?&gt;[] classes() default {};\n\n\t\t/**\n\t\t * The pattern (or patterns) to use for the filter, as an alternative\n\t\t * to specifying a Class {@link #value}.\n\t\t * &lt;p&gt;If {@link #type} is set to {@link FilterType#ASPECTJ ASPECTJ},\n\t\t * this is an AspectJ type pattern expression. If {@link #type} is\n\t\t * set to {@link FilterType#REGEX REGEX}, this is a regex pattern\n\t\t * for the fully-qualified class names to match.\n\t\t * @see #type\n\t\t * @see #classes\n\t\t */\n\t\tString[] pattern() default {};\n\n\t}</pre><hr id=\"Q5g1L\" class=\"ne-hr\"><p id=\"ua151f5e1\" class=\"ne-p\"><span class=\"ne-text\">这个时候，我们就可以这样来配置：</span></p><p id=\"uc66f5fe7\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9c6c049a\" class=\"ne-codeblock language-java\">@Configuration\n@ComponentScan(value = &quot;com.ldc&quot;,excludeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class,Service.class}表示的是标有这些注解的类给排除掉\n        @Filter(type = FilterType.ANNOTATION,classes = {Controller.class,Service.class})\n})\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"uc18607c0\" class=\"ne-p\"><br></p><p id=\"uf74f0733\" class=\"ne-p\"><span class=\"ne-text\">我们再来测试一下：</span></p><p id=\"u3263ee3d\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"33a42374\" class=\"ne-codeblock language-java\">public class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}</pre><p id=\"ua9f9be36\" class=\"ne-p\"><br></p><p id=\"u7260af83\" class=\"ne-p\"><span class=\"ne-text\">这个时候的测试结果如下：这个时候，bookService、bookController 这两个组件就已经被排除掉了，不再被 IOC 容器给管理：</span></p><p id=\"u6658f216\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uf147bb12\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">bookDao<br /></span><span class=\"ne-text\">person</span></p></div><hr id=\"GAyCS\" class=\"ne-hr\"><p id=\"uf23f32c9\" class=\"ne-p\"><span class=\"ne-text\">我们也可以来配置</span><strong><span class=\"ne-text\">includeFilters</span></strong><span class=\"ne-text\">：指定在扫描的时候，只需要包含哪些组件<br /></span><span class=\"ne-text\">在用 xml 文件配置的方式来进行配置的时候，还要禁用掉默认的配置规则，只包含哪些组件的配置才能生效</span></p><p id=\"u8806fdf3\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"uf2a1c841\" class=\"ne-p\"><span class=\"ne-text\">&lt;context:</span><a href=\"https://so.csdn.net/so/search?q=component&amp;spm=1001.2101.3001.7020\" data-href=\"https://so.csdn.net/so/search?q=component&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">component</span></a><span class=\"ne-text\">-scan base-package=“com.ldc” use-default-filters=“false”/&gt;</span></p></div><p id=\"ud512a2b7\" class=\"ne-p\"><br></p><p id=\"u822fcd90\" class=\"ne-p\"><img src=\"https://img-blog.csdnimg.cn/20190110203227264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70\" width=\"1158\" id=\"qJpvy\" class=\"ne-image\"></p><hr id=\"M83lV\" class=\"ne-hr\"><p id=\"u9550a3d4\" class=\"ne-p\"><span class=\"ne-text\">这个时候，我们就可以这样来写：</span></p><p id=\"ue610a833\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"fa84313e\" class=\"ne-codeblock language-java\">@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = &quot;com.ldc&quot;,includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"ub71b0c6d\" class=\"ne-p\"><br></p><p id=\"u544fe53a\" class=\"ne-p\"><span class=\"ne-text\">测试类：</span></p><p id=\"u4f77ddf5\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"33a42374-1\" class=\"ne-codeblock language-java\">public class IOCTest {\n\n    @Test\n    public void test01() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n    }\n\n}</pre><p id=\"uaceada5d\" class=\"ne-p\"><br></p><p id=\"uc19192c4\" class=\"ne-p\"><span class=\"ne-text\">这个时候，测试结果如下：这个时候是按照标有注解来进行包含的，现在就只有一个 bookController 被纳入到 IOC 容器进行管理</span></p><p id=\"u1581840e\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ua8672c78\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">bookController<br /></span><span class=\"ne-text\">person</span></p></div><hr id=\"cQpgu\" class=\"ne-hr\"><p id=\"u01d66530\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScan</span></code><span class=\"ne-text\">这个注解是可以重复定义的：来指定不同的扫描策略<br /></span><img src=\"https://img-blog.csdnimg.cn/2019011020395423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ==,size_16,color_FFFFFF,t_70\" width=\"1042\" id=\"IAyjq\" class=\"ne-image\"></p><hr id=\"P2k68\" class=\"ne-hr\"><p id=\"uebe34671\" class=\"ne-p\"><span class=\"ne-text\">我们还可以用 </span><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScans</span></code><span class=\"ne-text\">来定义多个扫描规则：里面是</span><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScan</span></code><span class=\"ne-text\">规则的数组</span></p><p id=\"u5c794ebc\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"bb064102\" class=\"ne-codeblock language-java\">@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n    @ComponentScan(value = &quot;com.ldc&quot;,includeFilters = {\n            //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行排除\n            //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n            @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n    },useDefaultFilters = false),\n    @ComponentScan(value = &quot;com.ldc&quot;)\n})\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><hr id=\"PQiC7\" class=\"ne-hr\"><p id=\"u89426cfa\" class=\"ne-p\"><span class=\"ne-text\">也可以直接这样来配置多个</span><code class=\"ne-code\"><span class=\"ne-text\">@ComponentScan</span></code><span class=\"ne-text\">注解：</span><strong><span class=\"ne-text\">但是这样写的话，就必须要 java8 及以上的支持</span></strong></p><p id=\"u817823b5\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"b2dc07cf\" class=\"ne-codeblock language-java\">@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScan(value = &quot;com.ldc&quot;,includeFilters = {\n        //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n        //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n        @Filter(type = FilterType.ANNOTATION, classes = {Controller.class})\n},useDefaultFilters = false)\n\n@ComponentScan(value = &quot;com.ldc&quot;)\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><hr id=\"wswTa\" class=\"ne-hr\"><h1 id=\"3acd5314\"><span class=\"ne-text\">3 组件注册 - 自定义 TypeFilter 指定过滤规则</span></h1><p id=\"ua25b822c\" class=\"ne-p\"><br></p><p id=\"uc2996372\" class=\"ne-p\"><span class=\"ne-text\">我们可以来看看有哪几种过滤规则：</span></p><p id=\"u55b7327f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"c034a4a1\" class=\"ne-codeblock language-java\">public enum FilterType {\n\n\t/**\n\t * Filter candidates marked with a given annotation.\n\t * @see org.springframework.core.type.filter.AnnotationTypeFilter\n\t */\n\tANNOTATION,\n\n\t/**\n\t * Filter candidates assignable to a given type.\n\t * @see org.springframework.core.type.filter.AssignableTypeFilter\n\t */\n\tASSIGNABLE_TYPE,\n\n\t/**\n\t * Filter candidates matching a given AspectJ type pattern expression.\n\t * @see org.springframework.core.type.filter.AspectJTypeFilter\n\t */\n\tASPECTJ,\n\n\t/**\n\t * Filter candidates matching a given regex pattern.\n\t * @see org.springframework.core.type.filter.RegexPatternTypeFilter\n\t */\n\tREGEX,\n\n\t/** Filter candidates using a given custom\n\t * {@link org.springframework.core.type.filter.TypeFilter} implementation.\n\t */\n\tCUSTOM\n\n}</pre><p id=\"u05490af5\" class=\"ne-p\"><br></p><p id=\"ubc60058c\" class=\"ne-p\"><span class=\"ne-text\">我们可以这样来匹配，来指定不同的匹配规则：</span></p><p id=\"ubc573145\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"a1516301\" class=\"ne-codeblock language-java\">@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = &quot;com.ldc&quot;,includeFilters = {\n                //这里面是一个@Filter注解数组，FilterType.ANNOTATION表示的排除的规则 ：按照注解的方式来进行匹配\n                //classes = {Controller.class}表示的是标有这些注解的类给纳入到IOC容器中\n\n                // FilterType.ANNOTATION 按照注解来进行匹配\n                // FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配\n                @Filter(type = FilterType.ANNOTATION, classes = {Controller.class}),\n                //按照给定的类型来进行匹配\n                @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = {BookService.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><p id=\"ua6545077\" class=\"ne-p\"><br></p><p id=\"u85bc4533\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"u40fc9b83\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"udd26a860\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">bookController<br /></span><span class=\"ne-text\">bookService<br /></span><span class=\"ne-text\">person</span></p></div><p id=\"uba888c51\" class=\"ne-p\"><br></p><p id=\"ub80dfe75\" class=\"ne-p\"><span class=\"ne-text\">bookService 组件又重新的被 IOC 容器给管理了；</span></p><p id=\"u6598fdab\" class=\"ne-p\"><br></p><p id=\"ue7eccaf7\" class=\"ne-p\"><span class=\"ne-text\">下面的这两种是我们最常用的匹配规则：</span></p><p id=\"u9c6952da\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ua143b773\" class=\"ne-p\"><span class=\"ne-text\">FilterType.ANNOTATION 按照注解来进行匹配<br /></span><span class=\"ne-text\">FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配</span></p></div><hr id=\"jQS5P\" class=\"ne-hr\"><p id=\"ucdd864a4\" class=\"ne-p\"><span class=\"ne-text\">我们还可以来写上一个 </span><code class=\"ne-code\"><span class=\"ne-text\">FilterType.ASPECTJ</span></code><span class=\"ne-text\">表达式来进行匹配，这个不常用；<br /></span><span class=\"ne-text\">我们也可以按照正则表达式</span><code class=\"ne-code\"><span class=\"ne-text\">FilterType.REGEX</span></code><span class=\"ne-text\">的方式来进行匹配：</span></p><hr id=\"rBIi6\" class=\"ne-hr\"><p id=\"ube08dda2\" class=\"ne-p\"><span class=\"ne-text\">我们来说说最后一种：自定义匹配规则</span><code class=\"ne-code\"><span class=\"ne-text\">FilterType.CUSTOM</span></code></p><p id=\"u73c4967e\" class=\"ne-p\"><br></p><p id=\"ufe52f294\" class=\"ne-p\"><span class=\"ne-text\">我们可以自己来写一个匹配规则的类：MyTypeFilter，这个类要实现 TypeFilter 这个接口</span></p><p id=\"ua5d91c3f\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"46aa1153\" class=\"ne-codeblock language-java\">public class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(&quot;通过自定义的匹配规则---&gt;&quot;+className);\n        return false;\n    }\n}</pre><p id=\"uee53bdad\" class=\"ne-p\"><br></p><p id=\"u3bca8812\" class=\"ne-p\"><span class=\"ne-text\">这个时候，我们就可以这样来用了：使用</span><code class=\"ne-code\"><span class=\"ne-text\">FilterType.CUSTOM</span></code></p><p id=\"u7ab08034\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"d97f9a91\" class=\"ne-codeblock language-java\">@Configuration\n//excludeFilters = Filter[];指定在扫描的时候按照什么规则来排除脑哪些组件\n//includeFilters = Filter[];指定在扫描的时候，只需要包含哪些组件\n@ComponentScans(value = {\n        @ComponentScan(value = &quot;com.ldc&quot;,includeFilters = {\n                //自定义匹配的规则\n                @Filter(type = FilterType.CUSTOM, classes = {MyTypeFilter.class})\n        },useDefaultFilters = false)\n})\n\npublic class MainConfig {\n\n    @Bean(value = &quot;person&quot;)\n    public Person person01() {\n        return new Person(&quot;lisi&quot;,20);\n    }\n\n}</pre><hr id=\"rFTOZ\" class=\"ne-hr\"><p id=\"uc595b5f6\" class=\"ne-p\"><span class=\"ne-text\">现在的测试结果如下:</span></p><p id=\"u9d5544cc\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u978a2209\" class=\"ne-p\"><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">person</span></p></div><hr id=\"ukfcZ\" class=\"ne-hr\"><p id=\"u8484c4a1\" class=\"ne-p\"><span class=\"ne-text\">由于，我的自定义的规则类里面返回的是 false，所有一个都没有匹配到；<br /></span><span class=\"ne-text\">我们可以这样来修改一下，让 clsssName 里面包含 “er” 的组件给匹配到：</span></p><p id=\"uca4d843d\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"02c79804\" class=\"ne-codeblock language-java\">public class MyTypeFilter implements TypeFilter {\n    /**\n     *\n     * @param metadataReader  the metadata reader for the target class 读取到当前正在扫描的类的信息\n     * @param metadataReaderFactory a factory for obtaining metadata readers 可以获取到其他任何类的信息\n     * @return\n     * @throws IOException\n     */\n    @Override\n    public boolean match(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory) throws IOException {\n        //获取到当前类注解的信息\n        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();\n        //获取当前类的资源的信息（比如类的路径）\n        Resource resource = metadataReader.getResource();\n\n        //获取到当前正在扫描的类的信息\n        ClassMetadata classMetadata = metadataReader.getClassMetadata();\n        String className = classMetadata.getClassName();\n        System.out.println(&quot;通过自定义的匹配规则---&gt;&quot;+className);\n\n        if (className.contains(&quot;er&quot;)) {\n            return true;\n        }\n        return false;\n    }\n}</pre><p id=\"u59dc7f61\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u63f8e1df\" class=\"ne-p\"><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span class=\"ne-text\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig<br /></span><span class=\"ne-text\">person<br /></span><span class=\"ne-text\">myTypeFilter<br /></span><span class=\"ne-text\">bookController<br /></span><span class=\"ne-text\">bookService</span></p></div><p id=\"u0c2d97ba\" class=\"ne-p\"><br></p><p id=\"uf49190ab\" class=\"ne-p\"><span class=\"ne-text\">这个时候，包含 “er” 的组件就给添加到了 IOC 容器中了；只要在包扫描里面的包里面的每一个类都会进入到这个自定义的匹配规则进行匹配；</span></p><hr id=\"VkY7q\" class=\"ne-hr\"><h1 id=\"fd2a4202\"><span class=\"ne-text\">4 组件注册 -</span><code class=\"ne-code\"><span class=\"ne-text\">@Scope</span></code><span class=\"ne-text\">-设置组件</span><a href=\"https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&amp;spm=1001.2101.3001.7020\" data-href=\"https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">作用域</span></a></h1><p id=\"u6ac8d314\" class=\"ne-p\"><br></p><p id=\"u160196f0\" class=\"ne-p\"><span class=\"ne-text\">首先有一个配置类：</span></p><p id=\"uc6834431\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"25bbde69\" class=\"ne-codeblock language-java\">@Configuration\npublic class MainConfig2 {\n\n    //默认是单实例的\n    @Bean(&quot;person&quot;)\n    public Person person() {\n        return new Person();\n    }\n\n}</pre><hr id=\"CB6RU\" class=\"ne-hr\"><p id=\"u8aa22ea0\" class=\"ne-p\"><span class=\"ne-text\">测试方法：</span></p><p id=\"u3eb903eb\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9915a1fa\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(&quot;person&quot;);\n        Person person2 = (Person) applicationContext.getBean(&quot;person&quot;);\n        System.out.println(person1==person2);\n    }</pre><p id=\"u508de0fa\" class=\"ne-p\"><br></p><p id=\"ua8338046\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"ue79bcf59\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"udb63e894\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig2<br /></span><span class=\"ne-text\">person<br /></span><span class=\"ne-text\">true</span></p></div><p id=\"uc96fbaf0\" class=\"ne-p\"><br></p><p id=\"ud3e8da84\" class=\"ne-p\"><span class=\"ne-text\">说明这个 bean 的实例是单例的；</span></p><hr id=\"Fcxnv\" class=\"ne-hr\"><p id=\"u5f5bd1db\" class=\"ne-p\"><span class=\"ne-text\">我们可以用</span><code class=\"ne-code\"><span class=\"ne-text\">@Scope</span></code><span class=\"ne-text\">这个注解来指定作用域的范围：这个就相当于在 xml 文件中配置的</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;bean&gt;</span></code><span class=\"ne-text\">标签里面指定</span><a href=\"https://so.csdn.net/so/search?q=scope&amp;spm=1001.2101.3001.7020\" data-href=\"https://so.csdn.net/so/search?q=scope&amp;spm=1001.2101.3001.7020\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">scope</span></a><span class=\"ne-text\">\\=“prototype” 属性；</span></p><p id=\"u1fa4ab21\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"7eee35a7\" class=\"ne-codeblock language-java\">@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface Scope {\n\n\t/**\n\t * Alias for {@link #scopeName}.\n\t * @see #scopeName\n\t */\n\t@AliasFor(&quot;scopeName&quot;)\n\tString value() default &quot;&quot;;\n\n\t/**\n\t * Specifies the name of the scope to use for the annotated component/bean.\n\t * &lt;p&gt;Defaults to an empty string ({@code &quot;&quot;}) which implies\n\t * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}.\n\t * @since 4.2\n\t * @see ConfigurableBeanFactory#SCOPE_PROTOTYPE\n\t * @see ConfigurableBeanFactory#SCOPE_SINGLETON\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST\n\t * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n\t * @see #value\n\t */\n\t@AliasFor(&quot;value&quot;)\n\tString scopeName() default &quot;&quot;;\n\n\t/**\n\t * Specifies whether a component should be configured as a scoped proxy\n\t * and if so, whether the proxy should be interface-based or subclass-based.\n\t * &lt;p&gt;Defaults to {@link ScopedProxyMode#DEFAULT}, which typically indicates\n\t * that no scoped proxy should be created unless a different default\n\t * has been configured at the component-scan instruction level.\n\t * &lt;p&gt;Analogous to {@code &lt;aop:scoped-proxy/&gt;} support in Spring XML.\n\t * @see ScopedProxyMode\n\t */\n\tScopedProxyMode proxyMode() default ScopedProxyMode.DEFAULT;\n\n}</pre><p id=\"ua283c6d6\" class=\"ne-p\"><br></p><p id=\"u7023ed07\" class=\"ne-p\"><span class=\"ne-text\">从源码的注释上，我们可以知道 scopeName 可以取下面这些值：</span><strong><span class=\"ne-text\">前两个用的比较多，我们就来看看前面两个可以取的值</span></strong></p><p id=\"u07b4f0c3\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ue3ef2307\" class=\"ne-p\"><span class=\"ne-text\">ConfigurableBeanFactory#SCOPE_PROTOTYPE<br /></span><span class=\"ne-text\">ConfigurableBeanFactory#SCOPE_SINGLETON<br /></span><span class=\"ne-text\">org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST<br /></span><span class=\"ne-text\">org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</span></p></div><p id=\"u491beabc\" class=\"ne-p\"><br></p><p id=\"uefbddfa2\" class=\"ne-p\"><span class=\"ne-text\">我们可以点到 ConfigurableBeanFactory 接口去看一下：</span></p><p id=\"ud899e444\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"0226488e\" class=\"ne-codeblock language-java\">public interface ConfigurableBeanFactory extends HierarchicalBeanFactory, SingletonBeanRegistry {\n    String SCOPE_SINGLETON = &quot;singleton&quot;;\n    String SCOPE_PROTOTYPE = &quot;prototype&quot;;\n\n    void setParentBeanFactory(BeanFactory var1) throws IllegalStateException;\n\n    void setBeanClassLoader(ClassLoader var1);\n\n    ClassLoader getBeanClassLoader();\n\n    void setTempClassLoader(ClassLoader var1);\n\n    ClassLoader getTempClassLoader();\n\n    void setCacheBeanMetadata(boolean var1);\n\n    boolean isCacheBeanMetadata();\n\n    void setBeanExpressionResolver(BeanExpressionResolver var1);\n\n    BeanExpressionResolver getBeanExpressionResolver();\n\n    void setConversionService(ConversionService var1);\n\n    ConversionService getConversionService();\n\n    void addPropertyEditorRegistrar(PropertyEditorRegistrar var1);\n\n    void registerCustomEditor(Class&lt;?&gt; var1, Class&lt;? extends PropertyEditor&gt; var2);\n\n    void copyRegisteredEditorsTo(PropertyEditorRegistry var1);\n\n    void setTypeConverter(TypeConverter var1);\n\n    TypeConverter getTypeConverter();\n\n    void addEmbeddedValueResolver(StringValueResolver var1);\n\n    boolean hasEmbeddedValueResolver();\n\n    String resolveEmbeddedValue(String var1);\n\n    void addBeanPostProcessor(BeanPostProcessor var1);\n\n    int getBeanPostProcessorCount();\n\n    void registerScope(String var1, Scope var2);\n\n    String[] getRegisteredScopeNames();\n\n    Scope getRegisteredScope(String var1);\n\n    AccessControlContext getAccessControlContext();\n\n    void copyConfigurationFrom(ConfigurableBeanFactory var1);\n\n    void registerAlias(String var1, String var2) throws BeanDefinitionStoreException;\n\n    void resolveAliases(StringValueResolver var1);\n\n    BeanDefinition getMergedBeanDefinition(String var1) throws NoSuchBeanDefinitionException;\n\n    boolean isFactoryBean(String var1) throws NoSuchBeanDefinitionException;\n\n    void setCurrentlyInCreation(String var1, boolean var2);\n\n    boolean isCurrentlyInCreation(String var1);\n\n    void registerDependentBean(String var1, String var2);\n\n    String[] getDependentBeans(String var1);\n\n    String[] getDependenciesForBean(String var1);\n\n    void destroyBean(String var1, Object var2);\n\n    void destroyScopedBean(String var1);\n\n    void destroySingletons();\n}</pre><p id=\"u0be28110\" class=\"ne-p\"><br></p><p id=\"ub3b55624\" class=\"ne-p\"><span class=\"ne-text\">我们来指定一个多实例的：</span></p><p id=\"u92b24b1a\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"07d68492\" class=\"ne-codeblock language-java\">@Configuration\npublic class MainConfig2 {\n    //singleton:单实例的\n    //prototype:多实例的\n    //request:同一次请求创建一个实例\n    //session:同一个session创建的一个实例\n    @Scope(&quot;prototype&quot;)\n    //默认是单实例的\n    @Bean(&quot;person&quot;)\n    public Person person() {\n        return new Person();\n    }\n\n}</pre><p id=\"u9acb702f\" class=\"ne-p\"><br></p><p id=\"ud1b980d0\" class=\"ne-p\"><span class=\"ne-text\">现在，我们再来测试一次：</span></p><p id=\"u903eebc3\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"9915a1fa-1\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        String[] definitionNames = applicationContext.getBeanDefinitionNames();\n        for (String name : definitionNames) {\n            System.out.println(name);\n        }\n        //默认是单实例的\n        Person person1 = (Person) applicationContext.getBean(&quot;person&quot;);\n        Person person2 = (Person) applicationContext.getBean(&quot;person&quot;);\n        System.out.println(person1==person2);\n    }</pre><p id=\"ub2114ec6\" class=\"ne-p\"><br></p><p id=\"u414ff8e5\" class=\"ne-p\"><span class=\"ne-text\">这个时候的测试结果如下：</span></p><p id=\"u25841726\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u3d8bd106\" class=\"ne-p\"><span class=\"ne-text\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span class=\"ne-text\">org.springframework.context.event.internalEventListenerFactory<br /></span><span class=\"ne-text\">mainConfig2<br /></span><span class=\"ne-text\">person<br /></span><span class=\"ne-text\">false</span></p></div><p id=\"u2f62c9b1\" class=\"ne-p\"><br></p><p id=\"ub867c932\" class=\"ne-p\"><span class=\"ne-text\">这个时候，bean 的实例就多实例的，每调用一次 getBean() 方法就会创建一个实例；</span></p><hr id=\"uv2Wz\" class=\"ne-hr\"><p id=\"u00ff5003\" class=\"ne-p\"><span class=\"ne-text\">我们来看看当 bean 的作用域为单例的时候，它在 IOC 容器中是何时创建的：</span></p><p id=\"u57426488\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"2920535c\" class=\"ne-codeblock language-java\">@Configuration\npublic class MainConfig2 {\n    \n    @Scope\n    @Bean(&quot;person&quot;)\n    public Person person() {\n        System.out.println(&quot;给IOC容器中添加Person...&quot;);\n        return new Person();\n    }\n\n}</pre><p id=\"u91649e27\" class=\"ne-p\"><br></p><p id=\"uabb59a1f\" class=\"ne-p\"><span class=\"ne-text\">首先，我们先启动 IOC 容器，但是不调用 getBean 方法来获取 Person 实例：</span></p><p id=\"u95dab8ae\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"74c44b71\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }</pre><p id=\"u268f16f2\" class=\"ne-p\"><br></p><p id=\"u78b0e9d9\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"u412ad985\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u2ab42a54\" class=\"ne-p\"><span class=\"ne-text\">给 IOC 容器中添加 Person…</span></p></div><p id=\"u5c2c9c3b\" class=\"ne-p\"><br></p><p id=\"u5c555732\" class=\"ne-p\"><span class=\"ne-text\">这个时候，我们就可以发现，当作用域为单例的时候，IOC 容器在启动的时候，就会将容器中所有作用域为单例的 bean 的实例给创建出来；以后的每次获取，就直接从 IOC 容器中来获取，相当于是从 map.get() 的一个过程；</span></p><hr id=\"sDFha\" class=\"ne-hr\"><p id=\"u64fa7f9a\" class=\"ne-p\"><span class=\"ne-text\">然而，当我们的 bean 的作用域改成多实例的时候，我们再看看结果：</span></p><p id=\"u7dbe6cd2\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"7ea2c77f\" class=\"ne-codeblock language-java\">@Configuration\npublic class MainConfig2 {\n\n    @Scope(&quot;prototype&quot;)\n    @Bean(&quot;person&quot;)\n    public Person person() {\n        System.out.println(&quot;给IOC容器中添加Person...&quot;);\n        return new Person();\n    }\n\n}</pre><p id=\"ua212fdba\" class=\"ne-p\"><br></p><p id=\"u2e5d4c32\" class=\"ne-p\"><span class=\"ne-text\">当我们再运行的时候：</span></p><p id=\"u8f7746e1\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"74c44b71-1\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n    }</pre><p id=\"u554553a1\" class=\"ne-p\"><br></p><p id=\"u1799a33e\" class=\"ne-p\"><span class=\"ne-text\">我们可以发现，控制台没有任何的输出结果；在 IOC 容器创建的时候，没有去创建这个作用域为多实例的 bean；</span></p><p id=\"ufd75075d\" class=\"ne-p\"><br></p><p id=\"uad168217\" class=\"ne-p\"><span class=\"ne-text\">这个时候，我们来调用 getBean() 方法来获取一下：</span></p><p id=\"u40cedbf0\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"12fbf35a\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(&quot;IOC容器创建完成...&quot;);\n        Person person = (Person) applicationContext.getBean(&quot;person&quot;);\n    }</pre><p id=\"ue939842c\" class=\"ne-p\"><br></p><p id=\"u368642e1\" class=\"ne-p\"><span class=\"ne-text\">这个时候，控制台打印了：</span></p><p id=\"u95b18869\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ue91cc42a\" class=\"ne-p\"><span class=\"ne-text\">IOC 容器创建完成…<br /></span><span class=\"ne-text\">给 IOC 容器中添加 Person…</span></p></div><p id=\"ub46fbf93\" class=\"ne-p\"><br></p><p id=\"uea9c175a\" class=\"ne-p\"><span class=\"ne-text\">同时， 如果我多次获取：</span></p><p id=\"u83d1e9b1\" class=\"ne-p\"><br></p><pre data-language=\"java\" id=\"3adc8077\" class=\"ne-codeblock language-java\">    @Test\n    public void test02() {\n        ApplicationContext applicationContext = new AnnotationConfigApplicationContext(MainConfig2.class);\n        System.out.println(&quot;IOC容器创建完成...&quot;);\n        Person person = (Person) applicationContext.getBean(&quot;person&quot;);\n        Person person1 = (Person) applicationContext.getBean(&quot;person&quot;);\n    }</pre><p id=\"ua8bd6797\" class=\"ne-p\"><br></p><p id=\"u044a841d\" class=\"ne-p\"><span class=\"ne-text\">测试结果如下：</span></p><p id=\"u7ec99b65\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"u269e18a6\" class=\"ne-p\"><span class=\"ne-text\">IOC 容器创建完成…<br /></span><span class=\"ne-text\">给 IOC 容器中添加 Person…<br /></span><span class=\"ne-text\">给 IOC 容器中添加 Person…</span></p></div><p id=\"u3ee129d5\" class=\"ne-p\"><br></p><p id=\"u10507792\" class=\"ne-p\"><span class=\"ne-text\">我们可以发现，我们用 getBean 方法获取几次，就创建几次 bean 的实例；</span></p><p id=\"u295e7a50\" class=\"ne-p\"><br></p><p id=\"u2fb334a9\" class=\"ne-p\"><span class=\"ne-text\">也就是说当 bean 是作用域为多例的时候，IOC 容器启动的时候，就不会去创建 bean 的实例的，而是当我们调用 getBean() 获取的时候去创建 bean 的实例；而且每次调用的时候，都会创建 bean 的实例；</span></p></div>",
    "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u70774c0d\" id=\"u70774c0d\"><br></p><h1 data-lake-id=\"uKqFE\" id=\"uKqFE\"><span data-lake-id=\"u08e52c31\" id=\"u08e52c31\">0 简介 </span></h1><blockquote data-lake-id=\"ucd8f6413\" id=\"ucd8f6413\"><p data-lake-id=\"u81d92179\" id=\"u81d92179\"><span data-lake-id=\"u13f5b73a\" id=\"u13f5b73a\">当我们还在使用 Spring、</span><a href=\"https://so.csdn.net/so/search?q=SpringMVC&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"u87df8a4c\" id=\"u87df8a4c\"><span data-lake-id=\"u77212ac3\" id=\"u77212ac3\">SpringMVC</span></a><span data-lake-id=\"u692d59a9\" id=\"u692d59a9\">、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springboot 和 SpringCloud 里面会使用到大量的注解来进行配置；当我们熟练掌握了 Spring 的注解驱动，那当我们在学习 Springboot 和 SpringCloud 框架的时候，那将会更加的轻松自如；让我们一起来开启 Spring 注解驱动开发的学习之旅吧！</span></p></blockquote><p data-lake-id=\"u80f295c5\" id=\"u80f295c5\"><br></p><h1 data-lake-id=\"81f533a5\" id=\"81f533a5\"><span data-lake-id=\"u0f035247\" id=\"u0f035247\">1 组件注册 -</span><code data-lake-id=\"u92d1af43\" id=\"u92d1af43\"><span data-lake-id=\"u178f0b15\" id=\"u178f0b15\">@Configuration</span></code><span data-lake-id=\"u5a8f5075\" id=\"u5a8f5075\">&amp;</span><code data-lake-id=\"u6206365d\" id=\"u6206365d\"><span data-lake-id=\"uf2e2354c\" id=\"uf2e2354c\">@Bean</span></code><span data-lake-id=\"ua4921562\" id=\"ua4921562\">给容器中注册组件</span></h1><p data-lake-id=\"u8870a13e\" id=\"u8870a13e\"><br></p><p data-lake-id=\"u4cbc0339\" id=\"u4cbc0339\"><span data-lake-id=\"ua459fccd\" id=\"ua459fccd\">创建一个 Maven 项目：spring-annotation<br /></span><span data-lake-id=\"ub9b8c680\" id=\"ub9b8c680\">导入 spring-context jar 包 – 这个就是 Spring 核心环境所有依赖的 jar 包<br /></span><a href=\"https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE\" target=\"_blank\" data-lake-id=\"u6f2163fa\" id=\"u6f2163fa\"><span data-lake-id=\"u9ba489a2\" id=\"u9ba489a2\">Maven 仓库中的 spring-context</span></a></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22r8Tyv%22%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cproject%20xmlns%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%5C%22%5Cn%20%20%20%20%20%20%20%20%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%20%20%20%20%20%20%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%20http%3A%2F%2Fmaven.apache.org%2Fxsd%2Fmaven-4.0.0.xsd%5C%22%3E%5Cn%20%20%20%20%3CmodelVersion%3E4.0.0%3C%2FmodelVersion%3E%5Cn%5Cn%20%20%20%20%3CgroupId%3Ecom.ldc%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Espring-annotation%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%5Cn%20%20%20%20%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework%2Fspring-context%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-context%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E4.3.12.RELEASE%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%5Cn%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22098ed72f%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22ck1Q9%22%7D\"></card><ul list=\"ud7b3c015\"><li fid=\"u6beadfa3\" data-lake-id=\"u4e4a3c8f\" id=\"u4e4a3c8f\"><strong><span data-lake-id=\"u8d55e395\" id=\"u8d55e395\">xml 文件配置的方式</span></strong><span data-lake-id=\"u8a9bc1c9\" id=\"u8a9bc1c9\"><br /></span><span data-lake-id=\"u6599b78f\" id=\"u6599b78f\">先按照我们以前配置的方式来使用 Spring：<br /></span><span data-lake-id=\"u0780329e\" id=\"u0780329e\">首先有一个 Person 类：</span></li></ul><p data-lake-id=\"u8ba324f7\" id=\"u8ba324f7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Person%20%7B%5Cn%20%20%20%20private%20String%20name%3B%5Cn%20%20%20%20private%20Integer%20age%3B%5Cn%5Cn%20%20%20%20public%20Person()%20%7B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20Person(String%20name%2C%20Integer%20age)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%20%20%20%20this.age%20%3D%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20String%20getName()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setName(String%20name)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20Integer%20getAge()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setAge(Integer%20age)%20%7B%5Cn%20%20%20%20%20%20%20%20this.age%20%3D%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20String%20toString()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%5C%22Person%7B%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%3D'%5C%22%20%2B%20name%20%2B%20'%5C%5C''%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22%2C%20age%3D%5C%22%20%2B%20age%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20'%7D'%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22e8eb6dee%22%7D\"></card><p data-lake-id=\"u2efd5432\" id=\"u2efd5432\"><br></p><p data-lake-id=\"u677b0f02\" id=\"u677b0f02\"><span data-lake-id=\"ube3294b2\" id=\"ube3294b2\">我们再写上一个 Spring 的 xml 配置文件：</span></p><p data-lake-id=\"u6d32c19e\" id=\"u6d32c19e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cbeans%20xmlns%3D%5C%22http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%5C%22%5Cn%5Ct%20%20%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%5Ct%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%20http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%2Fspring-beans.xsd%5C%22%3E%5Cn%5Cn%5Ct%3Cbean%20id%3D%5C%22person%5C%22%20class%3D%5C%22com.ldc.bean.Person%5C%22%3E%5Cn%5Ct%5Ct%3Cproperty%20name%3D%5C%22age%5C%22%20value%3D%5C%2218%5C%22%3E%3C%2Fproperty%3E%5Cn%5Ct%5Ct%3Cproperty%20name%3D%5C%22name%5C%22%20value%3D%5C%22%E5%BC%A0%E4%B8%89%5C%22%3E%3C%2Fproperty%3E%5Cn%5Ct%3C%2Fbean%3E%5Cn%3C%2Fbeans%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2221dd67ee%22%7D\"></card><p data-lake-id=\"u3932e4a8\" id=\"u3932e4a8\"><br></p><p data-lake-id=\"u483210f5\" id=\"u483210f5\"><span data-lake-id=\"u27427c88\" id=\"u27427c88\">测试类来测试：</span></p><p data-lake-id=\"ub3aa457c\" id=\"ub3aa457c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20ClassPathXmlApplicationContext(%5C%22beans.xml%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%222cb7cc8e%22%7D\"></card><p data-lake-id=\"u01f314cf\" id=\"u01f314cf\"><br></p><p data-lake-id=\"u1106e450\" id=\"u1106e450\"><span data-lake-id=\"u893e7fe0\" id=\"u893e7fe0\">输出结果为：</span></p><p data-lake-id=\"u630b117f\" id=\"u630b117f\"><br></p><blockquote data-lake-id=\"u20f905c5\" id=\"u20f905c5\"><p data-lake-id=\"u3ab76931\" id=\"u3ab76931\"><span data-lake-id=\"u3fc85274\" id=\"u3fc85274\">Person{name=‘张三’, age=18}</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22bugNC%22%7D\"></card><ul list=\"ub502cf1e\"><li fid=\"u5d433ce1\" data-lake-id=\"u64ed4c7a\" id=\"u64ed4c7a\"><strong><span data-lake-id=\"uc060a0c0\" id=\"uc060a0c0\">注解的方式</span></strong><span data-lake-id=\"ud0f586c1\" id=\"ud0f586c1\">：</span></li></ul><p data-lake-id=\"u0e132c33\" id=\"u0e132c33\"><br></p><p data-lake-id=\"u08eac971\" id=\"u08eac971\"><span data-lake-id=\"u22a21e31\" id=\"u22a21e31\">首先我们先写一个配置类：等同于 xml 配置文件</span></p><p data-lake-id=\"ub2981432\" id=\"ub2981432\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ed81bcc1%22%7D\"></card><p data-lake-id=\"u3902e3fa\" id=\"u3902e3fa\"><br></p><p data-lake-id=\"u2b43f38f\" id=\"u2b43f38f\"><span data-lake-id=\"ubfc12f5a\" id=\"ubfc12f5a\">现在，我们来测试一下：</span></p><p data-lake-id=\"u753074f4\" id=\"u753074f4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227943a0cb%22%7D\"></card><p data-lake-id=\"u06b8473a\" id=\"u06b8473a\"><br></p><p data-lake-id=\"ubd40d912\" id=\"ubd40d912\"><span data-lake-id=\"uc341dd43\" id=\"uc341dd43\">测试结果如下：</span></p><p data-lake-id=\"ub84321eb\" id=\"ub84321eb\"><br></p><blockquote data-lake-id=\"u5e538f6d\" id=\"u5e538f6d\"><p data-lake-id=\"uf444fab7\" id=\"uf444fab7\"><span data-lake-id=\"u26a69ed1\" id=\"u26a69ed1\">Person{name=‘lisi’, age=20}</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22E6DQN%22%7D\"></card><p data-lake-id=\"ue5d8fbe3\" id=\"ue5d8fbe3\"><span data-lake-id=\"ud32f2447\" id=\"ud32f2447\">我们也可以通过 ApplicationContext 的一些方法来获取容器里面 bean 的一些信息，比如我们可以获取 Person 这个 bean 在 IOC 容器里面的名字，也是相当于是 xml 配置文件里面标签里面的 id 属性；</span></p><p data-lake-id=\"uf719b308\" id=\"uf719b308\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20namesForType%20%3D%20applicationContext.getBeanNamesForType(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20namesForType)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22dcafa1f3%22%7D\"></card><p data-lake-id=\"ud7e45b0d\" id=\"ud7e45b0d\"><br></p><p data-lake-id=\"u8f1b3d0d\" id=\"u8f1b3d0d\"><span data-lake-id=\"u3ac07873\" id=\"u3ac07873\">测试结果如下：</span></p><p data-lake-id=\"u785b12fe\" id=\"u785b12fe\"><br></p><blockquote data-lake-id=\"uaca43a2a\" id=\"uaca43a2a\"><p data-lake-id=\"ub0aa773b\" id=\"ub0aa773b\"><span data-lake-id=\"ud6520bb6\" id=\"ud6520bb6\">Person{name=‘lisi’, age=20}<br /></span><span data-lake-id=\"u16d1cd5b\" id=\"u16d1cd5b\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22d9EFe%22%7D\"></card><p data-lake-id=\"u99975fdf\" id=\"u99975fdf\"><strong><span data-lake-id=\"u55ba2c6a\" id=\"u55ba2c6a\">Spring 注解的方式默认是以配置的方法名来作为这个 bean 的默认 id，如果我们不想要方法名来作为 bean 的 id，我们可以在</span></strong><code data-lake-id=\"u9d3edf85\" id=\"u9d3edf85\"><strong><span data-lake-id=\"uc6805884\" id=\"uc6805884\">@Bean</span></strong></code><strong><span data-lake-id=\"uc65e0628\" id=\"uc65e0628\">这个注解的 value 属性来进行指定：</span></strong></p><p data-lake-id=\"ue89a42da\" id=\"ue89a42da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f0a2f3cf%22%7D\"></card><p data-lake-id=\"uecfe5b6e\" id=\"uecfe5b6e\"><br></p><p data-lake-id=\"u2963fe11\" id=\"u2963fe11\"><span data-lake-id=\"ufcaf391c\" id=\"ufcaf391c\">我们再来运行这个测试类：</span></p><p data-lake-id=\"udf5baf65\" id=\"udf5baf65\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20namesForType%20%3D%20applicationContext.getBeanNamesForType(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20namesForType)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22dcafa1f3-1%22%7D\"></card><p data-lake-id=\"u04064350\" id=\"u04064350\"><br></p><p data-lake-id=\"u7fea4667\" id=\"u7fea4667\"><span data-lake-id=\"u2f66b556\" id=\"u2f66b556\">那么现在的测试结果如下：bean 在 IOC 容器的名字就是 </span><a href=\"/Bean \" data-lake-id=\"udba97ae7\" id=\"udba97ae7\"><span data-lake-id=\"uf6f8971e\" id=\"uf6f8971e\">@Bean </span></a><span data-lake-id=\"u948e17b7\" id=\"u948e17b7\"> 这个注解的 value 属性的值，而不是默认的 id 是方法名 person01 </span></p><p data-lake-id=\"ub8d8ef78\" id=\"ub8d8ef78\"><br></p><blockquote data-lake-id=\"u61c9d480\" id=\"u61c9d480\"><p data-lake-id=\"ue634645e\" id=\"ue634645e\"><span data-lake-id=\"ufa30a34e\" id=\"ufa30a34e\">Person{name=‘lisi’, age=20}<br /></span><span data-lake-id=\"ud6bc4404\" id=\"ud6bc4404\">person</span></p></blockquote><p data-lake-id=\"ud157000a\" id=\"ud157000a\"><br></p><h1 data-lake-id=\"de67f166\" id=\"de67f166\"><span data-lake-id=\"u669e6069\" id=\"u669e6069\">2 组件注册 -</span><code data-lake-id=\"ud028559b\" id=\"ud028559b\"><span data-lake-id=\"uedfcfe4b\" id=\"uedfcfe4b\">@ComponentScan</span></code><span data-lake-id=\"ufdd4483f\" id=\"ufdd4483f\">-自动扫描组件 &amp; 指定扫描规则</span></h1><p data-lake-id=\"u81d28cbc\" id=\"u81d28cbc\"><br></p><p data-lake-id=\"uce63ccbf\" id=\"uce63ccbf\"><span data-lake-id=\"ub8bfb347\" id=\"ub8bfb347\">在 xml 文件配置的方式，我们可以这样来进行配置：</span></p><p data-lake-id=\"ucfb3e7cb\" id=\"ucfb3e7cb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%20%20%20%20%3C!--%20%E5%8C%85%E6%89%AB%E6%8F%8F%E3%80%81%E5%8F%AA%E8%A6%81%E6%A0%87%E6%B3%A8%E4%BA%86%40Controller%E3%80%81%40Service%E3%80%81%40Repository%EF%BC%8C%40Component%20--%3E%5Cn%20%20%20%20%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220bcae339%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22r2PQn%22%7D\"></card><p data-lake-id=\"ub7de522a\" id=\"ub7de522a\"><span data-lake-id=\"u1d46dc08\" id=\"u1d46dc08\">以前是在 xml 配置文件里面写包扫描，现在我们可以在配置类里面写包扫描：</span></p><p data-lake-id=\"uabb2569c\" id=\"uabb2569c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%98%AFxml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229bcef1a7%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22KbAVS%22%7D\"></card><p data-lake-id=\"u14eae0c5\" id=\"u14eae0c5\"><span data-lake-id=\"u9a0beede\" id=\"u9a0beede\">我们创建 BookController、BookService、BookDao 这几个类，分别添加了</span><code data-lake-id=\"uf6766f08\" id=\"uf6766f08\"><span data-lake-id=\"u6fa69e0f\" id=\"u6fa69e0f\">@Controller</span></code><span data-lake-id=\"u2e811af8\" id=\"u2e811af8\">、</span><code data-lake-id=\"ud06381fd\" id=\"ud06381fd\"><span data-lake-id=\"ufc8f5290\" id=\"ufc8f5290\">@Service</span></code><span data-lake-id=\"ue48c46f1\" id=\"ue48c46f1\">、</span><code data-lake-id=\"ub7604963\" id=\"ub7604963\"><span data-lake-id=\"u614824f5\" id=\"u614824f5\">@Repository</span></code><span data-lake-id=\"u572c906a\" id=\"u572c906a\">注解：</span></p><p data-lake-id=\"ud2be6297\" id=\"ud2be6297\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Controller%5Cnpublic%20class%20BookController%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f61a97bb%22%7D\"></card><p data-lake-id=\"u7dde41a3\" id=\"u7dde41a3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Service%5Cnpublic%20class%20BookService%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220317327a%22%7D\"></card><p data-lake-id=\"u184e8a6c\" id=\"u184e8a6c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Repository%5Cnpublic%20class%20BookDao%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ef2e5025%22%7D\"></card><p data-lake-id=\"u84f63f2d\" id=\"u84f63f2d\"><br></p><p data-lake-id=\"u4c5a1354\" id=\"u4c5a1354\"><span data-lake-id=\"u9e6c016c\" id=\"u9e6c016c\">我们可以引入 junit 的 jar 包来进行测试：</span></p><p data-lake-id=\"u3c79839d\" id=\"u3c79839d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%3CgroupId%3Ejunit%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%3CartifactId%3Ejunit%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3Cversion%3E4.12%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d192603d%22%7D\"></card><p data-lake-id=\"u99b12471\" id=\"u99b12471\"><br></p><p data-lake-id=\"ufc999a6b\" id=\"ufc999a6b\"><span data-lake-id=\"ue8a1bcd9\" id=\"ue8a1bcd9\">我们来进行单元测试：</span></p><p data-lake-id=\"uc3790a99\" id=\"uc3790a99\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22b4c8503e%22%7D\"></card><p data-lake-id=\"u7ccfcece\" id=\"u7ccfcece\"><br></p><p data-lake-id=\"ucbcd0b27\" id=\"ucbcd0b27\"><span data-lake-id=\"u1cff9792\" id=\"u1cff9792\">测试结果如下：除开 IOC 容器自己要装配的一些组件外，还有是我们自己装配的组件</span></p><p data-lake-id=\"u040263ea\" id=\"u040263ea\"><br></p><blockquote data-lake-id=\"u2e9b2ead\" id=\"u2e9b2ead\"><p data-lake-id=\"u4fb264b2\" id=\"u4fb264b2\"><span data-lake-id=\"ubb5d03d9\" id=\"ubb5d03d9\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ub56c75de\" id=\"ub56c75de\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u4192af04\" id=\"u4192af04\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u9d057816\" id=\"u9d057816\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u73f70344\" id=\"u73f70344\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u2b3e2d1a\" id=\"u2b3e2d1a\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"uba7f62c1\" id=\"uba7f62c1\">mainConfig<br /></span><span data-lake-id=\"ua3b7c129\" id=\"ua3b7c129\">bookController<br /></span><span data-lake-id=\"u0e0844d4\" id=\"u0e0844d4\">bookDao<br /></span><span data-lake-id=\"u6dc8839e\" id=\"u6dc8839e\">bookService<br /></span><span data-lake-id=\"uef019449\" id=\"uef019449\">person</span></p></blockquote><p data-lake-id=\"u845d4167\" id=\"u845d4167\"><br></p><p data-lake-id=\"u6fe37971\" id=\"u6fe37971\"><span data-lake-id=\"ud5317b8b\" id=\"ud5317b8b\">从上面的测试结果我们可以发现主配置类 MainConfig 也是 IOC 容器里面的组件，也被纳入了 IOC 容器的管理：</span></p><p data-lake-id=\"u7819819a\" id=\"u7819819a\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%98%AFxml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229bcef1a7-1%22%7D\"></card><p data-lake-id=\"ufb14efeb\" id=\"ufb14efeb\"><br></p><p data-lake-id=\"u7d23cc73\" id=\"u7d23cc73\"><span data-lake-id=\"uf180c3a7\" id=\"uf180c3a7\">我们从</span><code data-lake-id=\"u5907c59d\" id=\"u5907c59d\"><span data-lake-id=\"ud93cd7df\" id=\"ud93cd7df\">@Configuration</span></code><span data-lake-id=\"u3b58cf1b\" id=\"u3b58cf1b\"> 这个注解点进去就可以发现这个注解上也标注了 </span><code data-lake-id=\"u5de65ee4\" id=\"u5de65ee4\"><span data-lake-id=\"u33b23548\" id=\"u33b23548\">@Component</span></code><span data-lake-id=\"u0b87aa31\" id=\"u0b87aa31\"> 的这个注解，也纳入到 IOC 容器中作为一个组件：</span></p><p data-lake-id=\"uc14a00c0\" id=\"uc14a00c0\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Target(ElementType.TYPE)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Documented%5Cn%40Component%5Cnpublic%20%40interface%20Configuration%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Explicitly%20specify%20the%20name%20of%20the%20Spring%20bean%20definition%20associated%5Cn%5Ct%20*%20with%20this%20Configuration%20class.%20If%20left%20unspecified%20(the%20common%20case)%2C%5Cn%5Ct%20*%20a%20bean%20name%20will%20be%20automatically%20generated.%5Cn%5Ct%20*%20%3Cp%3EThe%20custom%20name%20applies%20only%20if%20the%20Configuration%20class%20is%20picked%20up%20via%5Cn%5Ct%20*%20component%20scanning%20or%20supplied%20directly%20to%20a%20%7B%40link%20AnnotationConfigApplicationContext%7D.%5Cn%5Ct%20*%20If%20the%20Configuration%20class%20is%20registered%20as%20a%20traditional%20XML%20bean%20definition%2C%5Cn%5Ct%20*%20the%20name%2Fid%20of%20the%20bean%20element%20will%20take%20precedence.%5Cn%5Ct%20*%20%40return%20the%20specified%20bean%20name%2C%20if%20any%5Cn%5Ct%20*%20%40see%20org.springframework.beans.factory.support.DefaultBeanNameGenerator%5Cn%5Ct%20*%2F%5Cn%5CtString%20value()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2239dfc6d8%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22cHmHM%22%7D\"></card><p data-lake-id=\"ufc24c0b0\" id=\"ufc24c0b0\"><span data-lake-id=\"u31422008\" id=\"u31422008\">我们在 </span><code data-lake-id=\"u37534d8b\" id=\"u37534d8b\"><span data-lake-id=\"u4a623366\" id=\"u4a623366\">@ComponentScan</span></code><span data-lake-id=\"u74c1f6c0\" id=\"u74c1f6c0\"> 这个注解上，也是可以指定要排除哪些包或者是只包含哪些包来进行管理：里面传是一个 Filter[]数组<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F20190110194446276.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1100%2C%22originHeight%22%3A529%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22j9Wtt%22%7D\"></card></p><p data-lake-id=\"u10426e4a\" id=\"u10426e4a\"><br></p><p data-lake-id=\"uf3d75f00\" id=\"uf3d75f00\"><span data-lake-id=\"u535588a9\" id=\"u535588a9\">我们从这个 excludeFilters 方法点过去，就到了</span><code data-lake-id=\"u8d9d36a0\" id=\"u8d9d36a0\"><span data-lake-id=\"u4ebbbc4d\" id=\"u4ebbbc4d\">@Filter</span></code><span data-lake-id=\"uda2ff2f0\" id=\"uda2ff2f0\">这个注解：</span></p><p data-lake-id=\"u1e427746\" id=\"u1e427746\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%5Ct%40Retention(RetentionPolicy.RUNTIME)%5Cn%5Ct%40Target(%7B%7D)%5Cn%5Ct%40interface%20Filter%20%7B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20type%20of%20filter%20to%20use.%5Cn%5Ct%5Ct%20*%20%3Cp%3EDefault%20is%20%7B%40link%20FilterType%23ANNOTATION%7D.%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%20%40see%20%23pattern%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%2F%2F%E8%BF%99%E4%B8%AA%E6%98%AF%E8%A6%81%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%9A%E6%98%AF%E6%8C%89%E6%B3%A8%E8%A7%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%E8%BF%98%E6%98%AF%E6%8C%89%E7%85%A7%E7%B1%BB%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%E8%BF%98%E6%98%AF%E6%8C%89%E7%85%A7%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%5Ct%5CtFilterType%20type()%20default%20FilterType.ANNOTATION%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20Alias%20for%20%7B%40link%20%23classes%7D.%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%40AliasFor(%5C%22classes%5C%22)%5Cn%5Ct%5CtClass%3C%3F%3E%5B%5D%20value()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20class%20or%20classes%20to%20use%20as%20the%20filter.%5Cn%5Ct%5Ct%20*%20%3Cp%3EThe%20following%20table%20explains%20how%20the%20classes%20will%20be%20interpreted%5Cn%5Ct%5Ct%20*%20based%20on%20the%20configured%20value%20of%20the%20%7B%40link%20%23type%7D%20attribute.%5Cn%5Ct%5Ct%20*%20%3Ctable%20border%3D%5C%221%5C%22%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Cth%3E%7B%40code%20FilterType%7D%3C%2Fth%3E%3Cth%3EClass%20Interpreted%20As%3C%2Fth%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23ANNOTATION%20ANNOTATION%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ethe%20annotation%20itself%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23ASSIGNABLE_TYPE%20ASSIGNABLE_TYPE%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ethe%20type%20that%20detected%20components%20should%20be%20assignable%20to%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23CUSTOM%20CUSTOM%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ean%20implementation%20of%20%7B%40link%20TypeFilter%7D%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3C%2Ftable%3E%5Cn%5Ct%5Ct%20*%20%3Cp%3EWhen%20multiple%20classes%20are%20specified%2C%20%3Cem%3EOR%3C%2Fem%3E%20logic%20is%20applied%5Cn%5Ct%5Ct%20*%20%26mdash%3B%20for%20example%2C%20%5C%22include%20types%20annotated%20with%20%7B%40code%20%40Foo%7D%20OR%20%7B%40code%20%40Bar%7D%5C%22.%5Cn%5Ct%5Ct%20*%20%3Cp%3ECustom%20%7B%40link%20TypeFilter%20TypeFilters%7D%20may%20optionally%20implement%20any%20of%20the%5Cn%5Ct%5Ct%20*%20following%20%7B%40link%20org.springframework.beans.factory.Aware%20Aware%7D%20interfaces%2C%20and%5Cn%5Ct%5Ct%20*%20their%20respective%20methods%20will%20be%20called%20prior%20to%20%7B%40link%20TypeFilter%23match%20match%7D%3A%5Cn%5Ct%5Ct%20*%20%3Cul%3E%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.context.EnvironmentAware%20EnvironmentAware%7D%3C%2Fli%3E%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.beans.factory.BeanFactoryAware%20BeanFactoryAware%7D%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.beans.factory.BeanClassLoaderAware%20BeanClassLoaderAware%7D%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.context.ResourceLoaderAware%20ResourceLoaderAware%7D%5Cn%5Ct%5Ct%20*%20%3C%2Ful%3E%5Cn%5Ct%5Ct%20*%20%3Cp%3ESpecifying%20zero%20classes%20is%20permitted%20but%20will%20have%20no%20effect%20on%20component%5Cn%5Ct%5Ct%20*%20scanning.%5Cn%5Ct%5Ct%20*%20%40since%204.2%5Cn%5Ct%5Ct%20*%20%40see%20%23value%5Cn%5Ct%5Ct%20*%20%40see%20%23type%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%40AliasFor(%5C%22value%5C%22)%5Cn%5Ct%5CtClass%3C%3F%3E%5B%5D%20classes()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20pattern%20(or%20patterns)%20to%20use%20for%20the%20filter%2C%20as%20an%20alternative%5Cn%5Ct%5Ct%20*%20to%20specifying%20a%20Class%20%7B%40link%20%23value%7D.%5Cn%5Ct%5Ct%20*%20%3Cp%3EIf%20%7B%40link%20%23type%7D%20is%20set%20to%20%7B%40link%20FilterType%23ASPECTJ%20ASPECTJ%7D%2C%5Cn%5Ct%5Ct%20*%20this%20is%20an%20AspectJ%20type%20pattern%20expression.%20If%20%7B%40link%20%23type%7D%20is%5Cn%5Ct%5Ct%20*%20set%20to%20%7B%40link%20FilterType%23REGEX%20REGEX%7D%2C%20this%20is%20a%20regex%20pattern%5Cn%5Ct%5Ct%20*%20for%20the%20fully-qualified%20class%20names%20to%20match.%5Cn%5Ct%5Ct%20*%20%40see%20%23type%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5CtString%5B%5D%20pattern()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22460661b6%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22Q5g1L%22%7D\"></card><p data-lake-id=\"ua151f5e1\" id=\"ua151f5e1\"><span data-lake-id=\"uc16453d1\" id=\"uc16453d1\">这个时候，我们就可以这样来配置：</span></p><p data-lake-id=\"uc66f5fe7\" id=\"uc66f5fe7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CexcludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%2CService.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E6%8E%92%E9%99%A4%E6%8E%89%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2Cclasses%20%3D%20%7BController.class%2CService.class%7D)%5Cn%7D)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229c6c049a%22%7D\"></card><p data-lake-id=\"uc18607c0\" id=\"uc18607c0\"><br></p><p data-lake-id=\"uf74f0733\" id=\"uf74f0733\"><span data-lake-id=\"u6e2498d2\" id=\"u6e2498d2\">我们再来测试一下：</span></p><p data-lake-id=\"u3263ee3d\" id=\"u3263ee3d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20IOCTest%20%7B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2233a42374%22%7D\"></card><p data-lake-id=\"ua9f9be36\" id=\"ua9f9be36\"><br></p><p data-lake-id=\"u7260af83\" id=\"u7260af83\"><span data-lake-id=\"u99b1780a\" id=\"u99b1780a\">这个时候的测试结果如下：这个时候，bookService、bookController 这两个组件就已经被排除掉了，不再被 IOC 容器给管理：</span></p><p data-lake-id=\"u6658f216\" id=\"u6658f216\"><br></p><blockquote data-lake-id=\"uade0c37d\" id=\"uade0c37d\"><p data-lake-id=\"uf147bb12\" id=\"uf147bb12\"><span data-lake-id=\"u48c32962\" id=\"u48c32962\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ud664212d\" id=\"ud664212d\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u01b69412\" id=\"u01b69412\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u4db7ec82\" id=\"u4db7ec82\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ufb6f014f\" id=\"ufb6f014f\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u4d545e87\" id=\"u4d545e87\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u4475866f\" id=\"u4475866f\">mainConfig<br /></span><span data-lake-id=\"uce094e82\" id=\"uce094e82\">bookDao<br /></span><span data-lake-id=\"ud455b20d\" id=\"ud455b20d\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22GAyCS%22%7D\"></card><p data-lake-id=\"uf23f32c9\" id=\"uf23f32c9\"><span data-lake-id=\"ubae24dda\" id=\"ubae24dda\">我们也可以来配置</span><strong><span data-lake-id=\"u55665cea\" id=\"u55665cea\">includeFilters</span></strong><span data-lake-id=\"ue2af2d6e\" id=\"ue2af2d6e\">：指定在扫描的时候，只需要包含哪些组件<br /></span><span data-lake-id=\"uc2700395\" id=\"uc2700395\">在用 xml 文件配置的方式来进行配置的时候，还要禁用掉默认的配置规则，只包含哪些组件的配置才能生效</span></p><p data-lake-id=\"u8806fdf3\" id=\"u8806fdf3\"><br></p><blockquote data-lake-id=\"u40022528\" id=\"u40022528\"><p data-lake-id=\"uf2a1c841\" id=\"uf2a1c841\"><span data-lake-id=\"u7d261cac\" id=\"u7d261cac\">&lt;context:</span><a href=\"https://so.csdn.net/so/search?q=component&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"ub7b62c0a\" id=\"ub7b62c0a\"><span data-lake-id=\"u8f5b9bc3\" id=\"u8f5b9bc3\">component</span></a><span data-lake-id=\"ub61d715b\" id=\"ub61d715b\">-scan base-package=“com.ldc” use-default-filters=“false”/&gt;</span></p></blockquote><p data-lake-id=\"ud512a2b7\" id=\"ud512a2b7\"><br></p><p data-lake-id=\"u822fcd90\" id=\"u822fcd90\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F20190110203227264.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1158%2C%22originHeight%22%3A397%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22qJpvy%22%7D\"></card></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22M83lV%22%7D\"></card><p data-lake-id=\"u9550a3d4\" id=\"u9550a3d4\"><span data-lake-id=\"ubc2b6d10\" id=\"ubc2b6d10\">这个时候，我们就可以这样来写：</span></p><p data-lake-id=\"ue610a833\" id=\"ue610a833\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%7D%2CuseDefaultFilters%20%3D%20false)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22fa84313e%22%7D\"></card><p data-lake-id=\"ub71b0c6d\" id=\"ub71b0c6d\"><br></p><p data-lake-id=\"u544fe53a\" id=\"u544fe53a\"><span data-lake-id=\"ua08e656d\" id=\"ua08e656d\">测试类：</span></p><p data-lake-id=\"u4f77ddf5\" id=\"u4f77ddf5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20IOCTest%20%7B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2233a42374-1%22%7D\"></card><p data-lake-id=\"uaceada5d\" id=\"uaceada5d\"><br></p><p data-lake-id=\"uc19192c4\" id=\"uc19192c4\"><span data-lake-id=\"u0d9e4b1f\" id=\"u0d9e4b1f\">这个时候，测试结果如下：这个时候是按照标有注解来进行包含的，现在就只有一个 bookController 被纳入到 IOC 容器进行管理</span></p><p data-lake-id=\"u1581840e\" id=\"u1581840e\"><br></p><blockquote data-lake-id=\"uf44276bb\" id=\"uf44276bb\"><p data-lake-id=\"ua8672c78\" id=\"ua8672c78\"><span data-lake-id=\"u9bf220f3\" id=\"u9bf220f3\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u0236b592\" id=\"u0236b592\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"ubf218e2d\" id=\"ubf218e2d\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"uc5713154\" id=\"uc5713154\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ua4b1d1c3\" id=\"ua4b1d1c3\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"ue7e7b533\" id=\"ue7e7b533\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u630a783e\" id=\"u630a783e\">mainConfig<br /></span><span data-lake-id=\"u5b427973\" id=\"u5b427973\">bookController<br /></span><span data-lake-id=\"u0e2818d1\" id=\"u0e2818d1\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22cQpgu%22%7D\"></card><p data-lake-id=\"u01d66530\" id=\"u01d66530\"><code data-lake-id=\"u1a3e052f\" id=\"u1a3e052f\"><span data-lake-id=\"u5303ce9e\" id=\"u5303ce9e\">@ComponentScan</span></code><span data-lake-id=\"u56e200f2\" id=\"u56e200f2\">这个注解是可以重复定义的：来指定不同的扫描策略<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F2019011020395423.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1042%2C%22originHeight%22%3A696%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22IAyjq%22%7D\"></card></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22P2k68%22%7D\"></card><p data-lake-id=\"uebe34671\" id=\"uebe34671\"><span data-lake-id=\"u953c5be5\" id=\"u953c5be5\">我们还可以用 </span><code data-lake-id=\"u2b96cabf\" id=\"u2b96cabf\"><span data-lake-id=\"u245941ce\" id=\"u245941ce\">@ComponentScans</span></code><span data-lake-id=\"u02445ae3\" id=\"u02445ae3\">来定义多个扫描规则：里面是</span><code data-lake-id=\"uad455bad\" id=\"uad455bad\"><span data-lake-id=\"u201270c7\" id=\"u201270c7\">@ComponentScan</span></code><span data-lake-id=\"u9c90e582\" id=\"u9c90e582\">规则的数组</span></p><p data-lake-id=\"u5c794ebc\" id=\"u5c794ebc\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%2C%5Cn%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%5Cn%7D)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22bb064102%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22PQiC7%22%7D\"></card><p data-lake-id=\"u89426cfa\" id=\"u89426cfa\"><span data-lake-id=\"uf066168b\" id=\"uf066168b\">也可以直接这样来配置多个</span><code data-lake-id=\"u02bfcd23\" id=\"u02bfcd23\"><span data-lake-id=\"u11b488e0\" id=\"u11b488e0\">@ComponentScan</span></code><span data-lake-id=\"u19e86018\" id=\"u19e86018\">注解：</span><strong><span data-lake-id=\"u64cc83d4\" id=\"u64cc83d4\">但是这样写的话，就必须要 java8 及以上的支持</span></strong></p><p data-lake-id=\"u817823b5\" id=\"u817823b5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22b2dc07cf%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22wswTa%22%7D\"></card><h1 data-lake-id=\"3acd5314\" id=\"3acd5314\"><span data-lake-id=\"ue7aff2a7\" id=\"ue7aff2a7\">3 组件注册 - 自定义 TypeFilter 指定过滤规则</span></h1><p data-lake-id=\"ua25b822c\" id=\"ua25b822c\"><br></p><p data-lake-id=\"uc2996372\" id=\"uc2996372\"><span data-lake-id=\"uc595f53c\" id=\"uc595f53c\">我们可以来看看有哪几种过滤规则：</span></p><p data-lake-id=\"u55b7327f\" id=\"u55b7327f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20enum%20FilterType%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20marked%20with%20a%20given%20annotation.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AnnotationTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtANNOTATION%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20assignable%20to%20a%20given%20type.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AssignableTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtASSIGNABLE_TYPE%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20matching%20a%20given%20AspectJ%20type%20pattern%20expression.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AspectJTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtASPECTJ%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20matching%20a%20given%20regex%20pattern.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.RegexPatternTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtREGEX%2C%5Cn%5Cn%5Ct%2F**%20Filter%20candidates%20using%20a%20given%20custom%5Cn%5Ct%20*%20%7B%40link%20org.springframework.core.type.filter.TypeFilter%7D%20implementation.%5Cn%5Ct%20*%2F%5Cn%5CtCUSTOM%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22c034a4a1%22%7D\"></card><p data-lake-id=\"u05490af5\" id=\"u05490af5\"><br></p><p data-lake-id=\"ubc60058c\" id=\"ubc60058c\"><span data-lake-id=\"u1d700d3b\" id=\"u1d700d3b\">我们可以这样来匹配，来指定不同的匹配规则：</span></p><p data-lake-id=\"ubc573145\" id=\"ubc573145\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20FilterType.ANNOTATION%20%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20FilterType.ASSIGNABLE_TYPE%20%E6%8C%89%E7%85%A7%E7%BB%99%E5%AE%9A%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8C%89%E7%85%A7%E7%BB%99%E5%AE%9A%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ASSIGNABLE_TYPE%2C%20classes%20%3D%20%7BBookService.class%7D)%5Cn%20%20%20%20%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%7D)%5Cn%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22a1516301%22%7D\"></card><p data-lake-id=\"ua6545077\" id=\"ua6545077\"><br></p><p data-lake-id=\"u85bc4533\" id=\"u85bc4533\"><span data-lake-id=\"u5c05e870\" id=\"u5c05e870\">测试结果如下：</span></p><p data-lake-id=\"u40fc9b83\" id=\"u40fc9b83\"><br></p><blockquote data-lake-id=\"ub31c227b\" id=\"ub31c227b\"><p data-lake-id=\"udd26a860\" id=\"udd26a860\"><span data-lake-id=\"uc45681cc\" id=\"uc45681cc\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u16753483\" id=\"u16753483\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u68fd3180\" id=\"u68fd3180\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"ud223a3de\" id=\"ud223a3de\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u726f10a2\" id=\"u726f10a2\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"ufd28cb90\" id=\"ufd28cb90\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u59fa87d1\" id=\"u59fa87d1\">mainConfig<br /></span><span data-lake-id=\"uf0ff78b8\" id=\"uf0ff78b8\">bookController<br /></span><span data-lake-id=\"u60832a4f\" id=\"u60832a4f\">bookService<br /></span><span data-lake-id=\"u11032fc7\" id=\"u11032fc7\">person</span></p></blockquote><p data-lake-id=\"uba888c51\" id=\"uba888c51\"><br></p><p data-lake-id=\"ub80dfe75\" id=\"ub80dfe75\"><span data-lake-id=\"u7a9f91cf\" id=\"u7a9f91cf\">bookService 组件又重新的被 IOC 容器给管理了；</span></p><p data-lake-id=\"u6598fdab\" id=\"u6598fdab\"><br></p><p data-lake-id=\"ue7eccaf7\" id=\"ue7eccaf7\"><span data-lake-id=\"u6428cf27\" id=\"u6428cf27\">下面的这两种是我们最常用的匹配规则：</span></p><p data-lake-id=\"u9c6952da\" id=\"u9c6952da\"><br></p><blockquote data-lake-id=\"u988f23c2\" id=\"u988f23c2\"><p data-lake-id=\"ua143b773\" id=\"ua143b773\"><span data-lake-id=\"uab302150\" id=\"uab302150\">FilterType.ANNOTATION 按照注解来进行匹配<br /></span><span data-lake-id=\"u9b8b61cd\" id=\"u9b8b61cd\">FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22jQS5P%22%7D\"></card><p data-lake-id=\"ucdd864a4\" id=\"ucdd864a4\"><span data-lake-id=\"u0ca120d6\" id=\"u0ca120d6\">我们还可以来写上一个 </span><code data-lake-id=\"u767b985e\" id=\"u767b985e\"><span data-lake-id=\"u7eeb04a6\" id=\"u7eeb04a6\">FilterType.ASPECTJ</span></code><span data-lake-id=\"udbf08299\" id=\"udbf08299\">表达式来进行匹配，这个不常用；<br /></span><span data-lake-id=\"uddfffd13\" id=\"uddfffd13\">我们也可以按照正则表达式</span><code data-lake-id=\"ucfd8fd11\" id=\"ucfd8fd11\"><span data-lake-id=\"u1615f1eb\" id=\"u1615f1eb\">FilterType.REGEX</span></code><span data-lake-id=\"u5c1c8706\" id=\"u5c1c8706\">的方式来进行匹配：</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22rBIi6%22%7D\"></card><p data-lake-id=\"ube08dda2\" id=\"ube08dda2\"><span data-lake-id=\"uaada9977\" id=\"uaada9977\">我们来说说最后一种：自定义匹配规则</span><code data-lake-id=\"uc4f173e0\" id=\"uc4f173e0\"><span data-lake-id=\"ueb9951a0\" id=\"ueb9951a0\">FilterType.CUSTOM</span></code></p><p data-lake-id=\"u73c4967e\" id=\"u73c4967e\"><br></p><p data-lake-id=\"ufe52f294\" id=\"ufe52f294\"><span data-lake-id=\"u4fb1d7ab\" id=\"u4fb1d7ab\">我们可以自己来写一个匹配规则的类：MyTypeFilter，这个类要实现 TypeFilter 这个接口</span></p><p data-lake-id=\"ua5d91c3f\" id=\"ua5d91c3f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MyTypeFilter%20implements%20TypeFilter%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20metadataReader%20%20the%20metadata%20reader%20for%20the%20target%20class%20%E8%AF%BB%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40param%20metadataReaderFactory%20a%20factory%20for%20obtaining%20metadata%20readers%20%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E5%85%B6%E4%BB%96%E4%BB%BB%E4%BD%95%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%20%40throws%20IOException%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20match(MetadataReader%20metadataReader%2C%20MetadataReaderFactory%20metadataReaderFactory)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E7%B1%BB%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20AnnotationMetadata%20annotationMetadata%20%3D%20metadataReader.getAnnotationMetadata()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%B1%BB%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%88%E6%AF%94%E5%A6%82%E7%B1%BB%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%89%5Cn%20%20%20%20%20%20%20%20Resource%20resource%20%3D%20metadataReader.getResource()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ClassMetadata%20classMetadata%20%3D%20metadataReader.getClassMetadata()%3B%5Cn%20%20%20%20%20%20%20%20String%20className%20%3D%20classMetadata.getClassName()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99---%3E%5C%22%2BclassName)%3B%5Cn%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2246aa1153%22%7D\"></card><p data-lake-id=\"uee53bdad\" id=\"uee53bdad\"><br></p><p data-lake-id=\"u3bca8812\" id=\"u3bca8812\"><span data-lake-id=\"ubddbcd2d\" id=\"ubddbcd2d\">这个时候，我们就可以这样来用了：使用</span><code data-lake-id=\"ud388a3b8\" id=\"ud388a3b8\"><span data-lake-id=\"ub4356de2\" id=\"ub4356de2\">FilterType.CUSTOM</span></code></p><p data-lake-id=\"u7ab08034\" id=\"u7ab08034\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%B9%E9%85%8D%E7%9A%84%E8%A7%84%E5%88%99%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.CUSTOM%2C%20classes%20%3D%20%7BMyTypeFilter.class%7D)%5Cn%20%20%20%20%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%7D)%5Cn%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d97f9a91%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22rFTOZ%22%7D\"></card><p data-lake-id=\"uc595b5f6\" id=\"uc595b5f6\"><span data-lake-id=\"udd4b4b5d\" id=\"udd4b4b5d\">现在的测试结果如下:</span></p><p data-lake-id=\"u9d5544cc\" id=\"u9d5544cc\"><br></p><blockquote data-lake-id=\"u8526161a\" id=\"u8526161a\"><p data-lake-id=\"u978a2209\" id=\"u978a2209\"><span data-lake-id=\"u49d73dca\" id=\"u49d73dca\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span data-lake-id=\"ud3235972\" id=\"ud3235972\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span data-lake-id=\"u48485ad0\" id=\"u48485ad0\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span data-lake-id=\"u6f4335cb\" id=\"u6f4335cb\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span data-lake-id=\"u500f4933\" id=\"u500f4933\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span data-lake-id=\"u65ce1365\" id=\"u65ce1365\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span data-lake-id=\"uf87b92a5\" id=\"uf87b92a5\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span data-lake-id=\"u774929d7\" id=\"u774929d7\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u7862288b\" id=\"u7862288b\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"uffad3dfa\" id=\"uffad3dfa\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u18db6a16\" id=\"u18db6a16\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ue1257718\" id=\"ue1257718\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u76eac19a\" id=\"u76eac19a\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"uf4cf5384\" id=\"uf4cf5384\">mainConfig<br /></span><span data-lake-id=\"u81976b9a\" id=\"u81976b9a\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22ukfcZ%22%7D\"></card><p data-lake-id=\"u8484c4a1\" id=\"u8484c4a1\"><span data-lake-id=\"udf4a22e3\" id=\"udf4a22e3\">由于，我的自定义的规则类里面返回的是 false，所有一个都没有匹配到；<br /></span><span data-lake-id=\"ucd64378b\" id=\"ucd64378b\">我们可以这样来修改一下，让 clsssName 里面包含 “er” 的组件给匹配到：</span></p><p data-lake-id=\"uca4d843d\" id=\"uca4d843d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MyTypeFilter%20implements%20TypeFilter%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20metadataReader%20%20the%20metadata%20reader%20for%20the%20target%20class%20%E8%AF%BB%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40param%20metadataReaderFactory%20a%20factory%20for%20obtaining%20metadata%20readers%20%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E5%85%B6%E4%BB%96%E4%BB%BB%E4%BD%95%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%20%40throws%20IOException%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20match(MetadataReader%20metadataReader%2C%20MetadataReaderFactory%20metadataReaderFactory)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E7%B1%BB%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20AnnotationMetadata%20annotationMetadata%20%3D%20metadataReader.getAnnotationMetadata()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%B1%BB%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%88%E6%AF%94%E5%A6%82%E7%B1%BB%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%89%5Cn%20%20%20%20%20%20%20%20Resource%20resource%20%3D%20metadataReader.getResource()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ClassMetadata%20classMetadata%20%3D%20metadataReader.getClassMetadata()%3B%5Cn%20%20%20%20%20%20%20%20String%20className%20%3D%20classMetadata.getClassName()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99---%3E%5C%22%2BclassName)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(className.contains(%5C%22er%5C%22))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2202c79804%22%7D\"></card><p data-lake-id=\"u59dc7f61\" id=\"u59dc7f61\"><br></p><blockquote data-lake-id=\"ubc674ca8\" id=\"ubc674ca8\"><p data-lake-id=\"u63f8e1df\" id=\"u63f8e1df\"><span data-lake-id=\"u88f6a116\" id=\"u88f6a116\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span data-lake-id=\"u24b3da0a\" id=\"u24b3da0a\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span data-lake-id=\"u8acae41c\" id=\"u8acae41c\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span data-lake-id=\"u7972e5e5\" id=\"u7972e5e5\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span data-lake-id=\"uc9eca444\" id=\"uc9eca444\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span data-lake-id=\"uf552753f\" id=\"uf552753f\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span data-lake-id=\"ucc789304\" id=\"ucc789304\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span data-lake-id=\"u643aaba6\" id=\"u643aaba6\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ue65cdbb4\" id=\"ue65cdbb4\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u26603f84\" id=\"u26603f84\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u21c4491c\" id=\"u21c4491c\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u4dd6d491\" id=\"u4dd6d491\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"uc43cd389\" id=\"uc43cd389\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u65b39bbb\" id=\"u65b39bbb\">mainConfig<br /></span><span data-lake-id=\"u05347932\" id=\"u05347932\">person<br /></span><span data-lake-id=\"uee54c8fd\" id=\"uee54c8fd\">myTypeFilter<br /></span><span data-lake-id=\"u11709977\" id=\"u11709977\">bookController<br /></span><span data-lake-id=\"uf82b47fe\" id=\"uf82b47fe\">bookService</span></p></blockquote><p data-lake-id=\"u0c2d97ba\" id=\"u0c2d97ba\"><br></p><p data-lake-id=\"uf49190ab\" id=\"uf49190ab\"><span data-lake-id=\"u8cbcce0a\" id=\"u8cbcce0a\">这个时候，包含 “er” 的组件就给添加到了 IOC 容器中了；只要在包扫描里面的包里面的每一个类都会进入到这个自定义的匹配规则进行匹配；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22VkY7q%22%7D\"></card><h1 data-lake-id=\"fd2a4202\" id=\"fd2a4202\"><span data-lake-id=\"uec6b369b\" id=\"uec6b369b\">4 组件注册 -</span><code data-lake-id=\"u8c7b7947\" id=\"u8c7b7947\"><span data-lake-id=\"ub485a35f\" id=\"ub485a35f\">@Scope</span></code><span data-lake-id=\"ud9adcab4\" id=\"ud9adcab4\">-设置组件</span><a href=\"https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"uddf51e06\" id=\"uddf51e06\"><span data-lake-id=\"ud446527a\" id=\"ud446527a\">作用域</span></a></h1><p data-lake-id=\"u6ac8d314\" id=\"u6ac8d314\"><br></p><p data-lake-id=\"u160196f0\" id=\"u160196f0\"><span data-lake-id=\"ub5c5c7c0\" id=\"ub5c5c7c0\">首先有一个配置类：</span></p><p data-lake-id=\"uc6834431\" id=\"uc6834431\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2225bbde69%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22CB6RU%22%7D\"></card><p data-lake-id=\"u8aa22ea0\" id=\"u8aa22ea0\"><span data-lake-id=\"u92253ed2\" id=\"u92253ed2\">测试方法：</span></p><p data-lake-id=\"u3eb903eb\" id=\"u3eb903eb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person2%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person1%3D%3Dperson2)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229915a1fa%22%7D\"></card><p data-lake-id=\"u508de0fa\" id=\"u508de0fa\"><br></p><p data-lake-id=\"ua8338046\" id=\"ua8338046\"><span data-lake-id=\"ub7c9704d\" id=\"ub7c9704d\">测试结果如下：</span></p><p data-lake-id=\"ue79bcf59\" id=\"ue79bcf59\"><br></p><blockquote data-lake-id=\"u6a5b5d6f\" id=\"u6a5b5d6f\"><p data-lake-id=\"udb63e894\" id=\"udb63e894\"><span data-lake-id=\"ub04a7859\" id=\"ub04a7859\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u267e5d25\" id=\"u267e5d25\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"ub3ab7225\" id=\"ub3ab7225\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u07f896b8\" id=\"u07f896b8\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u55ae35a3\" id=\"u55ae35a3\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"uffccb5e4\" id=\"uffccb5e4\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"ub596ca17\" id=\"ub596ca17\">mainConfig2<br /></span><span data-lake-id=\"u066d527f\" id=\"u066d527f\">person<br /></span><span data-lake-id=\"u24100be8\" id=\"u24100be8\">true</span></p></blockquote><p data-lake-id=\"uc96fbaf0\" id=\"uc96fbaf0\"><br></p><p data-lake-id=\"ud3e8da84\" id=\"ud3e8da84\"><span data-lake-id=\"u8976d106\" id=\"u8976d106\">说明这个 bean 的实例是单例的；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22Fcxnv%22%7D\"></card><p data-lake-id=\"u5f5bd1db\" id=\"u5f5bd1db\"><span data-lake-id=\"u14078db5\" id=\"u14078db5\">我们可以用</span><code data-lake-id=\"u33630520\" id=\"u33630520\"><span data-lake-id=\"u66445ae1\" id=\"u66445ae1\">@Scope</span></code><span data-lake-id=\"u4d6bdcb9\" id=\"u4d6bdcb9\">这个注解来指定作用域的范围：这个就相当于在 xml 文件中配置的</span><code data-lake-id=\"u0c4b22c3\" id=\"u0c4b22c3\"><span data-lake-id=\"ubf56fbe2\" id=\"ubf56fbe2\">&lt;bean&gt;</span></code><span data-lake-id=\"uff1e0fda\" id=\"uff1e0fda\">标签里面指定</span><a href=\"https://so.csdn.net/so/search?q=scope&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"u76b2eccf\" id=\"u76b2eccf\"><span data-lake-id=\"ufae3da77\" id=\"ufae3da77\">scope</span></a><span data-lake-id=\"u1d98a2c6\" id=\"u1d98a2c6\">\\=“prototype” 属性；</span></p><p data-lake-id=\"u1fa4ab21\" id=\"u1fa4ab21\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Target(%7BElementType.TYPE%2C%20ElementType.METHOD%7D)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Documented%5Cnpublic%20%40interface%20Scope%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Alias%20for%20%7B%40link%20%23scopeName%7D.%5Cn%5Ct%20*%20%40see%20%23scopeName%5Cn%5Ct%20*%2F%5Cn%5Ct%40AliasFor(%5C%22scopeName%5C%22)%5Cn%5CtString%20value()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Specifies%20the%20name%20of%20the%20scope%20to%20use%20for%20the%20annotated%20component%2Fbean.%5Cn%5Ct%20*%20%3Cp%3EDefaults%20to%20an%20empty%20string%20(%7B%40code%20%5C%22%5C%22%7D)%20which%20implies%5Cn%5Ct%20*%20%7B%40link%20ConfigurableBeanFactory%23SCOPE_SINGLETON%20SCOPE_SINGLETON%7D.%5Cn%5Ct%20*%20%40since%204.2%5Cn%5Ct%20*%20%40see%20ConfigurableBeanFactory%23SCOPE_PROTOTYPE%5Cn%5Ct%20*%20%40see%20ConfigurableBeanFactory%23SCOPE_SINGLETON%5Cn%5Ct%20*%20%40see%20org.springframework.web.context.WebApplicationContext%23SCOPE_REQUEST%5Cn%5Ct%20*%20%40see%20org.springframework.web.context.WebApplicationContext%23SCOPE_SESSION%5Cn%5Ct%20*%20%40see%20%23value%5Cn%5Ct%20*%2F%5Cn%5Ct%40AliasFor(%5C%22value%5C%22)%5Cn%5CtString%20scopeName()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Specifies%20whether%20a%20component%20should%20be%20configured%20as%20a%20scoped%20proxy%5Cn%5Ct%20*%20and%20if%20so%2C%20whether%20the%20proxy%20should%20be%20interface-based%20or%20subclass-based.%5Cn%5Ct%20*%20%3Cp%3EDefaults%20to%20%7B%40link%20ScopedProxyMode%23DEFAULT%7D%2C%20which%20typically%20indicates%5Cn%5Ct%20*%20that%20no%20scoped%20proxy%20should%20be%20created%20unless%20a%20different%20default%5Cn%5Ct%20*%20has%20been%20configured%20at%20the%20component-scan%20instruction%20level.%5Cn%5Ct%20*%20%3Cp%3EAnalogous%20to%20%7B%40code%20%3Caop%3Ascoped-proxy%2F%3E%7D%20support%20in%20Spring%20XML.%5Cn%5Ct%20*%20%40see%20ScopedProxyMode%5Cn%5Ct%20*%2F%5Cn%5CtScopedProxyMode%20proxyMode()%20default%20ScopedProxyMode.DEFAULT%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227eee35a7%22%7D\"></card><p data-lake-id=\"ua283c6d6\" id=\"ua283c6d6\"><br></p><p data-lake-id=\"u7023ed07\" id=\"u7023ed07\"><span data-lake-id=\"uf60f974e\" id=\"uf60f974e\">从源码的注释上，我们可以知道 scopeName 可以取下面这些值：</span><strong><span data-lake-id=\"ud316e720\" id=\"ud316e720\">前两个用的比较多，我们就来看看前面两个可以取的值</span></strong></p><p data-lake-id=\"u07b4f0c3\" id=\"u07b4f0c3\"><br></p><blockquote data-lake-id=\"ua9502aa0\" id=\"ua9502aa0\"><p data-lake-id=\"ue3ef2307\" id=\"ue3ef2307\"><span data-lake-id=\"u1178808e\" id=\"u1178808e\">ConfigurableBeanFactory#SCOPE_PROTOTYPE<br /></span><span data-lake-id=\"u1e717f2b\" id=\"u1e717f2b\">ConfigurableBeanFactory#SCOPE_SINGLETON<br /></span><span data-lake-id=\"u1f069b0b\" id=\"u1f069b0b\">org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST<br /></span><span data-lake-id=\"uafca51f8\" id=\"uafca51f8\">org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</span></p></blockquote><p data-lake-id=\"u491beabc\" id=\"u491beabc\"><br></p><p data-lake-id=\"uefbddfa2\" id=\"uefbddfa2\"><span data-lake-id=\"ua8e8f59c\" id=\"ua8e8f59c\">我们可以点到 ConfigurableBeanFactory 接口去看一下：</span></p><p data-lake-id=\"ud899e444\" id=\"ud899e444\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20interface%20ConfigurableBeanFactory%20extends%20HierarchicalBeanFactory%2C%20SingletonBeanRegistry%20%7B%5Cn%20%20%20%20String%20SCOPE_SINGLETON%20%3D%20%5C%22singleton%5C%22%3B%5Cn%20%20%20%20String%20SCOPE_PROTOTYPE%20%3D%20%5C%22prototype%5C%22%3B%5Cn%5Cn%20%20%20%20void%20setParentBeanFactory(BeanFactory%20var1)%20throws%20IllegalStateException%3B%5Cn%5Cn%20%20%20%20void%20setBeanClassLoader(ClassLoader%20var1)%3B%5Cn%5Cn%20%20%20%20ClassLoader%20getBeanClassLoader()%3B%5Cn%5Cn%20%20%20%20void%20setTempClassLoader(ClassLoader%20var1)%3B%5Cn%5Cn%20%20%20%20ClassLoader%20getTempClassLoader()%3B%5Cn%5Cn%20%20%20%20void%20setCacheBeanMetadata(boolean%20var1)%3B%5Cn%5Cn%20%20%20%20boolean%20isCacheBeanMetadata()%3B%5Cn%5Cn%20%20%20%20void%20setBeanExpressionResolver(BeanExpressionResolver%20var1)%3B%5Cn%5Cn%20%20%20%20BeanExpressionResolver%20getBeanExpressionResolver()%3B%5Cn%5Cn%20%20%20%20void%20setConversionService(ConversionService%20var1)%3B%5Cn%5Cn%20%20%20%20ConversionService%20getConversionService()%3B%5Cn%5Cn%20%20%20%20void%20addPropertyEditorRegistrar(PropertyEditorRegistrar%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerCustomEditor(Class%3C%3F%3E%20var1%2C%20Class%3C%3F%20extends%20PropertyEditor%3E%20var2)%3B%5Cn%5Cn%20%20%20%20void%20copyRegisteredEditorsTo(PropertyEditorRegistry%20var1)%3B%5Cn%5Cn%20%20%20%20void%20setTypeConverter(TypeConverter%20var1)%3B%5Cn%5Cn%20%20%20%20TypeConverter%20getTypeConverter()%3B%5Cn%5Cn%20%20%20%20void%20addEmbeddedValueResolver(StringValueResolver%20var1)%3B%5Cn%5Cn%20%20%20%20boolean%20hasEmbeddedValueResolver()%3B%5Cn%5Cn%20%20%20%20String%20resolveEmbeddedValue(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20addBeanPostProcessor(BeanPostProcessor%20var1)%3B%5Cn%5Cn%20%20%20%20int%20getBeanPostProcessorCount()%3B%5Cn%5Cn%20%20%20%20void%20registerScope(String%20var1%2C%20Scope%20var2)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getRegisteredScopeNames()%3B%5Cn%5Cn%20%20%20%20Scope%20getRegisteredScope(String%20var1)%3B%5Cn%5Cn%20%20%20%20AccessControlContext%20getAccessControlContext()%3B%5Cn%5Cn%20%20%20%20void%20copyConfigurationFrom(ConfigurableBeanFactory%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerAlias(String%20var1%2C%20String%20var2)%20throws%20BeanDefinitionStoreException%3B%5Cn%5Cn%20%20%20%20void%20resolveAliases(StringValueResolver%20var1)%3B%5Cn%5Cn%20%20%20%20BeanDefinition%20getMergedBeanDefinition(String%20var1)%20throws%20NoSuchBeanDefinitionException%3B%5Cn%5Cn%20%20%20%20boolean%20isFactoryBean(String%20var1)%20throws%20NoSuchBeanDefinitionException%3B%5Cn%5Cn%20%20%20%20void%20setCurrentlyInCreation(String%20var1%2C%20boolean%20var2)%3B%5Cn%5Cn%20%20%20%20boolean%20isCurrentlyInCreation(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerDependentBean(String%20var1%2C%20String%20var2)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getDependentBeans(String%20var1)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getDependenciesForBean(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20destroyBean(String%20var1%2C%20Object%20var2)%3B%5Cn%5Cn%20%20%20%20void%20destroyScopedBean(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20destroySingletons()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220226488e%22%7D\"></card><p data-lake-id=\"u0be28110\" id=\"u0be28110\"><br></p><p data-lake-id=\"ub3b55624\" id=\"ub3b55624\"><span data-lake-id=\"u7f32b452\" id=\"u7f32b452\">我们来指定一个多实例的：</span></p><p data-lake-id=\"u92b24b1a\" id=\"u92b24b1a\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%20%20%20%20%2F%2Fsingleton%3A%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%2F%2Fprototype%3A%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%2F%2Frequest%3A%E5%90%8C%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%2F%2Fsession%3A%E5%90%8C%E4%B8%80%E4%B8%AAsession%E5%88%9B%E5%BB%BA%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%40Scope(%5C%22prototype%5C%22)%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2207d68492%22%7D\"></card><p data-lake-id=\"u9acb702f\" id=\"u9acb702f\"><br></p><p data-lake-id=\"ud1b980d0\" id=\"ud1b980d0\"><span data-lake-id=\"u829f1b16\" id=\"u829f1b16\">现在，我们再来测试一次：</span></p><p data-lake-id=\"u903eebc3\" id=\"u903eebc3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person2%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person1%3D%3Dperson2)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229915a1fa-1%22%7D\"></card><p data-lake-id=\"ub2114ec6\" id=\"ub2114ec6\"><br></p><p data-lake-id=\"u414ff8e5\" id=\"u414ff8e5\"><span data-lake-id=\"ud9ce09be\" id=\"ud9ce09be\">这个时候的测试结果如下：</span></p><p data-lake-id=\"u25841726\" id=\"u25841726\"><br></p><blockquote data-lake-id=\"u9ddca6bd\" id=\"u9ddca6bd\"><p data-lake-id=\"u3d8bd106\" id=\"u3d8bd106\"><span data-lake-id=\"ud4a61811\" id=\"ud4a61811\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ub35e399f\" id=\"ub35e399f\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u73ad7afa\" id=\"u73ad7afa\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u62f4044b\" id=\"u62f4044b\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u121d329f\" id=\"u121d329f\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u7f149fba\" id=\"u7f149fba\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"ufb25e8df\" id=\"ufb25e8df\">mainConfig2<br /></span><span data-lake-id=\"u412a3b8f\" id=\"u412a3b8f\">person<br /></span><span data-lake-id=\"u5b3d5112\" id=\"u5b3d5112\">false</span></p></blockquote><p data-lake-id=\"u2f62c9b1\" id=\"u2f62c9b1\"><br></p><p data-lake-id=\"ub867c932\" id=\"ub867c932\"><span data-lake-id=\"ue13371b4\" id=\"ue13371b4\">这个时候，bean 的实例就多实例的，每调用一次 getBean() 方法就会创建一个实例；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22uv2Wz%22%7D\"></card><p data-lake-id=\"u00ff5003\" id=\"u00ff5003\"><span data-lake-id=\"ue6183a23\" id=\"ue6183a23\">我们来看看当 bean 的作用域为单例的时候，它在 IOC 容器中是何时创建的：</span></p><p data-lake-id=\"u57426488\" id=\"u57426488\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%20%20%20%20%5Cn%20%20%20%20%40Scope%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%BB%99IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0Person...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%222920535c%22%7D\"></card><p data-lake-id=\"u91649e27\" id=\"u91649e27\"><br></p><p data-lake-id=\"uabb59a1f\" id=\"uabb59a1f\"><span data-lake-id=\"ubd58ce8a\" id=\"ubd58ce8a\">首先，我们先启动 IOC 容器，但是不调用 getBean 方法来获取 Person 实例：</span></p><p data-lake-id=\"u95dab8ae\" id=\"u95dab8ae\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2274c44b71%22%7D\"></card><p data-lake-id=\"u268f16f2\" id=\"u268f16f2\"><br></p><p data-lake-id=\"u78b0e9d9\" id=\"u78b0e9d9\"><span data-lake-id=\"u62fa6618\" id=\"u62fa6618\">测试结果如下：</span></p><p data-lake-id=\"u412ad985\" id=\"u412ad985\"><br></p><blockquote data-lake-id=\"u5b07b414\" id=\"u5b07b414\"><p data-lake-id=\"u2ab42a54\" id=\"u2ab42a54\"><span data-lake-id=\"u372fc05e\" id=\"u372fc05e\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"u5c2c9c3b\" id=\"u5c2c9c3b\"><br></p><p data-lake-id=\"u5c555732\" id=\"u5c555732\"><span data-lake-id=\"u86f44bd3\" id=\"u86f44bd3\">这个时候，我们就可以发现，当作用域为单例的时候，IOC 容器在启动的时候，就会将容器中所有作用域为单例的 bean 的实例给创建出来；以后的每次获取，就直接从 IOC 容器中来获取，相当于是从 map.get() 的一个过程；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22sDFha%22%7D\"></card><p data-lake-id=\"u64fa7f9a\" id=\"u64fa7f9a\"><span data-lake-id=\"u2e3f8614\" id=\"u2e3f8614\">然而，当我们的 bean 的作用域改成多实例的时候，我们再看看结果：</span></p><p data-lake-id=\"u7dbe6cd2\" id=\"u7dbe6cd2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%5Cn%20%20%20%20%40Scope(%5C%22prototype%5C%22)%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%BB%99IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0Person...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227ea2c77f%22%7D\"></card><p data-lake-id=\"ua212fdba\" id=\"ua212fdba\"><br></p><p data-lake-id=\"u2e5d4c32\" id=\"u2e5d4c32\"><span data-lake-id=\"ue083aca3\" id=\"ue083aca3\">当我们再运行的时候：</span></p><p data-lake-id=\"u8f7746e1\" id=\"u8f7746e1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2274c44b71-1%22%7D\"></card><p data-lake-id=\"u554553a1\" id=\"u554553a1\"><br></p><p data-lake-id=\"u1799a33e\" id=\"u1799a33e\"><span data-lake-id=\"ue35dbbf4\" id=\"ue35dbbf4\">我们可以发现，控制台没有任何的输出结果；在 IOC 容器创建的时候，没有去创建这个作用域为多实例的 bean；</span></p><p data-lake-id=\"ufd75075d\" id=\"ufd75075d\"><br></p><p data-lake-id=\"uad168217\" id=\"uad168217\"><span data-lake-id=\"u6fe100a2\" id=\"u6fe100a2\">这个时候，我们来调用 getBean() 方法来获取一下：</span></p><p data-lake-id=\"u40cedbf0\" id=\"u40cedbf0\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22IOC%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2212fbf35a%22%7D\"></card><p data-lake-id=\"ue939842c\" id=\"ue939842c\"><br></p><p data-lake-id=\"u368642e1\" id=\"u368642e1\"><span data-lake-id=\"u962aac93\" id=\"u962aac93\">这个时候，控制台打印了：</span></p><p data-lake-id=\"u95b18869\" id=\"u95b18869\"><br></p><blockquote data-lake-id=\"uce6f86f5\" id=\"uce6f86f5\"><p data-lake-id=\"ue91cc42a\" id=\"ue91cc42a\"><span data-lake-id=\"u4cfed432\" id=\"u4cfed432\">IOC 容器创建完成…<br /></span><span data-lake-id=\"ub2c669bf\" id=\"ub2c669bf\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"ub46fbf93\" id=\"ub46fbf93\"><br></p><p data-lake-id=\"uea9c175a\" id=\"uea9c175a\"><span data-lake-id=\"ud15b2140\" id=\"ud15b2140\">同时， 如果我多次获取：</span></p><p data-lake-id=\"u83d1e9b1\" id=\"u83d1e9b1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22IOC%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%223adc8077%22%7D\"></card><p data-lake-id=\"ua8bd6797\" id=\"ua8bd6797\"><br></p><p data-lake-id=\"u044a841d\" id=\"u044a841d\"><span data-lake-id=\"ud68bcb36\" id=\"ud68bcb36\">测试结果如下：</span></p><p data-lake-id=\"u7ec99b65\" id=\"u7ec99b65\"><br></p><blockquote data-lake-id=\"u6f0417a9\" id=\"u6f0417a9\"><p data-lake-id=\"u269e18a6\" id=\"u269e18a6\"><span data-lake-id=\"ud77aec04\" id=\"ud77aec04\">IOC 容器创建完成…<br /></span><span data-lake-id=\"u65f9dc6b\" id=\"u65f9dc6b\">给 IOC 容器中添加 Person…<br /></span><span data-lake-id=\"ube7cea4e\" id=\"ube7cea4e\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"u3ee129d5\" id=\"u3ee129d5\"><br></p><p data-lake-id=\"u10507792\" id=\"u10507792\"><span data-lake-id=\"ua66f3a50\" id=\"ua66f3a50\">我们可以发现，我们用 getBean 方法获取几次，就创建几次 bean 的实例；</span></p><p data-lake-id=\"u295e7a50\" id=\"u295e7a50\"><br></p><p data-lake-id=\"u2fb334a9\" id=\"u2fb334a9\"><span data-lake-id=\"u0932a4f6\" id=\"u0932a4f6\">也就是说当 bean 是作用域为多例的时候，IOC 容器启动的时候，就不会去创建 bean 的实例的，而是当我们调用 getBean() 获取的时候去创建 bean 的实例；而且每次调用的时候，都会创建 bean 的实例；</span></p>",
    "body_draft_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u70774c0d\" id=\"u70774c0d\"><br></p><h1 data-lake-id=\"uKqFE\" id=\"uKqFE\"><span data-lake-id=\"u08e52c31\" id=\"u08e52c31\">0 简介 </span></h1><blockquote data-lake-id=\"ucd8f6413\" id=\"ucd8f6413\"><p data-lake-id=\"u81d92179\" id=\"u81d92179\"><span data-lake-id=\"u13f5b73a\" id=\"u13f5b73a\">当我们还在使用 Spring、</span><a href=\"https://so.csdn.net/so/search?q=SpringMVC&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"u87df8a4c\" id=\"u87df8a4c\"><span data-lake-id=\"u77212ac3\" id=\"u77212ac3\">SpringMVC</span></a><span data-lake-id=\"u692d59a9\" id=\"u692d59a9\">、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springboot 和 SpringCloud 里面会使用到大量的注解来进行配置；当我们熟练掌握了 Spring 的注解驱动，那当我们在学习 Springboot 和 SpringCloud 框架的时候，那将会更加的轻松自如；让我们一起来开启 Spring 注解驱动开发的学习之旅吧！</span></p></blockquote><p data-lake-id=\"u80f295c5\" id=\"u80f295c5\"><br></p><h1 data-lake-id=\"81f533a5\" id=\"81f533a5\"><span data-lake-id=\"u0f035247\" id=\"u0f035247\">1 组件注册 -</span><code data-lake-id=\"u92d1af43\" id=\"u92d1af43\"><span data-lake-id=\"u178f0b15\" id=\"u178f0b15\">@Configuration</span></code><span data-lake-id=\"u5a8f5075\" id=\"u5a8f5075\">&amp;</span><code data-lake-id=\"u6206365d\" id=\"u6206365d\"><span data-lake-id=\"uf2e2354c\" id=\"uf2e2354c\">@Bean</span></code><span data-lake-id=\"ua4921562\" id=\"ua4921562\">给容器中注册组件</span></h1><p data-lake-id=\"u8870a13e\" id=\"u8870a13e\"><br></p><p data-lake-id=\"u4cbc0339\" id=\"u4cbc0339\"><span data-lake-id=\"ua459fccd\" id=\"ua459fccd\">创建一个 Maven 项目：spring-annotation<br /></span><span data-lake-id=\"ub9b8c680\" id=\"ub9b8c680\">导入 spring-context jar 包 – 这个就是 Spring 核心环境所有依赖的 jar 包<br /></span><a href=\"https://mvnrepository.com/artifact/org.springframework/spring-context/4.3.12.RELEASE\" target=\"_blank\" data-lake-id=\"u6f2163fa\" id=\"u6f2163fa\"><span data-lake-id=\"u9ba489a2\" id=\"u9ba489a2\">Maven 仓库中的 spring-context</span></a></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22r8Tyv%22%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cproject%20xmlns%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%5C%22%5Cn%20%20%20%20%20%20%20%20%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%20%20%20%20%20%20%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%20http%3A%2F%2Fmaven.apache.org%2Fxsd%2Fmaven-4.0.0.xsd%5C%22%3E%5Cn%20%20%20%20%3CmodelVersion%3E4.0.0%3C%2FmodelVersion%3E%5Cn%5Cn%20%20%20%20%3CgroupId%3Ecom.ldc%3C%2FgroupId%3E%5Cn%20%20%20%20%3CartifactId%3Espring-annotation%3C%2FartifactId%3E%5Cn%20%20%20%20%3Cversion%3E1.0-SNAPSHOT%3C%2Fversion%3E%5Cn%5Cn%20%20%20%20%3Cdependencies%3E%5Cn%20%20%20%20%20%20%20%20%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.springframework%2Fspring-context%20--%3E%5Cn%20%20%20%20%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CgroupId%3Eorg.springframework%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CartifactId%3Espring-context%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cversion%3E4.3.12.RELEASE%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdependency%3E%5Cn%20%20%20%20%3C%2Fdependencies%3E%5Cn%5Cn%3C%2Fproject%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22098ed72f%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22ck1Q9%22%7D\"></card><ul list=\"ud7b3c015\"><li fid=\"u6beadfa3\" data-lake-id=\"u4e4a3c8f\" id=\"u4e4a3c8f\"><strong><span data-lake-id=\"u8d55e395\" id=\"u8d55e395\">xml 文件配置的方式</span></strong><span data-lake-id=\"u8a9bc1c9\" id=\"u8a9bc1c9\"><br /></span><span data-lake-id=\"u6599b78f\" id=\"u6599b78f\">先按照我们以前配置的方式来使用 Spring：<br /></span><span data-lake-id=\"u0780329e\" id=\"u0780329e\">首先有一个 Person 类：</span></li></ul><p data-lake-id=\"u8ba324f7\" id=\"u8ba324f7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20Person%20%7B%5Cn%20%20%20%20private%20String%20name%3B%5Cn%20%20%20%20private%20Integer%20age%3B%5Cn%5Cn%20%20%20%20public%20Person()%20%7B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20Person(String%20name%2C%20Integer%20age)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%20%20%20%20this.age%20%3D%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20String%20getName()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setName(String%20name)%20%7B%5Cn%20%20%20%20%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20Integer%20getAge()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20public%20void%20setAge(Integer%20age)%20%7B%5Cn%20%20%20%20%20%20%20%20this.age%20%3D%20age%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20String%20toString()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%5C%22Person%7B%5C%22%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%3D'%5C%22%20%2B%20name%20%2B%20'%5C%5C''%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22%2C%20age%3D%5C%22%20%2B%20age%20%2B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20'%7D'%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22e8eb6dee%22%7D\"></card><p data-lake-id=\"u2efd5432\" id=\"u2efd5432\"><br></p><p data-lake-id=\"u677b0f02\" id=\"u677b0f02\"><span data-lake-id=\"ube3294b2\" id=\"ube3294b2\">我们再写上一个 Spring 的 xml 配置文件：</span></p><p data-lake-id=\"u6d32c19e\" id=\"u6d32c19e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%3C%3Fxml%20version%3D%5C%221.0%5C%22%20encoding%3D%5C%22UTF-8%5C%22%3F%3E%5Cn%3Cbeans%20xmlns%3D%5C%22http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%5C%22%5Cn%5Ct%20%20%20xmlns%3Axsi%3D%5C%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%5C%22%5Cn%5Ct%20%20%20xsi%3AschemaLocation%3D%5C%22http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%20http%3A%2F%2Fwww.springframework.org%2Fschema%2Fbeans%2Fspring-beans.xsd%5C%22%3E%5Cn%5Cn%5Ct%3Cbean%20id%3D%5C%22person%5C%22%20class%3D%5C%22com.ldc.bean.Person%5C%22%3E%5Cn%5Ct%5Ct%3Cproperty%20name%3D%5C%22age%5C%22%20value%3D%5C%2218%5C%22%3E%3C%2Fproperty%3E%5Cn%5Ct%5Ct%3Cproperty%20name%3D%5C%22name%5C%22%20value%3D%5C%22%E5%BC%A0%E4%B8%89%5C%22%3E%3C%2Fproperty%3E%5Cn%5Ct%3C%2Fbean%3E%5Cn%3C%2Fbeans%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2221dd67ee%22%7D\"></card><p data-lake-id=\"u3932e4a8\" id=\"u3932e4a8\"><br></p><p data-lake-id=\"u483210f5\" id=\"u483210f5\"><span data-lake-id=\"u27427c88\" id=\"u27427c88\">测试类来测试：</span></p><p data-lake-id=\"ub3aa457c\" id=\"ub3aa457c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20ClassPathXmlApplicationContext(%5C%22beans.xml%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%222cb7cc8e%22%7D\"></card><p data-lake-id=\"u01f314cf\" id=\"u01f314cf\"><br></p><p data-lake-id=\"u1106e450\" id=\"u1106e450\"><span data-lake-id=\"u893e7fe0\" id=\"u893e7fe0\">输出结果为：</span></p><p data-lake-id=\"u630b117f\" id=\"u630b117f\"><br></p><blockquote data-lake-id=\"u20f905c5\" id=\"u20f905c5\"><p data-lake-id=\"u3ab76931\" id=\"u3ab76931\"><span data-lake-id=\"u3fc85274\" id=\"u3fc85274\">Person{name=‘张三’, age=18}</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22bugNC%22%7D\"></card><ul list=\"ub502cf1e\"><li fid=\"u5d433ce1\" data-lake-id=\"u64ed4c7a\" id=\"u64ed4c7a\"><strong><span data-lake-id=\"uc060a0c0\" id=\"uc060a0c0\">注解的方式</span></strong><span data-lake-id=\"ud0f586c1\" id=\"ud0f586c1\">：</span></li></ul><p data-lake-id=\"u0e132c33\" id=\"u0e132c33\"><br></p><p data-lake-id=\"u08eac971\" id=\"u08eac971\"><span data-lake-id=\"u22a21e31\" id=\"u22a21e31\">首先我们先写一个配置类：等同于 xml 配置文件</span></p><p data-lake-id=\"ub2981432\" id=\"ub2981432\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ed81bcc1%22%7D\"></card><p data-lake-id=\"u3902e3fa\" id=\"u3902e3fa\"><br></p><p data-lake-id=\"u2b43f38f\" id=\"u2b43f38f\"><span data-lake-id=\"ubfc12f5a\" id=\"ubfc12f5a\">现在，我们来测试一下：</span></p><p data-lake-id=\"u753074f4\" id=\"u753074f4\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227943a0cb%22%7D\"></card><p data-lake-id=\"u06b8473a\" id=\"u06b8473a\"><br></p><p data-lake-id=\"ubd40d912\" id=\"ubd40d912\"><span data-lake-id=\"uc341dd43\" id=\"uc341dd43\">测试结果如下：</span></p><p data-lake-id=\"ub84321eb\" id=\"ub84321eb\"><br></p><blockquote data-lake-id=\"u5e538f6d\" id=\"u5e538f6d\"><p data-lake-id=\"uf444fab7\" id=\"uf444fab7\"><span data-lake-id=\"u26a69ed1\" id=\"u26a69ed1\">Person{name=‘lisi’, age=20}</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22E6DQN%22%7D\"></card><p data-lake-id=\"ue5d8fbe3\" id=\"ue5d8fbe3\"><span data-lake-id=\"ud32f2447\" id=\"ud32f2447\">我们也可以通过 ApplicationContext 的一些方法来获取容器里面 bean 的一些信息，比如我们可以获取 Person 这个 bean 在 IOC 容器里面的名字，也是相当于是 xml 配置文件里面标签里面的 id 属性；</span></p><p data-lake-id=\"uf719b308\" id=\"uf719b308\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20namesForType%20%3D%20applicationContext.getBeanNamesForType(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20namesForType)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22dcafa1f3%22%7D\"></card><p data-lake-id=\"ud7e45b0d\" id=\"ud7e45b0d\"><br></p><p data-lake-id=\"u8f1b3d0d\" id=\"u8f1b3d0d\"><span data-lake-id=\"u3ac07873\" id=\"u3ac07873\">测试结果如下：</span></p><p data-lake-id=\"u785b12fe\" id=\"u785b12fe\"><br></p><blockquote data-lake-id=\"uaca43a2a\" id=\"uaca43a2a\"><p data-lake-id=\"ub0aa773b\" id=\"ub0aa773b\"><span data-lake-id=\"ud6520bb6\" id=\"ud6520bb6\">Person{name=‘lisi’, age=20}<br /></span><span data-lake-id=\"u16d1cd5b\" id=\"u16d1cd5b\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22d9EFe%22%7D\"></card><p data-lake-id=\"u99975fdf\" id=\"u99975fdf\"><strong><span data-lake-id=\"u55ba2c6a\" id=\"u55ba2c6a\">Spring 注解的方式默认是以配置的方法名来作为这个 bean 的默认 id，如果我们不想要方法名来作为 bean 的 id，我们可以在</span></strong><code data-lake-id=\"u9d3edf85\" id=\"u9d3edf85\"><strong><span data-lake-id=\"uc6805884\" id=\"uc6805884\">@Bean</span></strong></code><strong><span data-lake-id=\"uc65e0628\" id=\"uc65e0628\">这个注解的 value 属性来进行指定：</span></strong></p><p data-lake-id=\"ue89a42da\" id=\"ue89a42da\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f0a2f3cf%22%7D\"></card><p data-lake-id=\"uecfe5b6e\" id=\"uecfe5b6e\"><br></p><p data-lake-id=\"u2963fe11\" id=\"u2963fe11\"><span data-lake-id=\"ufcaf391c\" id=\"ufcaf391c\">我们再来运行这个测试类：</span></p><p data-lake-id=\"udf5baf65\" id=\"udf5baf65\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MainTest%20%7B%5Cn%20%20%20%20public%20static%20void%20main(String%5B%5Dargs)%7B%5Cn%20%20%20%20%20%20%20%20%2F**%5Cn%20%20%20%20%20%20%20%20%20*%20%E8%BF%99%E9%87%8C%E6%98%AFnew%E4%BA%86%E4%B8%80%E4%B8%AAAnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%BB%A5%E5%89%8Dnew%E7%9A%84ClassPathXmlApplicationContext%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20%20*%20%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE%EF%BC%8C%E8%80%8C%E7%8E%B0%E5%9C%A8AnnotationConfigApplicationContext%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E9%87%8C%E9%9D%A2%E4%BC%A0%E7%9A%84%E6%98%AF%5Cn%20%20%20%20%20%20%20%20%20*%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20applicationContext.getBean(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E8%8E%B7%E5%8F%96bean%E7%9A%84%E5%AE%9A%E4%B9%89%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20namesForType%20%3D%20applicationContext.getBeanNamesForType(Person.class)%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20namesForType)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22dcafa1f3-1%22%7D\"></card><p data-lake-id=\"u04064350\" id=\"u04064350\"><br></p><p data-lake-id=\"u7fea4667\" id=\"u7fea4667\"><span data-lake-id=\"u2f66b556\" id=\"u2f66b556\">那么现在的测试结果如下：bean 在 IOC 容器的名字就是 </span><a href=\"/Bean \" data-lake-id=\"udba97ae7\" id=\"udba97ae7\"><span data-lake-id=\"uf6f8971e\" id=\"uf6f8971e\">@Bean </span></a><span data-lake-id=\"u948e17b7\" id=\"u948e17b7\"> 这个注解的 value 属性的值，而不是默认的 id 是方法名 person01 </span></p><p data-lake-id=\"ub8d8ef78\" id=\"ub8d8ef78\"><br></p><blockquote data-lake-id=\"u61c9d480\" id=\"u61c9d480\"><p data-lake-id=\"ue634645e\" id=\"ue634645e\"><span data-lake-id=\"ufa30a34e\" id=\"ufa30a34e\">Person{name=‘lisi’, age=20}<br /></span><span data-lake-id=\"ud6bc4404\" id=\"ud6bc4404\">person</span></p></blockquote><p data-lake-id=\"ud157000a\" id=\"ud157000a\"><br></p><h1 data-lake-id=\"de67f166\" id=\"de67f166\"><span data-lake-id=\"u669e6069\" id=\"u669e6069\">2 组件注册 -</span><code data-lake-id=\"ud028559b\" id=\"ud028559b\"><span data-lake-id=\"uedfcfe4b\" id=\"uedfcfe4b\">@ComponentScan</span></code><span data-lake-id=\"ufdd4483f\" id=\"ufdd4483f\">-自动扫描组件 &amp; 指定扫描规则</span></h1><p data-lake-id=\"u81d28cbc\" id=\"u81d28cbc\"><br></p><p data-lake-id=\"uce63ccbf\" id=\"uce63ccbf\"><span data-lake-id=\"ub8bfb347\" id=\"ub8bfb347\">在 xml 文件配置的方式，我们可以这样来进行配置：</span></p><p data-lake-id=\"ucfb3e7cb\" id=\"ucfb3e7cb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%20%20%20%20%3C!--%20%E5%8C%85%E6%89%AB%E6%8F%8F%E3%80%81%E5%8F%AA%E8%A6%81%E6%A0%87%E6%B3%A8%E4%BA%86%40Controller%E3%80%81%40Service%E3%80%81%40Repository%EF%BC%8C%40Component%20--%3E%5Cn%20%20%20%20%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220bcae339%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22r2PQn%22%7D\"></card><p data-lake-id=\"ub7de522a\" id=\"ub7de522a\"><span data-lake-id=\"u1d46dc08\" id=\"u1d46dc08\">以前是在 xml 配置文件里面写包扫描，现在我们可以在配置类里面写包扫描：</span></p><p data-lake-id=\"uabb2569c\" id=\"uabb2569c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%98%AFxml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229bcef1a7%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22KbAVS%22%7D\"></card><p data-lake-id=\"u14eae0c5\" id=\"u14eae0c5\"><span data-lake-id=\"u9a0beede\" id=\"u9a0beede\">我们创建 BookController、BookService、BookDao 这几个类，分别添加了</span><code data-lake-id=\"uf6766f08\" id=\"uf6766f08\"><span data-lake-id=\"u6fa69e0f\" id=\"u6fa69e0f\">@Controller</span></code><span data-lake-id=\"u2e811af8\" id=\"u2e811af8\">、</span><code data-lake-id=\"ud06381fd\" id=\"ud06381fd\"><span data-lake-id=\"ufc8f5290\" id=\"ufc8f5290\">@Service</span></code><span data-lake-id=\"ue48c46f1\" id=\"ue48c46f1\">、</span><code data-lake-id=\"ub7604963\" id=\"ub7604963\"><span data-lake-id=\"u614824f5\" id=\"u614824f5\">@Repository</span></code><span data-lake-id=\"u572c906a\" id=\"u572c906a\">注解：</span></p><p data-lake-id=\"ud2be6297\" id=\"ud2be6297\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Controller%5Cnpublic%20class%20BookController%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f61a97bb%22%7D\"></card><p data-lake-id=\"u7dde41a3\" id=\"u7dde41a3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Service%5Cnpublic%20class%20BookService%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220317327a%22%7D\"></card><p data-lake-id=\"u184e8a6c\" id=\"u184e8a6c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Repository%5Cnpublic%20class%20BookDao%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ef2e5025%22%7D\"></card><p data-lake-id=\"u84f63f2d\" id=\"u84f63f2d\"><br></p><p data-lake-id=\"u4c5a1354\" id=\"u4c5a1354\"><span data-lake-id=\"u9e6c016c\" id=\"u9e6c016c\">我们可以引入 junit 的 jar 包来进行测试：</span></p><p data-lake-id=\"u3c79839d\" id=\"u3c79839d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22xml%22%2C%22code%22%3A%22%20%20%20%20%3Cdependency%3E%5Cn%20%20%20%20%20%20%20%20%3CgroupId%3Ejunit%3C%2FgroupId%3E%5Cn%20%20%20%20%20%20%20%20%3CartifactId%3Ejunit%3C%2FartifactId%3E%5Cn%20%20%20%20%20%20%20%20%3Cversion%3E4.12%3C%2Fversion%3E%5Cn%20%20%20%20%20%20%20%20%3Cscope%3Etest%3C%2Fscope%3E%5Cn%20%20%20%20%3C%2Fdependency%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d192603d%22%7D\"></card><p data-lake-id=\"u99b12471\" id=\"u99b12471\"><br></p><p data-lake-id=\"ufc999a6b\" id=\"ufc999a6b\"><span data-lake-id=\"ue8a1bcd9\" id=\"ue8a1bcd9\">我们来进行单元测试：</span></p><p data-lake-id=\"uc3790a99\" id=\"uc3790a99\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22b4c8503e%22%7D\"></card><p data-lake-id=\"u7ccfcece\" id=\"u7ccfcece\"><br></p><p data-lake-id=\"ucbcd0b27\" id=\"ucbcd0b27\"><span data-lake-id=\"u1cff9792\" id=\"u1cff9792\">测试结果如下：除开 IOC 容器自己要装配的一些组件外，还有是我们自己装配的组件</span></p><p data-lake-id=\"u040263ea\" id=\"u040263ea\"><br></p><blockquote data-lake-id=\"u2e9b2ead\" id=\"u2e9b2ead\"><p data-lake-id=\"u4fb264b2\" id=\"u4fb264b2\"><span data-lake-id=\"ubb5d03d9\" id=\"ubb5d03d9\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ub56c75de\" id=\"ub56c75de\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u4192af04\" id=\"u4192af04\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u9d057816\" id=\"u9d057816\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u73f70344\" id=\"u73f70344\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u2b3e2d1a\" id=\"u2b3e2d1a\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"uba7f62c1\" id=\"uba7f62c1\">mainConfig<br /></span><span data-lake-id=\"ua3b7c129\" id=\"ua3b7c129\">bookController<br /></span><span data-lake-id=\"u0e0844d4\" id=\"u0e0844d4\">bookDao<br /></span><span data-lake-id=\"u6dc8839e\" id=\"u6dc8839e\">bookService<br /></span><span data-lake-id=\"uef019449\" id=\"uef019449\">person</span></p></blockquote><p data-lake-id=\"u845d4167\" id=\"u845d4167\"><br></p><p data-lake-id=\"u6fe37971\" id=\"u6fe37971\"><span data-lake-id=\"ud5317b8b\" id=\"ud5317b8b\">从上面的测试结果我们可以发现主配置类 MainConfig 也是 IOC 容器里面的组件，也被纳入了 IOC 容器的管理：</span></p><p data-lake-id=\"u7819819a\" id=\"u7819819a\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40Description%20%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%B0%B1%E7%AD%89%E5%90%8C%E4%BB%A5%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%5Cn%20*%2F%5Cn%40Configuration%20%2F%2F%E5%91%8A%E8%AF%89Spring%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E9%85%8D%E7%BD%AE%E7%B1%BB%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8E%E6%98%AFxml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E9%87%8C%E9%9D%A2%E7%9A%84%3Ccontext%3Acomponent-scan%20base-package%3D%5C%22com.ldc%5C%22%2F%3E%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E7%9B%B8%E5%BD%93%E4%BA%8Exml%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%3Cbean%3E%E6%A0%87%E7%AD%BE%EF%BC%8C%E5%91%8A%E8%AF%89%E5%AE%B9%E5%99%A8%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84class%E7%B1%BB%E5%9E%8B%EF%BC%8C%E9%82%A3%E4%B9%88%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%BD%93%E7%84%B6%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20%2F%2F%E4%B9%8B%E5%89%8Dxml%E6%96%87%E4%BB%B6%E4%B8%AD%3Cbean%3E%E6%A0%87%E7%AD%BE%E6%9C%89bean%E7%9A%84id%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E9%BB%98%E8%AE%A4%E7%94%A8%E7%9A%84%E6%98%AF%E6%96%B9%E6%B3%95%E5%90%8D%E6%9D%A5%E4%BD%9C%E4%B8%BAbean%E7%9A%84id%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%2F%2F%E9%80%9A%E8%BF%87%E8%BF%99%E4%B8%AAvalue%E5%B1%9E%E6%80%A7%E5%8F%AF%E4%BB%A5%E6%8C%87%E5%AE%9Abean%E5%9C%A8IOC%E5%AE%B9%E5%99%A8%E7%9A%84id%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229bcef1a7-1%22%7D\"></card><p data-lake-id=\"ufb14efeb\" id=\"ufb14efeb\"><br></p><p data-lake-id=\"u7d23cc73\" id=\"u7d23cc73\"><span data-lake-id=\"uf180c3a7\" id=\"uf180c3a7\">我们从</span><code data-lake-id=\"u5907c59d\" id=\"u5907c59d\"><span data-lake-id=\"ud93cd7df\" id=\"ud93cd7df\">@Configuration</span></code><span data-lake-id=\"u3b58cf1b\" id=\"u3b58cf1b\"> 这个注解点进去就可以发现这个注解上也标注了 </span><code data-lake-id=\"u5de65ee4\" id=\"u5de65ee4\"><span data-lake-id=\"u33b23548\" id=\"u33b23548\">@Component</span></code><span data-lake-id=\"u0b87aa31\" id=\"u0b87aa31\"> 的这个注解，也纳入到 IOC 容器中作为一个组件：</span></p><p data-lake-id=\"uc14a00c0\" id=\"uc14a00c0\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Target(ElementType.TYPE)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Documented%5Cn%40Component%5Cnpublic%20%40interface%20Configuration%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Explicitly%20specify%20the%20name%20of%20the%20Spring%20bean%20definition%20associated%5Cn%5Ct%20*%20with%20this%20Configuration%20class.%20If%20left%20unspecified%20(the%20common%20case)%2C%5Cn%5Ct%20*%20a%20bean%20name%20will%20be%20automatically%20generated.%5Cn%5Ct%20*%20%3Cp%3EThe%20custom%20name%20applies%20only%20if%20the%20Configuration%20class%20is%20picked%20up%20via%5Cn%5Ct%20*%20component%20scanning%20or%20supplied%20directly%20to%20a%20%7B%40link%20AnnotationConfigApplicationContext%7D.%5Cn%5Ct%20*%20If%20the%20Configuration%20class%20is%20registered%20as%20a%20traditional%20XML%20bean%20definition%2C%5Cn%5Ct%20*%20the%20name%2Fid%20of%20the%20bean%20element%20will%20take%20precedence.%5Cn%5Ct%20*%20%40return%20the%20specified%20bean%20name%2C%20if%20any%5Cn%5Ct%20*%20%40see%20org.springframework.beans.factory.support.DefaultBeanNameGenerator%5Cn%5Ct%20*%2F%5Cn%5CtString%20value()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2239dfc6d8%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22cHmHM%22%7D\"></card><p data-lake-id=\"ufc24c0b0\" id=\"ufc24c0b0\"><span data-lake-id=\"u31422008\" id=\"u31422008\">我们在 </span><code data-lake-id=\"u37534d8b\" id=\"u37534d8b\"><span data-lake-id=\"u4a623366\" id=\"u4a623366\">@ComponentScan</span></code><span data-lake-id=\"u74c1f6c0\" id=\"u74c1f6c0\"> 这个注解上，也是可以指定要排除哪些包或者是只包含哪些包来进行管理：里面传是一个 Filter[]数组<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F20190110194446276.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1100%2C%22originHeight%22%3A529%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22j9Wtt%22%7D\"></card></p><p data-lake-id=\"u10426e4a\" id=\"u10426e4a\"><br></p><p data-lake-id=\"uf3d75f00\" id=\"uf3d75f00\"><span data-lake-id=\"u535588a9\" id=\"u535588a9\">我们从这个 excludeFilters 方法点过去，就到了</span><code data-lake-id=\"u8d9d36a0\" id=\"u8d9d36a0\"><span data-lake-id=\"u4ebbbc4d\" id=\"u4ebbbc4d\">@Filter</span></code><span data-lake-id=\"uda2ff2f0\" id=\"uda2ff2f0\">这个注解：</span></p><p data-lake-id=\"u1e427746\" id=\"u1e427746\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%5Ct%40Retention(RetentionPolicy.RUNTIME)%5Cn%5Ct%40Target(%7B%7D)%5Cn%5Ct%40interface%20Filter%20%7B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20type%20of%20filter%20to%20use.%5Cn%5Ct%5Ct%20*%20%3Cp%3EDefault%20is%20%7B%40link%20FilterType%23ANNOTATION%7D.%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%20%40see%20%23pattern%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%2F%2F%E8%BF%99%E4%B8%AA%E6%98%AF%E8%A6%81%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%9A%E6%98%AF%E6%8C%89%E6%B3%A8%E8%A7%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%E8%BF%98%E6%98%AF%E6%8C%89%E7%85%A7%E7%B1%BB%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%E8%BF%98%E6%98%AF%E6%8C%89%E7%85%A7%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9D%A5%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%5Ct%5CtFilterType%20type()%20default%20FilterType.ANNOTATION%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20Alias%20for%20%7B%40link%20%23classes%7D.%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%40AliasFor(%5C%22classes%5C%22)%5Cn%5Ct%5CtClass%3C%3F%3E%5B%5D%20value()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20class%20or%20classes%20to%20use%20as%20the%20filter.%5Cn%5Ct%5Ct%20*%20%3Cp%3EThe%20following%20table%20explains%20how%20the%20classes%20will%20be%20interpreted%5Cn%5Ct%5Ct%20*%20based%20on%20the%20configured%20value%20of%20the%20%7B%40link%20%23type%7D%20attribute.%5Cn%5Ct%5Ct%20*%20%3Ctable%20border%3D%5C%221%5C%22%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Cth%3E%7B%40code%20FilterType%7D%3C%2Fth%3E%3Cth%3EClass%20Interpreted%20As%3C%2Fth%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23ANNOTATION%20ANNOTATION%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ethe%20annotation%20itself%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23ASSIGNABLE_TYPE%20ASSIGNABLE_TYPE%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ethe%20type%20that%20detected%20components%20should%20be%20assignable%20to%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3Ctr%3E%3Ctd%3E%7B%40link%20FilterType%23CUSTOM%20CUSTOM%7D%3C%2Ftd%3E%5Cn%5Ct%5Ct%20*%20%3Ctd%3Ean%20implementation%20of%20%7B%40link%20TypeFilter%7D%3C%2Ftd%3E%3C%2Ftr%3E%5Cn%5Ct%5Ct%20*%20%3C%2Ftable%3E%5Cn%5Ct%5Ct%20*%20%3Cp%3EWhen%20multiple%20classes%20are%20specified%2C%20%3Cem%3EOR%3C%2Fem%3E%20logic%20is%20applied%5Cn%5Ct%5Ct%20*%20%26mdash%3B%20for%20example%2C%20%5C%22include%20types%20annotated%20with%20%7B%40code%20%40Foo%7D%20OR%20%7B%40code%20%40Bar%7D%5C%22.%5Cn%5Ct%5Ct%20*%20%3Cp%3ECustom%20%7B%40link%20TypeFilter%20TypeFilters%7D%20may%20optionally%20implement%20any%20of%20the%5Cn%5Ct%5Ct%20*%20following%20%7B%40link%20org.springframework.beans.factory.Aware%20Aware%7D%20interfaces%2C%20and%5Cn%5Ct%5Ct%20*%20their%20respective%20methods%20will%20be%20called%20prior%20to%20%7B%40link%20TypeFilter%23match%20match%7D%3A%5Cn%5Ct%5Ct%20*%20%3Cul%3E%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.context.EnvironmentAware%20EnvironmentAware%7D%3C%2Fli%3E%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.beans.factory.BeanFactoryAware%20BeanFactoryAware%7D%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.beans.factory.BeanClassLoaderAware%20BeanClassLoaderAware%7D%5Cn%5Ct%5Ct%20*%20%3Cli%3E%7B%40link%20org.springframework.context.ResourceLoaderAware%20ResourceLoaderAware%7D%5Cn%5Ct%5Ct%20*%20%3C%2Ful%3E%5Cn%5Ct%5Ct%20*%20%3Cp%3ESpecifying%20zero%20classes%20is%20permitted%20but%20will%20have%20no%20effect%20on%20component%5Cn%5Ct%5Ct%20*%20scanning.%5Cn%5Ct%5Ct%20*%20%40since%204.2%5Cn%5Ct%5Ct%20*%20%40see%20%23value%5Cn%5Ct%5Ct%20*%20%40see%20%23type%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5Ct%40AliasFor(%5C%22value%5C%22)%5Cn%5Ct%5CtClass%3C%3F%3E%5B%5D%20classes()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%5Ct%2F**%5Cn%5Ct%5Ct%20*%20The%20pattern%20(or%20patterns)%20to%20use%20for%20the%20filter%2C%20as%20an%20alternative%5Cn%5Ct%5Ct%20*%20to%20specifying%20a%20Class%20%7B%40link%20%23value%7D.%5Cn%5Ct%5Ct%20*%20%3Cp%3EIf%20%7B%40link%20%23type%7D%20is%20set%20to%20%7B%40link%20FilterType%23ASPECTJ%20ASPECTJ%7D%2C%5Cn%5Ct%5Ct%20*%20this%20is%20an%20AspectJ%20type%20pattern%20expression.%20If%20%7B%40link%20%23type%7D%20is%5Cn%5Ct%5Ct%20*%20set%20to%20%7B%40link%20FilterType%23REGEX%20REGEX%7D%2C%20this%20is%20a%20regex%20pattern%5Cn%5Ct%5Ct%20*%20for%20the%20fully-qualified%20class%20names%20to%20match.%5Cn%5Ct%5Ct%20*%20%40see%20%23type%5Cn%5Ct%5Ct%20*%20%40see%20%23classes%5Cn%5Ct%5Ct%20*%2F%5Cn%5Ct%5CtString%5B%5D%20pattern()%20default%20%7B%7D%3B%5Cn%5Cn%5Ct%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22460661b6%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22Q5g1L%22%7D\"></card><p data-lake-id=\"ua151f5e1\" id=\"ua151f5e1\"><span data-lake-id=\"uc16453d1\" id=\"uc16453d1\">这个时候，我们就可以这样来配置：</span></p><p data-lake-id=\"uc66f5fe7\" id=\"uc66f5fe7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CexcludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%2CService.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E6%8E%92%E9%99%A4%E6%8E%89%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2Cclasses%20%3D%20%7BController.class%2CService.class%7D)%5Cn%7D)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229c6c049a%22%7D\"></card><p data-lake-id=\"uc18607c0\" id=\"uc18607c0\"><br></p><p data-lake-id=\"uf74f0733\" id=\"uf74f0733\"><span data-lake-id=\"u6e2498d2\" id=\"u6e2498d2\">我们再来测试一下：</span></p><p data-lake-id=\"u3263ee3d\" id=\"u3263ee3d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20IOCTest%20%7B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2233a42374%22%7D\"></card><p data-lake-id=\"ua9f9be36\" id=\"ua9f9be36\"><br></p><p data-lake-id=\"u7260af83\" id=\"u7260af83\"><span data-lake-id=\"u99b1780a\" id=\"u99b1780a\">这个时候的测试结果如下：这个时候，bookService、bookController 这两个组件就已经被排除掉了，不再被 IOC 容器给管理：</span></p><p data-lake-id=\"u6658f216\" id=\"u6658f216\"><br></p><blockquote data-lake-id=\"uade0c37d\" id=\"uade0c37d\"><p data-lake-id=\"uf147bb12\" id=\"uf147bb12\"><span data-lake-id=\"u48c32962\" id=\"u48c32962\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ud664212d\" id=\"ud664212d\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u01b69412\" id=\"u01b69412\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u4db7ec82\" id=\"u4db7ec82\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ufb6f014f\" id=\"ufb6f014f\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u4d545e87\" id=\"u4d545e87\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u4475866f\" id=\"u4475866f\">mainConfig<br /></span><span data-lake-id=\"uce094e82\" id=\"uce094e82\">bookDao<br /></span><span data-lake-id=\"ud455b20d\" id=\"ud455b20d\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22GAyCS%22%7D\"></card><p data-lake-id=\"uf23f32c9\" id=\"uf23f32c9\"><span data-lake-id=\"ubae24dda\" id=\"ubae24dda\">我们也可以来配置</span><strong><span data-lake-id=\"u55665cea\" id=\"u55665cea\">includeFilters</span></strong><span data-lake-id=\"ue2af2d6e\" id=\"ue2af2d6e\">：指定在扫描的时候，只需要包含哪些组件<br /></span><span data-lake-id=\"uc2700395\" id=\"uc2700395\">在用 xml 文件配置的方式来进行配置的时候，还要禁用掉默认的配置规则，只包含哪些组件的配置才能生效</span></p><p data-lake-id=\"u8806fdf3\" id=\"u8806fdf3\"><br></p><blockquote data-lake-id=\"u40022528\" id=\"u40022528\"><p data-lake-id=\"uf2a1c841\" id=\"uf2a1c841\"><span data-lake-id=\"u7d261cac\" id=\"u7d261cac\">&lt;context:</span><a href=\"https://so.csdn.net/so/search?q=component&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"ub7b62c0a\" id=\"ub7b62c0a\"><span data-lake-id=\"u8f5b9bc3\" id=\"u8f5b9bc3\">component</span></a><span data-lake-id=\"ub61d715b\" id=\"ub61d715b\">-scan base-package=“com.ldc” use-default-filters=“false”/&gt;</span></p></blockquote><p data-lake-id=\"ud512a2b7\" id=\"ud512a2b7\"><br></p><p data-lake-id=\"u822fcd90\" id=\"u822fcd90\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F20190110203227264.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1158%2C%22originHeight%22%3A397%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22qJpvy%22%7D\"></card></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22M83lV%22%7D\"></card><p data-lake-id=\"u9550a3d4\" id=\"u9550a3d4\"><span data-lake-id=\"ubc2b6d10\" id=\"ubc2b6d10\">这个时候，我们就可以这样来写：</span></p><p data-lake-id=\"ue610a833\" id=\"ue610a833\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%7D%2CuseDefaultFilters%20%3D%20false)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22fa84313e%22%7D\"></card><p data-lake-id=\"ub71b0c6d\" id=\"ub71b0c6d\"><br></p><p data-lake-id=\"u544fe53a\" id=\"u544fe53a\"><span data-lake-id=\"ua08e656d\" id=\"ua08e656d\">测试类：</span></p><p data-lake-id=\"u4f77ddf5\" id=\"u4f77ddf5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20IOCTest%20%7B%5Cn%5Cn%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test01()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2233a42374-1%22%7D\"></card><p data-lake-id=\"uaceada5d\" id=\"uaceada5d\"><br></p><p data-lake-id=\"uc19192c4\" id=\"uc19192c4\"><span data-lake-id=\"u0d9e4b1f\" id=\"u0d9e4b1f\">这个时候，测试结果如下：这个时候是按照标有注解来进行包含的，现在就只有一个 bookController 被纳入到 IOC 容器进行管理</span></p><p data-lake-id=\"u1581840e\" id=\"u1581840e\"><br></p><blockquote data-lake-id=\"uf44276bb\" id=\"uf44276bb\"><p data-lake-id=\"ua8672c78\" id=\"ua8672c78\"><span data-lake-id=\"u9bf220f3\" id=\"u9bf220f3\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u0236b592\" id=\"u0236b592\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"ubf218e2d\" id=\"ubf218e2d\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"uc5713154\" id=\"uc5713154\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ua4b1d1c3\" id=\"ua4b1d1c3\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"ue7e7b533\" id=\"ue7e7b533\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u630a783e\" id=\"u630a783e\">mainConfig<br /></span><span data-lake-id=\"u5b427973\" id=\"u5b427973\">bookController<br /></span><span data-lake-id=\"u0e2818d1\" id=\"u0e2818d1\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22cQpgu%22%7D\"></card><p data-lake-id=\"u01d66530\" id=\"u01d66530\"><code data-lake-id=\"u1a3e052f\" id=\"u1a3e052f\"><span data-lake-id=\"u5303ce9e\" id=\"u5303ce9e\">@ComponentScan</span></code><span data-lake-id=\"u56e200f2\" id=\"u56e200f2\">这个注解是可以重复定义的：来指定不同的扫描策略<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fimg-blog.csdnimg.cn%2F2019011020395423.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNzc3ODgwMQ%3D%3D%2Csize_16%2Ccolor_FFFFFF%2Ct_70%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1042%2C%22originHeight%22%3A696%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22IAyjq%22%7D\"></card></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22P2k68%22%7D\"></card><p data-lake-id=\"uebe34671\" id=\"uebe34671\"><span data-lake-id=\"u953c5be5\" id=\"u953c5be5\">我们还可以用 </span><code data-lake-id=\"u2b96cabf\" id=\"u2b96cabf\"><span data-lake-id=\"u245941ce\" id=\"u245941ce\">@ComponentScans</span></code><span data-lake-id=\"u02445ae3\" id=\"u02445ae3\">来定义多个扫描规则：里面是</span><code data-lake-id=\"uad455bad\" id=\"uad455bad\"><span data-lake-id=\"u201270c7\" id=\"u201270c7\">@ComponentScan</span></code><span data-lake-id=\"u9c90e582\" id=\"u9c90e582\">规则的数组</span></p><p data-lake-id=\"u5c794ebc\" id=\"u5c794ebc\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E6%8E%92%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%2C%5Cn%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%5Cn%7D)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22bb064102%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22PQiC7%22%7D\"></card><p data-lake-id=\"u89426cfa\" id=\"u89426cfa\"><span data-lake-id=\"uf066168b\" id=\"uf066168b\">也可以直接这样来配置多个</span><code data-lake-id=\"u02bfcd23\" id=\"u02bfcd23\"><span data-lake-id=\"u11b488e0\" id=\"u11b488e0\">@ComponentScan</span></code><span data-lake-id=\"u19e86018\" id=\"u19e86018\">注解：</span><strong><span data-lake-id=\"u64cc83d4\" id=\"u64cc83d4\">但是这样写的话，就必须要 java8 及以上的支持</span></strong></p><p data-lake-id=\"u817823b5\" id=\"u817823b5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%5Cn%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%5Cn%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22)%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22b2dc07cf%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22wswTa%22%7D\"></card><h1 data-lake-id=\"3acd5314\" id=\"3acd5314\"><span data-lake-id=\"ue7aff2a7\" id=\"ue7aff2a7\">3 组件注册 - 自定义 TypeFilter 指定过滤规则</span></h1><p data-lake-id=\"ua25b822c\" id=\"ua25b822c\"><br></p><p data-lake-id=\"uc2996372\" id=\"uc2996372\"><span data-lake-id=\"uc595f53c\" id=\"uc595f53c\">我们可以来看看有哪几种过滤规则：</span></p><p data-lake-id=\"u55b7327f\" id=\"u55b7327f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20enum%20FilterType%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20marked%20with%20a%20given%20annotation.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AnnotationTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtANNOTATION%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20assignable%20to%20a%20given%20type.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AssignableTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtASSIGNABLE_TYPE%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20matching%20a%20given%20AspectJ%20type%20pattern%20expression.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.AspectJTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtASPECTJ%2C%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Filter%20candidates%20matching%20a%20given%20regex%20pattern.%5Cn%5Ct%20*%20%40see%20org.springframework.core.type.filter.RegexPatternTypeFilter%5Cn%5Ct%20*%2F%5Cn%5CtREGEX%2C%5Cn%5Cn%5Ct%2F**%20Filter%20candidates%20using%20a%20given%20custom%5Cn%5Ct%20*%20%7B%40link%20org.springframework.core.type.filter.TypeFilter%7D%20implementation.%5Cn%5Ct%20*%2F%5Cn%5CtCUSTOM%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22c034a4a1%22%7D\"></card><p data-lake-id=\"u05490af5\" id=\"u05490af5\"><br></p><p data-lake-id=\"ubc60058c\" id=\"ubc60058c\"><span data-lake-id=\"u1d700d3b\" id=\"u1d700d3b\">我们可以这样来匹配，来指定不同的匹配规则：</span></p><p data-lake-id=\"ubc573145\" id=\"ubc573145\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%BF%99%E9%87%8C%E9%9D%A2%E6%98%AF%E4%B8%80%E4%B8%AA%40Filter%E6%B3%A8%E8%A7%A3%E6%95%B0%E7%BB%84%EF%BC%8CFilterType.ANNOTATION%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%8E%92%E9%99%A4%E7%9A%84%E8%A7%84%E5%88%99%20%EF%BC%9A%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2Fclasses%20%3D%20%7BController.class%7D%E8%A1%A8%E7%A4%BA%E7%9A%84%E6%98%AF%E6%A0%87%E6%9C%89%E8%BF%99%E4%BA%9B%E6%B3%A8%E8%A7%A3%E7%9A%84%E7%B1%BB%E7%BB%99%E7%BA%B3%E5%85%A5%E5%88%B0IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20FilterType.ANNOTATION%20%E6%8C%89%E7%85%A7%E6%B3%A8%E8%A7%A3%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20FilterType.ASSIGNABLE_TYPE%20%E6%8C%89%E7%85%A7%E7%BB%99%E5%AE%9A%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ANNOTATION%2C%20classes%20%3D%20%7BController.class%7D)%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E6%8C%89%E7%85%A7%E7%BB%99%E5%AE%9A%E7%9A%84%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%BF%9B%E8%A1%8C%E5%8C%B9%E9%85%8D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.ASSIGNABLE_TYPE%2C%20classes%20%3D%20%7BBookService.class%7D)%5Cn%20%20%20%20%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%7D)%5Cn%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22a1516301%22%7D\"></card><p data-lake-id=\"ua6545077\" id=\"ua6545077\"><br></p><p data-lake-id=\"u85bc4533\" id=\"u85bc4533\"><span data-lake-id=\"u5c05e870\" id=\"u5c05e870\">测试结果如下：</span></p><p data-lake-id=\"u40fc9b83\" id=\"u40fc9b83\"><br></p><blockquote data-lake-id=\"ub31c227b\" id=\"ub31c227b\"><p data-lake-id=\"udd26a860\" id=\"udd26a860\"><span data-lake-id=\"uc45681cc\" id=\"uc45681cc\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u16753483\" id=\"u16753483\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u68fd3180\" id=\"u68fd3180\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"ud223a3de\" id=\"ud223a3de\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u726f10a2\" id=\"u726f10a2\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"ufd28cb90\" id=\"ufd28cb90\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u59fa87d1\" id=\"u59fa87d1\">mainConfig<br /></span><span data-lake-id=\"uf0ff78b8\" id=\"uf0ff78b8\">bookController<br /></span><span data-lake-id=\"u60832a4f\" id=\"u60832a4f\">bookService<br /></span><span data-lake-id=\"u11032fc7\" id=\"u11032fc7\">person</span></p></blockquote><p data-lake-id=\"uba888c51\" id=\"uba888c51\"><br></p><p data-lake-id=\"ub80dfe75\" id=\"ub80dfe75\"><span data-lake-id=\"u7a9f91cf\" id=\"u7a9f91cf\">bookService 组件又重新的被 IOC 容器给管理了；</span></p><p data-lake-id=\"u6598fdab\" id=\"u6598fdab\"><br></p><p data-lake-id=\"ue7eccaf7\" id=\"ue7eccaf7\"><span data-lake-id=\"u6428cf27\" id=\"u6428cf27\">下面的这两种是我们最常用的匹配规则：</span></p><p data-lake-id=\"u9c6952da\" id=\"u9c6952da\"><br></p><blockquote data-lake-id=\"u988f23c2\" id=\"u988f23c2\"><p data-lake-id=\"ua143b773\" id=\"ua143b773\"><span data-lake-id=\"uab302150\" id=\"uab302150\">FilterType.ANNOTATION 按照注解来进行匹配<br /></span><span data-lake-id=\"u9b8b61cd\" id=\"u9b8b61cd\">FilterType.ASSIGNABLE_TYPE 按照给定的类型来进行匹配</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22jQS5P%22%7D\"></card><p data-lake-id=\"ucdd864a4\" id=\"ucdd864a4\"><span data-lake-id=\"u0ca120d6\" id=\"u0ca120d6\">我们还可以来写上一个 </span><code data-lake-id=\"u767b985e\" id=\"u767b985e\"><span data-lake-id=\"u7eeb04a6\" id=\"u7eeb04a6\">FilterType.ASPECTJ</span></code><span data-lake-id=\"udbf08299\" id=\"udbf08299\">表达式来进行匹配，这个不常用；<br /></span><span data-lake-id=\"uddfffd13\" id=\"uddfffd13\">我们也可以按照正则表达式</span><code data-lake-id=\"ucfd8fd11\" id=\"ucfd8fd11\"><span data-lake-id=\"u1615f1eb\" id=\"u1615f1eb\">FilterType.REGEX</span></code><span data-lake-id=\"u5c1c8706\" id=\"u5c1c8706\">的方式来进行匹配：</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22rBIi6%22%7D\"></card><p data-lake-id=\"ube08dda2\" id=\"ube08dda2\"><span data-lake-id=\"uaada9977\" id=\"uaada9977\">我们来说说最后一种：自定义匹配规则</span><code data-lake-id=\"uc4f173e0\" id=\"uc4f173e0\"><span data-lake-id=\"ueb9951a0\" id=\"ueb9951a0\">FilterType.CUSTOM</span></code></p><p data-lake-id=\"u73c4967e\" id=\"u73c4967e\"><br></p><p data-lake-id=\"ufe52f294\" id=\"ufe52f294\"><span data-lake-id=\"u4fb1d7ab\" id=\"u4fb1d7ab\">我们可以自己来写一个匹配规则的类：MyTypeFilter，这个类要实现 TypeFilter 这个接口</span></p><p data-lake-id=\"ua5d91c3f\" id=\"ua5d91c3f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MyTypeFilter%20implements%20TypeFilter%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20metadataReader%20%20the%20metadata%20reader%20for%20the%20target%20class%20%E8%AF%BB%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40param%20metadataReaderFactory%20a%20factory%20for%20obtaining%20metadata%20readers%20%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E5%85%B6%E4%BB%96%E4%BB%BB%E4%BD%95%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%20%40throws%20IOException%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20match(MetadataReader%20metadataReader%2C%20MetadataReaderFactory%20metadataReaderFactory)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E7%B1%BB%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20AnnotationMetadata%20annotationMetadata%20%3D%20metadataReader.getAnnotationMetadata()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%B1%BB%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%88%E6%AF%94%E5%A6%82%E7%B1%BB%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%89%5Cn%20%20%20%20%20%20%20%20Resource%20resource%20%3D%20metadataReader.getResource()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ClassMetadata%20classMetadata%20%3D%20metadataReader.getClassMetadata()%3B%5Cn%20%20%20%20%20%20%20%20String%20className%20%3D%20classMetadata.getClassName()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99---%3E%5C%22%2BclassName)%3B%5Cn%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2246aa1153%22%7D\"></card><p data-lake-id=\"uee53bdad\" id=\"uee53bdad\"><br></p><p data-lake-id=\"u3bca8812\" id=\"u3bca8812\"><span data-lake-id=\"ubddbcd2d\" id=\"ubddbcd2d\">这个时候，我们就可以这样来用了：使用</span><code data-lake-id=\"ud388a3b8\" id=\"ud388a3b8\"><span data-lake-id=\"ub4356de2\" id=\"ub4356de2\">FilterType.CUSTOM</span></code></p><p data-lake-id=\"u7ab08034\" id=\"u7ab08034\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cn%2F%2FexcludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%E6%8C%89%E7%85%A7%E4%BB%80%E4%B9%88%E8%A7%84%E5%88%99%E6%9D%A5%E6%8E%92%E9%99%A4%E8%84%91%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%2F%2FincludeFilters%20%3D%20Filter%5B%5D%3B%E6%8C%87%E5%AE%9A%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%5Cn%40ComponentScans(value%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%40ComponentScan(value%20%3D%20%5C%22com.ldc%5C%22%2CincludeFilters%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%B9%E9%85%8D%E7%9A%84%E8%A7%84%E5%88%99%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%40Filter(type%20%3D%20FilterType.CUSTOM%2C%20classes%20%3D%20%7BMyTypeFilter.class%7D)%5Cn%20%20%20%20%20%20%20%20%7D%2CuseDefaultFilters%20%3D%20false)%5Cn%7D)%5Cn%5Cnpublic%20class%20MainConfig%20%7B%5Cn%5Cn%20%20%20%20%40Bean(value%20%3D%20%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person01()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person(%5C%22lisi%5C%22%2C20)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d97f9a91%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22rFTOZ%22%7D\"></card><p data-lake-id=\"uc595b5f6\" id=\"uc595b5f6\"><span data-lake-id=\"udd4b4b5d\" id=\"udd4b4b5d\">现在的测试结果如下:</span></p><p data-lake-id=\"u9d5544cc\" id=\"u9d5544cc\"><br></p><blockquote data-lake-id=\"u8526161a\" id=\"u8526161a\"><p data-lake-id=\"u978a2209\" id=\"u978a2209\"><span data-lake-id=\"u49d73dca\" id=\"u49d73dca\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span data-lake-id=\"ud3235972\" id=\"ud3235972\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span data-lake-id=\"u48485ad0\" id=\"u48485ad0\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span data-lake-id=\"u6f4335cb\" id=\"u6f4335cb\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span data-lake-id=\"u500f4933\" id=\"u500f4933\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span data-lake-id=\"u65ce1365\" id=\"u65ce1365\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span data-lake-id=\"uf87b92a5\" id=\"uf87b92a5\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span data-lake-id=\"u774929d7\" id=\"u774929d7\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u7862288b\" id=\"u7862288b\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"uffad3dfa\" id=\"uffad3dfa\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u18db6a16\" id=\"u18db6a16\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"ue1257718\" id=\"ue1257718\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u76eac19a\" id=\"u76eac19a\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"uf4cf5384\" id=\"uf4cf5384\">mainConfig<br /></span><span data-lake-id=\"u81976b9a\" id=\"u81976b9a\">person</span></p></blockquote><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22ukfcZ%22%7D\"></card><p data-lake-id=\"u8484c4a1\" id=\"u8484c4a1\"><span data-lake-id=\"udf4a22e3\" id=\"udf4a22e3\">由于，我的自定义的规则类里面返回的是 false，所有一个都没有匹配到；<br /></span><span data-lake-id=\"ucd64378b\" id=\"ucd64378b\">我们可以这样来修改一下，让 clsssName 里面包含 “er” 的组件给匹配到：</span></p><p data-lake-id=\"uca4d843d\" id=\"uca4d843d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20class%20MyTypeFilter%20implements%20TypeFilter%20%7B%5Cn%20%20%20%20%2F**%5Cn%20%20%20%20%20*%5Cn%20%20%20%20%20*%20%40param%20metadataReader%20%20the%20metadata%20reader%20for%20the%20target%20class%20%E8%AF%BB%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40param%20metadataReaderFactory%20a%20factory%20for%20obtaining%20metadata%20readers%20%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%88%B0%E5%85%B6%E4%BB%96%E4%BB%BB%E4%BD%95%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20*%20%40return%5Cn%20%20%20%20%20*%20%40throws%20IOException%5Cn%20%20%20%20%20*%2F%5Cn%20%20%20%20%40Override%5Cn%20%20%20%20public%20boolean%20match(MetadataReader%20metadataReader%2C%20MetadataReaderFactory%20metadataReaderFactory)%20throws%20IOException%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E7%B1%BB%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20AnnotationMetadata%20annotationMetadata%20%3D%20metadataReader.getAnnotationMetadata()%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E7%B1%BB%E7%9A%84%E8%B5%84%E6%BA%90%E7%9A%84%E4%BF%A1%E6%81%AF%EF%BC%88%E6%AF%94%E5%A6%82%E7%B1%BB%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%89%5Cn%20%20%20%20%20%20%20%20Resource%20resource%20%3D%20metadataReader.getResource()%3B%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E5%88%B0%E5%BD%93%E5%89%8D%E6%AD%A3%E5%9C%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E7%B1%BB%E7%9A%84%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20%20%20%20%20ClassMetadata%20classMetadata%20%3D%20metadataReader.getClassMetadata()%3B%5Cn%20%20%20%20%20%20%20%20String%20className%20%3D%20classMetadata.getClassName()%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E9%80%9A%E8%BF%87%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99---%3E%5C%22%2BclassName)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(className.contains(%5C%22er%5C%22))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20true%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20return%20false%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2202c79804%22%7D\"></card><p data-lake-id=\"u59dc7f61\" id=\"u59dc7f61\"><br></p><blockquote data-lake-id=\"ubc674ca8\" id=\"ubc674ca8\"><p data-lake-id=\"u63f8e1df\" id=\"u63f8e1df\"><span data-lake-id=\"u88f6a116\" id=\"u88f6a116\">通过自定义的匹配规则—&gt;com.ldc.test.IOCTest<br /></span><span data-lake-id=\"u24b3da0a\" id=\"u24b3da0a\">通过自定义的匹配规则—&gt;com.ldc.bean.Person<br /></span><span data-lake-id=\"u8acae41c\" id=\"u8acae41c\">通过自定义的匹配规则—&gt;com.ldc.config.MyTypeFilter<br /></span><span data-lake-id=\"u7972e5e5\" id=\"u7972e5e5\">通过自定义的匹配规则—&gt;com.ldc.controller.BookController<br /></span><span data-lake-id=\"uc9eca444\" id=\"uc9eca444\">通过自定义的匹配规则—&gt;com.ldc.dao.BookDao<br /></span><span data-lake-id=\"uf552753f\" id=\"uf552753f\">通过自定义的匹配规则—&gt;com.ldc.MainTest<br /></span><span data-lake-id=\"ucc789304\" id=\"ucc789304\">通过自定义的匹配规则—&gt;com.ldc.service.BookService<br /></span><span data-lake-id=\"u643aaba6\" id=\"u643aaba6\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ue65cdbb4\" id=\"ue65cdbb4\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u26603f84\" id=\"u26603f84\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u21c4491c\" id=\"u21c4491c\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u4dd6d491\" id=\"u4dd6d491\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"uc43cd389\" id=\"uc43cd389\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"u65b39bbb\" id=\"u65b39bbb\">mainConfig<br /></span><span data-lake-id=\"u05347932\" id=\"u05347932\">person<br /></span><span data-lake-id=\"uee54c8fd\" id=\"uee54c8fd\">myTypeFilter<br /></span><span data-lake-id=\"u11709977\" id=\"u11709977\">bookController<br /></span><span data-lake-id=\"uf82b47fe\" id=\"uf82b47fe\">bookService</span></p></blockquote><p data-lake-id=\"u0c2d97ba\" id=\"u0c2d97ba\"><br></p><p data-lake-id=\"uf49190ab\" id=\"uf49190ab\"><span data-lake-id=\"u8cbcce0a\" id=\"u8cbcce0a\">这个时候，包含 “er” 的组件就给添加到了 IOC 容器中了；只要在包扫描里面的包里面的每一个类都会进入到这个自定义的匹配规则进行匹配；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22VkY7q%22%7D\"></card><h1 data-lake-id=\"fd2a4202\" id=\"fd2a4202\"><span data-lake-id=\"uec6b369b\" id=\"uec6b369b\">4 组件注册 -</span><code data-lake-id=\"u8c7b7947\" id=\"u8c7b7947\"><span data-lake-id=\"ub485a35f\" id=\"ub485a35f\">@Scope</span></code><span data-lake-id=\"ud9adcab4\" id=\"ud9adcab4\">-设置组件</span><a href=\"https://so.csdn.net/so/search?q=%E4%BD%9C%E7%94%A8%E5%9F%9F&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"uddf51e06\" id=\"uddf51e06\"><span data-lake-id=\"ud446527a\" id=\"ud446527a\">作用域</span></a></h1><p data-lake-id=\"u6ac8d314\" id=\"u6ac8d314\"><br></p><p data-lake-id=\"u160196f0\" id=\"u160196f0\"><span data-lake-id=\"ub5c5c7c0\" id=\"ub5c5c7c0\">首先有一个配置类：</span></p><p data-lake-id=\"uc6834431\" id=\"uc6834431\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2225bbde69%22%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22CB6RU%22%7D\"></card><p data-lake-id=\"u8aa22ea0\" id=\"u8aa22ea0\"><span data-lake-id=\"u92253ed2\" id=\"u92253ed2\">测试方法：</span></p><p data-lake-id=\"u3eb903eb\" id=\"u3eb903eb\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person2%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person1%3D%3Dperson2)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229915a1fa%22%7D\"></card><p data-lake-id=\"u508de0fa\" id=\"u508de0fa\"><br></p><p data-lake-id=\"ua8338046\" id=\"ua8338046\"><span data-lake-id=\"ub7c9704d\" id=\"ub7c9704d\">测试结果如下：</span></p><p data-lake-id=\"ue79bcf59\" id=\"ue79bcf59\"><br></p><blockquote data-lake-id=\"u6a5b5d6f\" id=\"u6a5b5d6f\"><p data-lake-id=\"udb63e894\" id=\"udb63e894\"><span data-lake-id=\"ub04a7859\" id=\"ub04a7859\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"u267e5d25\" id=\"u267e5d25\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"ub3ab7225\" id=\"ub3ab7225\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u07f896b8\" id=\"u07f896b8\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u55ae35a3\" id=\"u55ae35a3\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"uffccb5e4\" id=\"uffccb5e4\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"ub596ca17\" id=\"ub596ca17\">mainConfig2<br /></span><span data-lake-id=\"u066d527f\" id=\"u066d527f\">person<br /></span><span data-lake-id=\"u24100be8\" id=\"u24100be8\">true</span></p></blockquote><p data-lake-id=\"uc96fbaf0\" id=\"uc96fbaf0\"><br></p><p data-lake-id=\"ud3e8da84\" id=\"ud3e8da84\"><span data-lake-id=\"u8976d106\" id=\"u8976d106\">说明这个 bean 的实例是单例的；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22Fcxnv%22%7D\"></card><p data-lake-id=\"u5f5bd1db\" id=\"u5f5bd1db\"><span data-lake-id=\"u14078db5\" id=\"u14078db5\">我们可以用</span><code data-lake-id=\"u33630520\" id=\"u33630520\"><span data-lake-id=\"u66445ae1\" id=\"u66445ae1\">@Scope</span></code><span data-lake-id=\"u4d6bdcb9\" id=\"u4d6bdcb9\">这个注解来指定作用域的范围：这个就相当于在 xml 文件中配置的</span><code data-lake-id=\"u0c4b22c3\" id=\"u0c4b22c3\"><span data-lake-id=\"ubf56fbe2\" id=\"ubf56fbe2\">&lt;bean&gt;</span></code><span data-lake-id=\"uff1e0fda\" id=\"uff1e0fda\">标签里面指定</span><a href=\"https://so.csdn.net/so/search?q=scope&amp;spm=1001.2101.3001.7020\" target=\"_blank\" data-lake-id=\"u76b2eccf\" id=\"u76b2eccf\"><span data-lake-id=\"ufae3da77\" id=\"ufae3da77\">scope</span></a><span data-lake-id=\"u1d98a2c6\" id=\"u1d98a2c6\">\\=“prototype” 属性；</span></p><p data-lake-id=\"u1fa4ab21\" id=\"u1fa4ab21\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Target(%7BElementType.TYPE%2C%20ElementType.METHOD%7D)%5Cn%40Retention(RetentionPolicy.RUNTIME)%5Cn%40Documented%5Cnpublic%20%40interface%20Scope%20%7B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Alias%20for%20%7B%40link%20%23scopeName%7D.%5Cn%5Ct%20*%20%40see%20%23scopeName%5Cn%5Ct%20*%2F%5Cn%5Ct%40AliasFor(%5C%22scopeName%5C%22)%5Cn%5CtString%20value()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Specifies%20the%20name%20of%20the%20scope%20to%20use%20for%20the%20annotated%20component%2Fbean.%5Cn%5Ct%20*%20%3Cp%3EDefaults%20to%20an%20empty%20string%20(%7B%40code%20%5C%22%5C%22%7D)%20which%20implies%5Cn%5Ct%20*%20%7B%40link%20ConfigurableBeanFactory%23SCOPE_SINGLETON%20SCOPE_SINGLETON%7D.%5Cn%5Ct%20*%20%40since%204.2%5Cn%5Ct%20*%20%40see%20ConfigurableBeanFactory%23SCOPE_PROTOTYPE%5Cn%5Ct%20*%20%40see%20ConfigurableBeanFactory%23SCOPE_SINGLETON%5Cn%5Ct%20*%20%40see%20org.springframework.web.context.WebApplicationContext%23SCOPE_REQUEST%5Cn%5Ct%20*%20%40see%20org.springframework.web.context.WebApplicationContext%23SCOPE_SESSION%5Cn%5Ct%20*%20%40see%20%23value%5Cn%5Ct%20*%2F%5Cn%5Ct%40AliasFor(%5C%22value%5C%22)%5Cn%5CtString%20scopeName()%20default%20%5C%22%5C%22%3B%5Cn%5Cn%5Ct%2F**%5Cn%5Ct%20*%20Specifies%20whether%20a%20component%20should%20be%20configured%20as%20a%20scoped%20proxy%5Cn%5Ct%20*%20and%20if%20so%2C%20whether%20the%20proxy%20should%20be%20interface-based%20or%20subclass-based.%5Cn%5Ct%20*%20%3Cp%3EDefaults%20to%20%7B%40link%20ScopedProxyMode%23DEFAULT%7D%2C%20which%20typically%20indicates%5Cn%5Ct%20*%20that%20no%20scoped%20proxy%20should%20be%20created%20unless%20a%20different%20default%5Cn%5Ct%20*%20has%20been%20configured%20at%20the%20component-scan%20instruction%20level.%5Cn%5Ct%20*%20%3Cp%3EAnalogous%20to%20%7B%40code%20%3Caop%3Ascoped-proxy%2F%3E%7D%20support%20in%20Spring%20XML.%5Cn%5Ct%20*%20%40see%20ScopedProxyMode%5Cn%5Ct%20*%2F%5Cn%5CtScopedProxyMode%20proxyMode()%20default%20ScopedProxyMode.DEFAULT%3B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227eee35a7%22%7D\"></card><p data-lake-id=\"ua283c6d6\" id=\"ua283c6d6\"><br></p><p data-lake-id=\"u7023ed07\" id=\"u7023ed07\"><span data-lake-id=\"uf60f974e\" id=\"uf60f974e\">从源码的注释上，我们可以知道 scopeName 可以取下面这些值：</span><strong><span data-lake-id=\"ud316e720\" id=\"ud316e720\">前两个用的比较多，我们就来看看前面两个可以取的值</span></strong></p><p data-lake-id=\"u07b4f0c3\" id=\"u07b4f0c3\"><br></p><blockquote data-lake-id=\"ua9502aa0\" id=\"ua9502aa0\"><p data-lake-id=\"ue3ef2307\" id=\"ue3ef2307\"><span data-lake-id=\"u1178808e\" id=\"u1178808e\">ConfigurableBeanFactory#SCOPE_PROTOTYPE<br /></span><span data-lake-id=\"u1e717f2b\" id=\"u1e717f2b\">ConfigurableBeanFactory#SCOPE_SINGLETON<br /></span><span data-lake-id=\"u1f069b0b\" id=\"u1f069b0b\">org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST<br /></span><span data-lake-id=\"uafca51f8\" id=\"uafca51f8\">org.springframework.web.context.WebApplicationContext#SCOPE_SESSION</span></p></blockquote><p data-lake-id=\"u491beabc\" id=\"u491beabc\"><br></p><p data-lake-id=\"uefbddfa2\" id=\"uefbddfa2\"><span data-lake-id=\"ua8e8f59c\" id=\"ua8e8f59c\">我们可以点到 ConfigurableBeanFactory 接口去看一下：</span></p><p data-lake-id=\"ud899e444\" id=\"ud899e444\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22public%20interface%20ConfigurableBeanFactory%20extends%20HierarchicalBeanFactory%2C%20SingletonBeanRegistry%20%7B%5Cn%20%20%20%20String%20SCOPE_SINGLETON%20%3D%20%5C%22singleton%5C%22%3B%5Cn%20%20%20%20String%20SCOPE_PROTOTYPE%20%3D%20%5C%22prototype%5C%22%3B%5Cn%5Cn%20%20%20%20void%20setParentBeanFactory(BeanFactory%20var1)%20throws%20IllegalStateException%3B%5Cn%5Cn%20%20%20%20void%20setBeanClassLoader(ClassLoader%20var1)%3B%5Cn%5Cn%20%20%20%20ClassLoader%20getBeanClassLoader()%3B%5Cn%5Cn%20%20%20%20void%20setTempClassLoader(ClassLoader%20var1)%3B%5Cn%5Cn%20%20%20%20ClassLoader%20getTempClassLoader()%3B%5Cn%5Cn%20%20%20%20void%20setCacheBeanMetadata(boolean%20var1)%3B%5Cn%5Cn%20%20%20%20boolean%20isCacheBeanMetadata()%3B%5Cn%5Cn%20%20%20%20void%20setBeanExpressionResolver(BeanExpressionResolver%20var1)%3B%5Cn%5Cn%20%20%20%20BeanExpressionResolver%20getBeanExpressionResolver()%3B%5Cn%5Cn%20%20%20%20void%20setConversionService(ConversionService%20var1)%3B%5Cn%5Cn%20%20%20%20ConversionService%20getConversionService()%3B%5Cn%5Cn%20%20%20%20void%20addPropertyEditorRegistrar(PropertyEditorRegistrar%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerCustomEditor(Class%3C%3F%3E%20var1%2C%20Class%3C%3F%20extends%20PropertyEditor%3E%20var2)%3B%5Cn%5Cn%20%20%20%20void%20copyRegisteredEditorsTo(PropertyEditorRegistry%20var1)%3B%5Cn%5Cn%20%20%20%20void%20setTypeConverter(TypeConverter%20var1)%3B%5Cn%5Cn%20%20%20%20TypeConverter%20getTypeConverter()%3B%5Cn%5Cn%20%20%20%20void%20addEmbeddedValueResolver(StringValueResolver%20var1)%3B%5Cn%5Cn%20%20%20%20boolean%20hasEmbeddedValueResolver()%3B%5Cn%5Cn%20%20%20%20String%20resolveEmbeddedValue(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20addBeanPostProcessor(BeanPostProcessor%20var1)%3B%5Cn%5Cn%20%20%20%20int%20getBeanPostProcessorCount()%3B%5Cn%5Cn%20%20%20%20void%20registerScope(String%20var1%2C%20Scope%20var2)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getRegisteredScopeNames()%3B%5Cn%5Cn%20%20%20%20Scope%20getRegisteredScope(String%20var1)%3B%5Cn%5Cn%20%20%20%20AccessControlContext%20getAccessControlContext()%3B%5Cn%5Cn%20%20%20%20void%20copyConfigurationFrom(ConfigurableBeanFactory%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerAlias(String%20var1%2C%20String%20var2)%20throws%20BeanDefinitionStoreException%3B%5Cn%5Cn%20%20%20%20void%20resolveAliases(StringValueResolver%20var1)%3B%5Cn%5Cn%20%20%20%20BeanDefinition%20getMergedBeanDefinition(String%20var1)%20throws%20NoSuchBeanDefinitionException%3B%5Cn%5Cn%20%20%20%20boolean%20isFactoryBean(String%20var1)%20throws%20NoSuchBeanDefinitionException%3B%5Cn%5Cn%20%20%20%20void%20setCurrentlyInCreation(String%20var1%2C%20boolean%20var2)%3B%5Cn%5Cn%20%20%20%20boolean%20isCurrentlyInCreation(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20registerDependentBean(String%20var1%2C%20String%20var2)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getDependentBeans(String%20var1)%3B%5Cn%5Cn%20%20%20%20String%5B%5D%20getDependenciesForBean(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20destroyBean(String%20var1%2C%20Object%20var2)%3B%5Cn%5Cn%20%20%20%20void%20destroyScopedBean(String%20var1)%3B%5Cn%5Cn%20%20%20%20void%20destroySingletons()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220226488e%22%7D\"></card><p data-lake-id=\"u0be28110\" id=\"u0be28110\"><br></p><p data-lake-id=\"ub3b55624\" id=\"ub3b55624\"><span data-lake-id=\"u7f32b452\" id=\"u7f32b452\">我们来指定一个多实例的：</span></p><p data-lake-id=\"u92b24b1a\" id=\"u92b24b1a\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%20%20%20%20%2F%2Fsingleton%3A%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%2F%2Fprototype%3A%E5%A4%9A%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%2F%2Frequest%3A%E5%90%8C%E4%B8%80%E6%AC%A1%E8%AF%B7%E6%B1%82%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%2F%2Fsession%3A%E5%90%8C%E4%B8%80%E4%B8%AAsession%E5%88%9B%E5%BB%BA%E7%9A%84%E4%B8%80%E4%B8%AA%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20%40Scope(%5C%22prototype%5C%22)%5Cn%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2207d68492%22%7D\"></card><p data-lake-id=\"u9acb702f\" id=\"u9acb702f\"><br></p><p data-lake-id=\"ud1b980d0\" id=\"ud1b980d0\"><span data-lake-id=\"u829f1b16\" id=\"u829f1b16\">现在，我们再来测试一次：</span></p><p data-lake-id=\"u903eebc3\" id=\"u903eebc3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20String%5B%5D%20definitionNames%20%3D%20applicationContext.getBeanDefinitionNames()%3B%5Cn%20%20%20%20%20%20%20%20for%20(String%20name%20%3A%20definitionNames)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20System.out.println(name)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%E9%BB%98%E8%AE%A4%E6%98%AF%E5%8D%95%E5%AE%9E%E4%BE%8B%E7%9A%84%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person2%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(person1%3D%3Dperson2)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229915a1fa-1%22%7D\"></card><p data-lake-id=\"ub2114ec6\" id=\"ub2114ec6\"><br></p><p data-lake-id=\"u414ff8e5\" id=\"u414ff8e5\"><span data-lake-id=\"ud9ce09be\" id=\"ud9ce09be\">这个时候的测试结果如下：</span></p><p data-lake-id=\"u25841726\" id=\"u25841726\"><br></p><blockquote data-lake-id=\"u9ddca6bd\" id=\"u9ddca6bd\"><p data-lake-id=\"u3d8bd106\" id=\"u3d8bd106\"><span data-lake-id=\"ud4a61811\" id=\"ud4a61811\">org.springframework.context.annotation.internalConfigurationAnnotationProcessor<br /></span><span data-lake-id=\"ub35e399f\" id=\"ub35e399f\">org.springframework.context.annotation.internalAutowiredAnnotationProcessor<br /></span><span data-lake-id=\"u73ad7afa\" id=\"u73ad7afa\">org.springframework.context.annotation.internalRequiredAnnotationProcessor<br /></span><span data-lake-id=\"u62f4044b\" id=\"u62f4044b\">org.springframework.context.annotation.internalCommonAnnotationProcessor<br /></span><span data-lake-id=\"u121d329f\" id=\"u121d329f\">org.springframework.context.event.internalEventListenerProcessor<br /></span><span data-lake-id=\"u7f149fba\" id=\"u7f149fba\">org.springframework.context.event.internalEventListenerFactory<br /></span><span data-lake-id=\"ufb25e8df\" id=\"ufb25e8df\">mainConfig2<br /></span><span data-lake-id=\"u412a3b8f\" id=\"u412a3b8f\">person<br /></span><span data-lake-id=\"u5b3d5112\" id=\"u5b3d5112\">false</span></p></blockquote><p data-lake-id=\"u2f62c9b1\" id=\"u2f62c9b1\"><br></p><p data-lake-id=\"ub867c932\" id=\"ub867c932\"><span data-lake-id=\"ue13371b4\" id=\"ue13371b4\">这个时候，bean 的实例就多实例的，每调用一次 getBean() 方法就会创建一个实例；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22uv2Wz%22%7D\"></card><p data-lake-id=\"u00ff5003\" id=\"u00ff5003\"><span data-lake-id=\"ue6183a23\" id=\"ue6183a23\">我们来看看当 bean 的作用域为单例的时候，它在 IOC 容器中是何时创建的：</span></p><p data-lake-id=\"u57426488\" id=\"u57426488\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%20%20%20%20%5Cn%20%20%20%20%40Scope%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%BB%99IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0Person...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%222920535c%22%7D\"></card><p data-lake-id=\"u91649e27\" id=\"u91649e27\"><br></p><p data-lake-id=\"uabb59a1f\" id=\"uabb59a1f\"><span data-lake-id=\"ubd58ce8a\" id=\"ubd58ce8a\">首先，我们先启动 IOC 容器，但是不调用 getBean 方法来获取 Person 实例：</span></p><p data-lake-id=\"u95dab8ae\" id=\"u95dab8ae\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2274c44b71%22%7D\"></card><p data-lake-id=\"u268f16f2\" id=\"u268f16f2\"><br></p><p data-lake-id=\"u78b0e9d9\" id=\"u78b0e9d9\"><span data-lake-id=\"u62fa6618\" id=\"u62fa6618\">测试结果如下：</span></p><p data-lake-id=\"u412ad985\" id=\"u412ad985\"><br></p><blockquote data-lake-id=\"u5b07b414\" id=\"u5b07b414\"><p data-lake-id=\"u2ab42a54\" id=\"u2ab42a54\"><span data-lake-id=\"u372fc05e\" id=\"u372fc05e\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"u5c2c9c3b\" id=\"u5c2c9c3b\"><br></p><p data-lake-id=\"u5c555732\" id=\"u5c555732\"><span data-lake-id=\"u86f44bd3\" id=\"u86f44bd3\">这个时候，我们就可以发现，当作用域为单例的时候，IOC 容器在启动的时候，就会将容器中所有作用域为单例的 bean 的实例给创建出来；以后的每次获取，就直接从 IOC 容器中来获取，相当于是从 map.get() 的一个过程；</span></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22sDFha%22%7D\"></card><p data-lake-id=\"u64fa7f9a\" id=\"u64fa7f9a\"><span data-lake-id=\"u2e3f8614\" id=\"u2e3f8614\">然而，当我们的 bean 的作用域改成多实例的时候，我们再看看结果：</span></p><p data-lake-id=\"u7dbe6cd2\" id=\"u7dbe6cd2\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%40Configuration%5Cnpublic%20class%20MainConfig2%20%7B%5Cn%5Cn%20%20%20%20%40Scope(%5C%22prototype%5C%22)%5Cn%20%20%20%20%40Bean(%5C%22person%5C%22)%5Cn%20%20%20%20public%20Person%20person()%20%7B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22%E7%BB%99IOC%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%B7%BB%E5%8A%A0Person...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20return%20new%20Person()%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227ea2c77f%22%7D\"></card><p data-lake-id=\"ua212fdba\" id=\"ua212fdba\"><br></p><p data-lake-id=\"u2e5d4c32\" id=\"u2e5d4c32\"><span data-lake-id=\"ue083aca3\" id=\"ue083aca3\">当我们再运行的时候：</span></p><p data-lake-id=\"u8f7746e1\" id=\"u8f7746e1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2274c44b71-1%22%7D\"></card><p data-lake-id=\"u554553a1\" id=\"u554553a1\"><br></p><p data-lake-id=\"u1799a33e\" id=\"u1799a33e\"><span data-lake-id=\"ue35dbbf4\" id=\"ue35dbbf4\">我们可以发现，控制台没有任何的输出结果；在 IOC 容器创建的时候，没有去创建这个作用域为多实例的 bean；</span></p><p data-lake-id=\"ufd75075d\" id=\"ufd75075d\"><br></p><p data-lake-id=\"uad168217\" id=\"uad168217\"><span data-lake-id=\"u6fe100a2\" id=\"u6fe100a2\">这个时候，我们来调用 getBean() 方法来获取一下：</span></p><p data-lake-id=\"u40cedbf0\" id=\"u40cedbf0\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22IOC%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2212fbf35a%22%7D\"></card><p data-lake-id=\"ue939842c\" id=\"ue939842c\"><br></p><p data-lake-id=\"u368642e1\" id=\"u368642e1\"><span data-lake-id=\"u962aac93\" id=\"u962aac93\">这个时候，控制台打印了：</span></p><p data-lake-id=\"u95b18869\" id=\"u95b18869\"><br></p><blockquote data-lake-id=\"uce6f86f5\" id=\"uce6f86f5\"><p data-lake-id=\"ue91cc42a\" id=\"ue91cc42a\"><span data-lake-id=\"u4cfed432\" id=\"u4cfed432\">IOC 容器创建完成…<br /></span><span data-lake-id=\"ub2c669bf\" id=\"ub2c669bf\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"ub46fbf93\" id=\"ub46fbf93\"><br></p><p data-lake-id=\"uea9c175a\" id=\"uea9c175a\"><span data-lake-id=\"ud15b2140\" id=\"ud15b2140\">同时， 如果我多次获取：</span></p><p data-lake-id=\"u83d1e9b1\" id=\"u83d1e9b1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22java%22%2C%22code%22%3A%22%20%20%20%20%40Test%5Cn%20%20%20%20public%20void%20test02()%20%7B%5Cn%20%20%20%20%20%20%20%20ApplicationContext%20applicationContext%20%3D%20new%20AnnotationConfigApplicationContext(MainConfig2.class)%3B%5Cn%20%20%20%20%20%20%20%20System.out.println(%5C%22IOC%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90...%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20Person%20person1%20%3D%20(Person)%20applicationContext.getBean(%5C%22person%5C%22)%3B%5Cn%20%20%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22theme%22%3A%22default%22%2C%22id%22%3A%223adc8077%22%7D\"></card><p data-lake-id=\"ua8bd6797\" id=\"ua8bd6797\"><br></p><p data-lake-id=\"u044a841d\" id=\"u044a841d\"><span data-lake-id=\"ud68bcb36\" id=\"ud68bcb36\">测试结果如下：</span></p><p data-lake-id=\"u7ec99b65\" id=\"u7ec99b65\"><br></p><blockquote data-lake-id=\"u6f0417a9\" id=\"u6f0417a9\"><p data-lake-id=\"u269e18a6\" id=\"u269e18a6\"><span data-lake-id=\"ud77aec04\" id=\"ud77aec04\">IOC 容器创建完成…<br /></span><span data-lake-id=\"u65f9dc6b\" id=\"u65f9dc6b\">给 IOC 容器中添加 Person…<br /></span><span data-lake-id=\"ube7cea4e\" id=\"ube7cea4e\">给 IOC 容器中添加 Person…</span></p></blockquote><p data-lake-id=\"u3ee129d5\" id=\"u3ee129d5\"><br></p><p data-lake-id=\"u10507792\" id=\"u10507792\"><span data-lake-id=\"ua66f3a50\" id=\"ua66f3a50\">我们可以发现，我们用 getBean 方法获取几次，就创建几次 bean 的实例；</span></p><p data-lake-id=\"u295e7a50\" id=\"u295e7a50\"><br></p><p data-lake-id=\"u2fb334a9\" id=\"u2fb334a9\"><span data-lake-id=\"u0932a4f6\" id=\"u0932a4f6\">也就是说当 bean 是作用域为多例的时候，IOC 容器启动的时候，就不会去创建 bean 的实例的，而是当我们调用 getBean() 获取的时候去创建 bean 的实例；而且每次调用的时候，都会创建 bean 的实例；</span></p>",
    "public": 0,
    "status": 1,
    "view_status": 0,
    "read_status": 1,
    "likes_count": 0,
    "comments_count": 0,
    "content_updated_at": "2022-01-22T14:48:40.000Z",
    "deleted_at": null,
    "created_at": "2022-01-22T14:44:26.000Z",
    "updated_at": "2022-01-22T14:48:40.000Z",
    "published_at": "2022-01-22T14:48:40.000Z",
    "first_published_at": "2022-01-22T14:44:26.000Z",
    "word_count": 5862,
    "cover": null,
    "description": "0 简介 当我们还在使用 Spring、SpringMVC、Mybatis 三大框架来整合开发的时候，我们会写大量的 xml 文件来进行配置；然而在 Springboot 和 SpringCloud 兴起之后，学习 Spring 的注解驱动及其原理那将会是非常有必要的了；因为在 Springb...",
    "custom_description": null,
    "hits": 0,
    "_serializer": "v2.doc_detail"
  }
]